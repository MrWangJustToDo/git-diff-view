export const a = {
  oldFile: {
    fileName: null,
    content: "",
  },
  newFile: {
    fileName: "src/components/MultiLevelReview/AddReviewConfigModal.tsx",
    content:
      "import type { DepoCatalogueReviewers, UpdateCatalogueReviewersParams } from '@/apis/modules/catalogue/module';\nimport { DepoCatalogueReviewEnum } from '@/apis/modules/catalogue/module';\nimport { gsModalSize } from '@/utils/commonVariable';\nimport { Button, Form, Modal, Radio, message } from 'antd';\nimport { useEffect, useMemo, useState } from 'react';\nimport { UserSelect } from '../UserSelect';\nimport { useCatalogueTree } from '@/hooks/useCatalogueTree';\nimport type { IUserInfo } from '@/apis/modules/user/module';\nimport { updateCatalogueReviewers } from '@/apis/modules/catalogue';\n\nexport const AddReviewConfig = ({ currentReviewList }: { currentReviewList: DepoCatalogueReviewers }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n\n  const [userList, setUserList] = useState<IUserInfo[]>([]);\n\n  const { computedSelectItem, reloadCatalogueItemReviewers } = useCatalogueTree.useShallowSelector((s) => ({\n    computedSelectItem: s.computedSelectItem,\n    reloadCatalogueItemReviewers: s.getCatalogueItemReviewers,\n  }));\n\n  const [form] = Form.useForm<{ reviewers: number[]; type: DepoCatalogueReviewEnum }>();\n\n  const selectedList = useMemo(() => currentReviewList.map(i => i.reviewers || []).reduce((p, c) => p.concat(c), []), [currentReviewList])\n\n  useEffect(() => {\n    return () => form.resetFields();\n  }, [form, isOpen]);\n\n  const onSubmit = async () => {\n    if (loading) return;\n    try {\n      setLoading(true);\n      const formValue = await form.validateFields();\n      if (!computedSelectItem) {\n        message.error('意料之外的错误，请刷新重试');\n        return;\n      }\n      const params: UpdateCatalogueReviewersParams = {\n        dirId: computedSelectItem.id,\n        updateCatalogueReviewLevels: [\n          {\n            level: currentReviewList.length + 1,\n            type: formValue.type,\n            reviewers: userList\n              .filter((i) => formValue.reviewers.includes(i.id))\n              .map((i) => ({ id: i.id, username: i.username, nickname: i.nickname })),\n          },\n        ],\n      };\n      const response = await updateCatalogueReviewers(params);\n      if (response.success) {\n        await reloadCatalogueItemReviewers();\n        setIsOpen(false);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>新增审查层级</Button>\n      <Modal\n        title=\"新增审查层级\"\n        visible={isOpen}\n        okText=\"提交更改\"\n        width={gsModalSize}\n        onOk={onSubmit}\n        confirmLoading={loading}\n        onCancel={() => setIsOpen(false)}\n      >\n        <Form form={form} labelCol={{ span: 4 }} wrapperCol={{ span: 20 }} initialValues={{ type: DepoCatalogueReviewEnum.OR }}>\n          <Form.Item label=\"直接审查人\" name=\"reviewers\" rules={[{ required: true, message: '请选择审查人' }]}>\n            <UserSelect\n              mode=\"multiple\"\n              onLoad={(list) => setUserList(list)}\n              disableItems={selectedList}\n              filterOption={(input, option) => !!option?.label?.toString().toLowerCase().includes(input?.toLowerCase())}\n            />\n          </Form.Item>\n          <Form.Item label=\"审查条件\" name=\"type\" rules={[{ required: true, message: '请选择审查条件' }]}>\n            <Radio.Group size=\"middle\" style={{ width: '100%' }}>\n              <Radio.Button value={DepoCatalogueReviewEnum.AND}>会签</Radio.Button>\n              <Radio.Button value={DepoCatalogueReviewEnum.OR}>或签</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};",
  },
  hunks: [
    "--- /dev/null\n+++ src/components/MultiLevelReview/AddReviewConfigModal.tsx\n@@ -0,0 +1,93 @@\n+import type { DepoCatalogueReviewers, UpdateCatalogueReviewersParams } from '@/apis/modules/catalogue/module';\n+import { DepoCatalogueReviewEnum } from '@/apis/modules/catalogue/module';\n+import { gsModalSize } from '@/utils/commonVariable';\n+import { Button, Form, Modal, Radio, message } from 'antd';\n+import { useEffect, useMemo, useState } from 'react';\n+import { UserSelect } from '../UserSelect';\n+import { useCatalogueTree } from '@/hooks/useCatalogueTree';\n+import type { IUserInfo } from '@/apis/modules/user/module';\n+import { updateCatalogueReviewers } from '@/apis/modules/catalogue';\n+\n+export const AddReviewConfig = ({ currentReviewList }: { currentReviewList: DepoCatalogueReviewers }) => {\n+  const [isOpen, setIsOpen] = useState(false);\n+\n+  const [loading, setLoading] = useState(false);\n+\n+  const [userList, setUserList] = useState<IUserInfo[]>([]);\n+\n+  const { computedSelectItem, reloadCatalogueItemReviewers } = useCatalogueTree.useShallowSelector((s) => ({\n+    computedSelectItem: s.computedSelectItem,\n+    reloadCatalogueItemReviewers: s.getCatalogueItemReviewers,\n+  }));\n+\n+  const [form] = Form.useForm<{ reviewers: number[]; type: DepoCatalogueReviewEnum }>();\n+\n+  const selectedList = useMemo(() => currentReviewList.map(i => i.reviewers || []).reduce((p, c) => p.concat(c), []), [currentReviewList])\n+\n+  useEffect(() => {\n+    return () => form.resetFields();\n+  }, [form, isOpen]);\n+\n+  const onSubmit = async () => {\n+    if (loading) return;\n+    try {\n+      setLoading(true);\n+      const formValue = await form.validateFields();\n+      if (!computedSelectItem) {\n+        message.error('意料之外的错误，请刷新重试');\n+        return;\n+      }\n+      const params: UpdateCatalogueReviewersParams = {\n+        dirId: computedSelectItem.id,\n+        updateCatalogueReviewLevels: [\n+          {\n+            level: currentReviewList.length + 1,\n+            type: formValue.type,\n+            reviewers: userList\n+              .filter((i) => formValue.reviewers.includes(i.id))\n+              .map((i) => ({ id: i.id, username: i.username, nickname: i.nickname })),\n+          },\n+        ],\n+      };\n+      const response = await updateCatalogueReviewers(params);\n+      if (response.success) {\n+        await reloadCatalogueItemReviewers();\n+        setIsOpen(false);\n+      }\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  return (\n+    <>\n+      <Button onClick={() => setIsOpen(true)}>新增审查层级</Button>\n+      <Modal\n+        title=\"新增审查层级\"\n+        visible={isOpen}\n+        okText=\"提交更改\"\n+        width={gsModalSize}\n+        onOk={onSubmit}\n+        confirmLoading={loading}\n+        onCancel={() => setIsOpen(false)}\n+      >\n+        <Form form={form} labelCol={{ span: 4 }} wrapperCol={{ span: 20 }} initialValues={{ type: DepoCatalogueReviewEnum.OR }}>\n+          <Form.Item label=\"直接审查人\" name=\"reviewers\" rules={[{ required: true, message: '请选择审查人' }]}>\n+            <UserSelect\n+              mode=\"multiple\"\n+              onLoad={(list) => setUserList(list)}\n+              disableItems={selectedList}\n+              filterOption={(input, option) => !!option?.label?.toString().toLowerCase().includes(input?.toLowerCase())}\n+            />\n+          </Form.Item>\n+          <Form.Item label=\"审查条件\" name=\"type\" rules={[{ required: true, message: '请选择审查条件' }]}>\n+            <Radio.Group size=\"middle\" style={{ width: '100%' }}>\n+              <Radio.Button value={DepoCatalogueReviewEnum.AND}>会签</Radio.Button>\n+              <Radio.Button value={DepoCatalogueReviewEnum.OR}>或签</Radio.Button>\n+            </Radio.Group>\n+          </Form.Item>\n+        </Form>\n+      </Modal>\n+    </>\n+  );\n+};\n",
  ],
};

export const b = {
  newFile: {
    fileName: "a/packages/myreact-reactivity/src/reactive/feature.ts",
    content:
      'import { Component, createElement, useState, useCallback, useMemo } from "@my-react/react";\n\nimport { proxyRefs, ReactiveEffect } from "../api";\n\nimport type { UnwrapRef } from "../api";\nimport type { LikeReactNode } from "@my-react/react";\n\ntype LifeCycle = {\n  onBeforeMount: Array<() => void>;\n\n  onMounted: Array<() => void>;\n\n  onBeforeUpdate: Array<() => void>;\n\n  onUpdated: Array<() => void>;\n\n  onBeforeUnmount: Array<() => void>;\n\n  onUnmounted: Array<() => void>;\n\n  hasHookInstalled: boolean;\n\n  canUpdateComponent: boolean;\n};\n\n/**\n * @internal\n */\nexport let globalInstance: LifeCycle | null = null;\n\nexport function createReactive<P extends Record<string, unknown>, S extends Record<string, unknown>>(props?: {\n  setup: () => S;\n  render?: (props: UnwrapRef<S> & P) => LikeReactNode;\n}) {\n  const setup = typeof props === "function" ? props : props.setup;\n\n  const render = typeof props === "function" ? null : props.render;\n\n  class ForBeforeUnmount extends Component<{ ["$$__instance__$$"]: LifeCycle; children: LikeReactNode }> {\n    componentWillUnmount(): void {\n      this.props.$$__instance__$$.onBeforeUnmount.forEach((f) => f());\n    }\n\n    render() {\n      return this.props.children;\n    }\n  }\n\n  class ForBeforeMount extends Component<{ ["$$__instance__$$"]: LifeCycle; children: LikeReactNode }> {\n    componentDidMount(): void {\n      this.props.$$__instance__$$.onBeforeMount.forEach((f) => f());\n    }\n\n    render() {\n      return this.props.children;\n    }\n  }\n\n  class RenderWithLifeCycle extends Component<\n    {\n      ["$$__trigger__$$"]: () => void;\n      ["$$__instance__$$"]: LifeCycle;\n      ["$$__reactiveState__$$"]: UnwrapRef<S>;\n      children?: (props: UnwrapRef<S> & P) => LikeReactNode;\n    } & P\n  > {\n    componentDidMount(): void {\n      this.props.$$__instance__$$.onMounted.forEach((f) => f());\n    }\n\n    componentDidUpdate(): void {\n      this.props.$$__instance__$$.onUpdated.forEach((f) => f());\n    }\n\n    componentWillUnmount(): void {\n      this.props.$$__instance__$$.onUnmounted.forEach((f) => f());\n      this.reactiveEffect.stop();\n    }\n\n    shouldComponentUpdate(): boolean {\n      this.props.$$__instance__$$.canUpdateComponent = false;\n      this.props.$$__instance__$$.onBeforeUpdate.forEach((f) => f());\n      this.props.$$__instance__$$.canUpdateComponent = true;\n      return true;\n    }\n\n    reactiveEffect = new ReactiveEffect(() => {\n      const { children, $$__trigger__$$, $$__reactiveState__$$, $$__instance__$$, ...last } = this.props;\n      const targetRender = (render || children) as (props: UnwrapRef<S> & P) => LikeReactNode;\n      const element = targetRender?.({ ...last, ...$$__reactiveState__$$ } as UnwrapRef<S> & P) || null;\n      return element;\n    }, this.props.$$__trigger__$$);\n\n    render() {\n      return createElement(ForBeforeMount, { ["$$__instance__$$"]: this.props.$$__instance__$$, children: this.reactiveEffect.run() });\n    }\n  }\n\n  class Render extends Component<\n    {\n      ["$$__trigger__$$"]: () => void;\n      ["$$__reactiveState__$$"]: UnwrapRef<S>;\n      children?: (props: UnwrapRef<S> & P) => LikeReactNode;\n    } & P\n  > {\n    componentWillUnmount(): void {\n      this.reactiveEffect.stop();\n    }\n\n    reactiveEffect = new ReactiveEffect(() => {\n      const { children, $$__trigger__$$, $$__reactiveState__$$, $$__instance__$$, ...last } = this.props;\n      const targetRender = (render || children) as (props: UnwrapRef<S> & P) => LikeReactNode;\n      const element = targetRender?.({ ...last, ...$$__reactiveState__$$ } as UnwrapRef<S> & P) || null;\n      return element;\n    }, this.props.$$__trigger__$$);\n\n    render() {\n      return this.reactiveEffect.run();\n    }\n  }\n\n  const MyReactReactiveComponent = (props: P & { children?: (props: UnwrapRef<S> & P) => LikeReactNode }) => {\n    const [instance] = useState(() => ({\n      onBeforeMount: [],\n      onBeforeUpdate: [],\n      onBeforeUnmount: [],\n      onMounted: [],\n      onUpdated: [],\n      onUnmounted: [],\n      hasHookInstalled: false,\n      canUpdateComponent: true,\n    }));\n\n    const state = useMemo(() => {\n      globalInstance = instance;\n\n      const state = proxyRefs(setup());\n\n      globalInstance = null;\n\n      return state;\n    }, []);\n\n    if (__DEV__) {\n      for (const key in props) {\n        if (key in state) {\n          console.warn(`duplicate key ${key} in Component props and reactive state, please fix this usage`);\n        }\n      }\n      if (props["children"] && typeof props["children"] !== "function") {\n        throw new Error("the component which return from createReactive() expect a function children");\n      }\n    }\n\n    const [, setState] = useState(() => 0);\n\n    const updateCallback = useCallback(() => {\n      if (instance.canUpdateComponent) {\n        setState((i) => i + 1);\n      }\n    }, []);\n\n    if (instance.hasHookInstalled) {\n      return createElement(ForBeforeUnmount, {\n        ["$$__instance__$$"]: instance,\n        children: createElement(RenderWithLifeCycle, {\n          ...props,\n          ["$$__trigger__$$"]: updateCallback,\n          ["$$__reactiveState__$$"]: state,\n          ["$$__instance__$$"]: instance,\n        }),\n      }) as LikeReactNode;\n    } else {\n      return createElement(Render, { ...props, ["$$__trigger__$$"]: updateCallback, ["$$__reactiveState__$$"]: state }) as LikeReactNode;\n    }\n  };\n\n  return MyReactReactiveComponent;\n}\n',
  },
  hunks: [
    'diff --git a/packages/myreact-reactivity/src/reactive/feature.ts b/packages/myreact-reactivity/src/reactive/feature.ts\nindex 5b301628..15aac42f 100644\n--- a/packages/myreact-reactivity/src/reactive/feature.ts\n+++ b/packages/myreact-reactivity/src/reactive/feature.ts\n@@ -74,7 +74,7 @@ export function createReactive<P extends Record<string, unknown>, S extends Reco\n \n     componentWillUnmount(): void {\n       this.props.$$__instance__$$.onUnmounted.forEach((f) => f());\n-      this.effect.stop();\n+      this.reactiveEffect.stop();\n     }\n \n     shouldComponentUpdate(): boolean {\n@@ -84,7 +84,7 @@ export function createReactive<P extends Record<string, unknown>, S extends Reco\n       return true;\n     }\n \n-    effect = new ReactiveEffect(() => {\n+    reactiveEffect = new ReactiveEffect(() => {\n       const { children, $$__trigger__$$, $$__reactiveState__$$, $$__instance__$$, ...last } = this.props;\n       const targetRender = (render || children) as (props: UnwrapRef<S> & P) => LikeReactNode;\n       const element = targetRender?.({ ...last, ...$$__reactiveState__$$ } as UnwrapRef<S> & P) || null;\n@@ -92,7 +92,7 @@ export function createReactive<P extends Record<string, unknown>, S extends Reco\n     }, this.props.$$__trigger__$$);\n \n     render() {\n-      return createElement(ForBeforeMount, { ["$$__instance__$$"]: this.props.$$__instance__$$, children: this.effect.run() });\n+      return createElement(ForBeforeMount, { ["$$__instance__$$"]: this.props.$$__instance__$$, children: this.reactiveEffect.run() });\n     }\n   }\n \n@@ -104,10 +104,10 @@ export function createReactive<P extends Record<string, unknown>, S extends Reco\n     } & P\n   > {\n     componentWillUnmount(): void {\n-      this.effect.stop();\n+      this.reactiveEffect.stop();\n     }\n \n-    effect = new ReactiveEffect(() => {\n+    reactiveEffect = new ReactiveEffect(() => {\n       const { children, $$__trigger__$$, $$__reactiveState__$$, $$__instance__$$, ...last } = this.props;\n       const targetRender = (render || children) as (props: UnwrapRef<S> & P) => LikeReactNode;\n       const element = targetRender?.({ ...last, ...$$__reactiveState__$$ } as UnwrapRef<S> & P) || null;\n@@ -115,7 +115,7 @@ export function createReactive<P extends Record<string, unknown>, S extends Reco\n     }, this.props.$$__trigger__$$);\n \n     render() {\n-      return this.effect.run();\n+      return this.reactiveEffect.run();\n     }\n   }\n',
  ],
};

export const c = {
  newFile: {
    fileName: "a/packages/myreact-dom/src/client/tools/highlight.ts",
    content:
      'import { STATE_TYPE, include } from "@my-react/react-shared";\n\nimport { enableHighlight } from "@my-react-dom-shared";\n\nimport type { MyReactFiberNode } from "@my-react/react-reconciler";\nimport type { ClientDomDispatch } from "@my-react-dom-client/renderDispatch";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const debounce = <T extends Function>(callback: T, time?: number): T => {\n  let id = null;\n  return ((...args) => {\n    clearTimeout(id);\n    id = setTimeout(() => {\n      callback.call(null, ...args);\n    }, time || 40);\n  }) as unknown as T;\n};\n\n/**\n * @internal\n */\nexport class HighLight {\n  /**\n   * @type HighLight\n   */\n  static instance: HighLight | undefined = undefined;\n\n  /**\n   *\n   * @returns HighLight\n   */\n  static getHighLightInstance = () => {\n    HighLight.instance = HighLight.instance || new HighLight();\n\n    return HighLight.instance;\n  };\n\n  mask: HTMLCanvasElement | null = null;\n\n  range = document.createRange();\n\n  running = false;\n\n  __pendingUpdate__: Set<MyReactFiberNode> = new Set();\n\n  __pendingAppend__: Set<MyReactFiberNode> = new Set();\n\n  __pendingSetRef__: Set<MyReactFiberNode> = new Set();\n\n  __pendingWarn__: Set<MyReactFiberNode> = new Set();\n\n  width = 0;\n\n  height = 0;\n\n  constructor() {\n    this.mask = document.createElement("canvas");\n    this.mask.setAttribute("data-highlight", "@my-react");\n    this.mask.style.cssText = `\n      position: fixed;\n      z-index: 99999999;\n      left: 0;\n      top: 0;\n      pointer-events: none;\n      `;\n    document.documentElement.prepend(this.mask);\n    this.setSize();\n    window.addEventListener("resize", this.setSize);\n  }\n\n  setSize = debounce(() => {\n    this.width = window.innerWidth || document.documentElement.clientWidth;\n\n    this.height = window.innerHeight || document.documentElement.clientHeight;\n\n    this.mask.width = this.width;\n\n    this.mask.height = this.height;\n  });\n\n  highLight = (fiber: MyReactFiberNode, type: "update" | "append" | "setRef" | "warn") => {\n    if (fiber.nativeNode) {\n      switch (type) {\n        case "update":\n          this.__pendingUpdate__.add(fiber);\n          break;\n        case "append":\n          this.__pendingAppend__.add(fiber);\n          break;\n        case "setRef":\n          this.__pendingSetRef__.add(fiber);\n          break;\n        case "warn":\n          this.__pendingWarn__.add(fiber);\n      }\n    }\n\n    if (!this.running) {\n      this.running = true;\n      requestAnimationFrame(this.flashPending);\n    }\n  };\n\n  flashPending = () => {\n    const context = this.mask.getContext("2d");\n\n    const allPendingUpdate = new Set(this.__pendingUpdate__);\n\n    this.__pendingUpdate__.clear();\n\n    context.strokeStyle = "rgba(200,50,50,0.8)";\n\n    allPendingUpdate.forEach((fiber) => {\n      if (include(fiber.state, STATE_TYPE.__unmount__)) return;\n      try {\n        const node = fiber.nativeNode as HTMLElement;\n        if (node.nodeType === Node.TEXT_NODE) {\n          this.range.selectNodeContents(node);\n        } else {\n          this.range.selectNode(node);\n        }\n        const rect = this.range.getBoundingClientRect();\n        if (\n          (rect.width || rect.height) &&\n          rect.top >= 0 &&\n          rect.left >= 0 &&\n          rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n        ) {\n          // do the highlight paint\n          const left = rect.left - 0.5;\n          const top = rect.top - 0.5;\n          const width = rect.width + 1;\n          const height = rect.height + 1;\n          context.strokeRect(\n            left < 0 ? 0 : left,\n            top < 0 ? 0 : top,\n            width > window.innerWidth ? window.innerWidth : width,\n            height > window.innerHeight ? window.innerHeight : height\n          );\n        }\n      } catch {\n        void 0;\n      }\n    });\n\n    const allPendingAppend = new Set(this.__pendingAppend__);\n\n    this.__pendingAppend__.clear();\n\n    allPendingAppend.forEach((fiber) => {\n      if (include(fiber.state, STATE_TYPE.__unmount__)) return;\n      try {\n        const node = fiber.nativeNode as HTMLElement;\n        if (node.nodeType === Node.TEXT_NODE) {\n          this.range.selectNodeContents(node);\n        } else {\n          this.range.selectNode(node);\n        }\n        const rect = this.range.getBoundingClientRect();\n        if (\n          (rect.width || rect.height) &&\n          rect.top >= 0 &&\n          rect.left >= 0 &&\n          rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n        ) {\n          // do the highlight paint\n          const left = rect.left - 0.5;\n          const top = rect.top - 0.5;\n          const width = rect.width + 1;\n          const height = rect.height + 1;\n          context.strokeRect(\n            left < 0 ? 0 : left,\n            top < 0 ? 0 : top,\n            width > window.innerWidth ? window.innerWidth : width,\n            height > window.innerHeight ? window.innerHeight : height\n          );\n        }\n      } catch {\n        void 0;\n      }\n    });\n\n    const allPendingSetRef = new Set(this.__pendingSetRef__);\n\n    this.__pendingSetRef__.clear();\n\n    allPendingSetRef.forEach((fiber) => {\n      if (include(fiber.state, STATE_TYPE.__unmount__)) return;\n      try {\n        const node = fiber.nativeNode as HTMLElement;\n        if (node.nodeType === Node.TEXT_NODE) {\n          this.range.selectNodeContents(node);\n        } else {\n          this.range.selectNode(node);\n        }\n        const rect = this.range.getBoundingClientRect();\n        if (\n          (rect.width || rect.height) &&\n          rect.top >= 0 &&\n          rect.left >= 0 &&\n          rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n        ) {\n          // do the highlight paint\n          const left = rect.left - 0.5;\n          const top = rect.top - 0.5;\n          const width = rect.width + 1;\n          const height = rect.height + 1;\n          context.strokeRect(\n            left < 0 ? 0 : left,\n            top < 0 ? 0 : top,\n            width > window.innerWidth ? window.innerWidth : width,\n            height > window.innerHeight ? window.innerHeight : height\n          );\n        }\n      } catch {\n        void 0;\n      }\n    });\n\n    context.strokeStyle = "rgba(230,150,40,0.8)";\n\n    const allPendingWarn = new Set(this.__pendingWarn__);\n\n    this.__pendingWarn__.clear();\n\n    allPendingWarn.forEach((fiber) => {\n      if (include(fiber.state, STATE_TYPE.__unmount__)) return;\n      try {\n        const node = fiber.nativeNode as HTMLElement;\n        if (node.nodeType === Node.TEXT_NODE) {\n          this.range.selectNodeContents(node);\n        } else {\n          this.range.selectNode(node);\n        }\n        const rect = this.range.getBoundingClientRect();\n        if (\n          (rect.width || rect.height) &&\n          rect.top >= 0 &&\n          rect.left >= 0 &&\n          rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n        ) {\n          // do the highlight paint\n          const left = rect.left - 0.5;\n          const top = rect.top - 0.5;\n          const width = rect.width + 1;\n          const height = rect.height + 1;\n          context.strokeRect(\n            left < 0 ? 0 : left,\n            top < 0 ? 0 : top,\n            width > window.innerWidth ? window.innerWidth : width,\n            height > window.innerHeight ? window.innerHeight : height\n          );\n        }\n      } catch {\n        void 0;\n      }\n    });\n\n    setTimeout(() => {\n      context.clearRect(0, 0, this.width, this.height);\n      this.running = false;\n      if (this.__pendingUpdate__.size || this.__pendingAppend__.size || this.__pendingSetRef__.size) {\n        this.running = true;\n        this.flashPending();\n      }\n    }, 100);\n  };\n}\n\nexport const highlightUpdateFiber = function (this: ClientDomDispatch, fiber: MyReactFiberNode) {\n  if (this.isAppMounted && !this.isHydrateRender && !this.isServerRender && (enableHighlight.current || window.__highlight__)) {\n    HighLight.getHighLightInstance().highLight(fiber, "update");\n  }\n};\n',
  },
  hunks: [
    "diff --git a/packages/myreact-dom/src/client/tools/highlight.ts b/packages/myreact-dom/src/client/tools/highlight.ts\nindex 13cba7db..002becdc 100644\n--- a/packages/myreact-dom/src/client/tools/highlight.ts\n+++ b/packages/myreact-dom/src/client/tools/highlight.ts\n@@ -112,31 +112,35 @@ export class HighLight {\n \n     allPendingUpdate.forEach((fiber) => {\n       if (include(fiber.state, STATE_TYPE.__unmount__)) return;\n-      const node = fiber.nativeNode as HTMLElement;\n-      if (node.nodeType === Node.TEXT_NODE) {\n-        this.range.selectNodeContents(node);\n-      } else {\n-        this.range.selectNode(node);\n-      }\n-      const rect = this.range.getBoundingClientRect();\n-      if (\n-        (rect.width || rect.height) &&\n-        rect.top >= 0 &&\n-        rect.left >= 0 &&\n-        rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n-        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n-      ) {\n-        // do the highlight paint\n-        const left = rect.left - 0.5;\n-        const top = rect.top - 0.5;\n-        const width = rect.width + 1;\n-        const height = rect.height + 1;\n-        context.strokeRect(\n-          left < 0 ? 0 : left,\n-          top < 0 ? 0 : top,\n-          width > window.innerWidth ? window.innerWidth : width,\n-          height > window.innerHeight ? window.innerHeight : height\n-        );\n+      try {\n+        const node = fiber.nativeNode as HTMLElement;\n+        if (node.nodeType === Node.TEXT_NODE) {\n+          this.range.selectNodeContents(node);\n+        } else {\n+          this.range.selectNode(node);\n+        }\n+        const rect = this.range.getBoundingClientRect();\n+        if (\n+          (rect.width || rect.height) &&\n+          rect.top >= 0 &&\n+          rect.left >= 0 &&\n+          rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n+          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n+        ) {\n+          // do the highlight paint\n+          const left = rect.left - 0.5;\n+          const top = rect.top - 0.5;\n+          const width = rect.width + 1;\n+          const height = rect.height + 1;\n+          context.strokeRect(\n+            left < 0 ? 0 : left,\n+            top < 0 ? 0 : top,\n+            width > window.innerWidth ? window.innerWidth : width,\n+            height > window.innerHeight ? window.innerHeight : height\n+          );\n+        }\n+      } catch {\n+        void 0;\n       }\n     });\n \n@@ -146,31 +150,35 @@ export class HighLight {\n \n     allPendingAppend.forEach((fiber) => {\n       if (include(fiber.state, STATE_TYPE.__unmount__)) return;\n-      const node = fiber.nativeNode as HTMLElement;\n-      if (node.nodeType === Node.TEXT_NODE) {\n-        this.range.selectNodeContents(node);\n-      } else {\n-        this.range.selectNode(node);\n-      }\n-      const rect = this.range.getBoundingClientRect();\n-      if (\n-        (rect.width || rect.height) &&\n-        rect.top >= 0 &&\n-        rect.left >= 0 &&\n-        rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n-        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n-      ) {\n-        // do the highlight paint\n-        const left = rect.left - 0.5;\n-        const top = rect.top - 0.5;\n-        const width = rect.width + 1;\n-        const height = rect.height + 1;\n-        context.strokeRect(\n-          left < 0 ? 0 : left,\n-          top < 0 ? 0 : top,\n-          width > window.innerWidth ? window.innerWidth : width,\n-          height > window.innerHeight ? window.innerHeight : height\n-        );\n+      try {\n+        const node = fiber.nativeNode as HTMLElement;\n+        if (node.nodeType === Node.TEXT_NODE) {\n+          this.range.selectNodeContents(node);\n+        } else {\n+          this.range.selectNode(node);\n+        }\n+        const rect = this.range.getBoundingClientRect();\n+        if (\n+          (rect.width || rect.height) &&\n+          rect.top >= 0 &&\n+          rect.left >= 0 &&\n+          rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n+          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n+        ) {\n+          // do the highlight paint\n+          const left = rect.left - 0.5;\n+          const top = rect.top - 0.5;\n+          const width = rect.width + 1;\n+          const height = rect.height + 1;\n+          context.strokeRect(\n+            left < 0 ? 0 : left,\n+            top < 0 ? 0 : top,\n+            width > window.innerWidth ? window.innerWidth : width,\n+            height > window.innerHeight ? window.innerHeight : height\n+          );\n+        }\n+      } catch {\n+        void 0;\n       }\n     });\n \n@@ -180,31 +188,35 @@ export class HighLight {\n \n     allPendingSetRef.forEach((fiber) => {\n       if (include(fiber.state, STATE_TYPE.__unmount__)) return;\n-      const node = fiber.nativeNode as HTMLElement;\n-      if (node.nodeType === Node.TEXT_NODE) {\n-        this.range.selectNodeContents(node);\n-      } else {\n-        this.range.selectNode(node);\n-      }\n-      const rect = this.range.getBoundingClientRect();\n-      if (\n-        (rect.width || rect.height) &&\n-        rect.top >= 0 &&\n-        rect.left >= 0 &&\n-        rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n-        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n-      ) {\n-        // do the highlight paint\n-        const left = rect.left - 0.5;\n-        const top = rect.top - 0.5;\n-        const width = rect.width + 1;\n-        const height = rect.height + 1;\n-        context.strokeRect(\n-          left < 0 ? 0 : left,\n-          top < 0 ? 0 : top,\n-          width > window.innerWidth ? window.innerWidth : width,\n-          height > window.innerHeight ? window.innerHeight : height\n-        );\n+      try {\n+        const node = fiber.nativeNode as HTMLElement;\n+        if (node.nodeType === Node.TEXT_NODE) {\n+          this.range.selectNodeContents(node);\n+        } else {\n+          this.range.selectNode(node);\n+        }\n+        const rect = this.range.getBoundingClientRect();\n+        if (\n+          (rect.width || rect.height) &&\n+          rect.top >= 0 &&\n+          rect.left >= 0 &&\n+          rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n+          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n+        ) {\n+          // do the highlight paint\n+          const left = rect.left - 0.5;\n+          const top = rect.top - 0.5;\n+          const width = rect.width + 1;\n+          const height = rect.height + 1;\n+          context.strokeRect(\n+            left < 0 ? 0 : left,\n+            top < 0 ? 0 : top,\n+            width > window.innerWidth ? window.innerWidth : width,\n+            height > window.innerHeight ? window.innerHeight : height\n+          );\n+        }\n+      } catch {\n+        void 0;\n       }\n     });\n \n@@ -216,31 +228,35 @@ export class HighLight {\n \n     allPendingWarn.forEach((fiber) => {\n       if (include(fiber.state, STATE_TYPE.__unmount__)) return;\n-      const node = fiber.nativeNode as HTMLElement;\n-      if (node.nodeType === Node.TEXT_NODE) {\n-        this.range.selectNodeContents(node);\n-      } else {\n-        this.range.selectNode(node);\n-      }\n-      const rect = this.range.getBoundingClientRect();\n-      if (\n-        (rect.width || rect.height) &&\n-        rect.top >= 0 &&\n-        rect.left >= 0 &&\n-        rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n-        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n-      ) {\n-        // do the highlight paint\n-        const left = rect.left - 0.5;\n-        const top = rect.top - 0.5;\n-        const width = rect.width + 1;\n-        const height = rect.height + 1;\n-        context.strokeRect(\n-          left < 0 ? 0 : left,\n-          top < 0 ? 0 : top,\n-          width > window.innerWidth ? window.innerWidth : width,\n-          height > window.innerHeight ? window.innerHeight : height\n-        );\n+      try {\n+        const node = fiber.nativeNode as HTMLElement;\n+        if (node.nodeType === Node.TEXT_NODE) {\n+          this.range.selectNodeContents(node);\n+        } else {\n+          this.range.selectNode(node);\n+        }\n+        const rect = this.range.getBoundingClientRect();\n+        if (\n+          (rect.width || rect.height) &&\n+          rect.top >= 0 &&\n+          rect.left >= 0 &&\n+          rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n+          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n+        ) {\n+          // do the highlight paint\n+          const left = rect.left - 0.5;\n+          const top = rect.top - 0.5;\n+          const width = rect.width + 1;\n+          const height = rect.height + 1;\n+          context.strokeRect(\n+            left < 0 ? 0 : left,\n+            top < 0 ? 0 : top,\n+            width > window.innerWidth ? window.innerWidth : width,\n+            height > window.innerHeight ? window.innerHeight : height\n+          );\n+        }\n+      } catch {\n+        void 0;\n       }\n     });\n",
  ],
};

export const d = {
  oldFile: {
    fileName: "src/views/test/result/singleResult/singleResultDetail/llm/components/result.vue",
    content:
      "<template>\n  <div>\n    <div>\n      <SimpleFilters ref=\"filterRef\" v-model=\"params\" :items=\"filters\" @conditions-search=\"handleSearch\" />\n    </div>\n    <BasicTable\n      ref=\"tableRef\"\n      manual-request\n      :request=\"queryCaseResult<LLMReportCase>\"\n      :params=\"finalParams\"\n      :columns=\"columns\"\n    >\n      <template #aiResults_header>\n        <span v-if=\"currentAnalyzeType === ResAnalysisTmpTypeEnum.LLM_Assert\"> 分析结果 </span>\n        <span v-else-if=\"currentAnalyzeType === ResAnalysisTmpTypeEnum.LLM_Mark_Avg\"> 平均分 </span>\n        <span v-else-if=\"currentAnalyzeType === ResAnalysisTmpTypeEnum.LLM_Mark_Sum\"> 总分 </span>\n        <span v-else>结果</span>\n      </template>\n      <template #aiResults=\"{ row }\">\n        <el-tag\n          v-if=\"currentAnalyzeType === ResAnalysisTmpTypeEnum.LLM_Assert && row.analyzeResult\"\n          :type=\"AnalyzeResultInfo[row.analyzeResult]?.type\"\n        >\n          {{ AnalyzeResultInfo[row.analyzeResult]?.label }}\n        </el-tag>\n        <span\n          v-else-if=\"\n            [ResAnalysisTmpTypeEnum.LLM_Mark_Avg, ResAnalysisTmpTypeEnum.LLM_Mark_Sum].includes(currentAnalyzeType)\n          \"\n        >\n          {{ row.score }}\n        </span>\n      </template>\n    </BasicTable>\n  </div>\n</template>\n<script lang=\"ts\" setup>\n  import { ResAnalysisTmpTypeEnum } from '@/apis/wqe-aggregation/orderTemplate';\n  import {\n    SingleResultType,\n    LLMReportCase,\n    QueryCaseResultRequest,\n    queryCaseResult,\n    AnalyzeResult,\n  } from '@/apis/wqe-case/result/singleResult';\n  import { createDrawer } from '@/components/basic/basicDrawer';\n  import { BasicTableInstance, Column } from '@/components/basic/basicTable';\n  import { FilterConditionDto } from '@/components/business/filters';\n  import SimpleFilters, { FiltersItem } from '@/components/business/simpleFilters';\n\n  import { SingleResultTestResultOptions } from '../../common';\n  import CaseDetail from '../caseDetail';\n\n  /**\n   * 分析结果\n   */\n  const AnalyzeResultInfo = {\n    [AnalyzeResult.Wait]: { label: '待分析', type: '' },\n    [AnalyzeResult.Pass]: { label: '通过', type: 'success' },\n    [AnalyzeResult.NotPass]: { label: '不通过', type: 'danger' },\n    [AnalyzeResult.Ignore]: { label: '忽略', type: 'info' },\n  } as const;\n\n  /**\n   * 页面配置\n   */\n  const filters: FiltersItem[] = [\n    { label: '流程结果', key: 'statusDesc', type: 'select', props: { options: SingleResultTestResultOptions } },\n    { label: '用例编号', key: 'useCaseCode', type: 'input' },\n    { label: '测试点', key: 'testPointName', type: 'input' },\n    { label: '前提条件', key: 'preCondition', type: 'input' },\n    { label: 'prompt', key: 'prompt', type: 'input' },\n    { label: '输入', key: 'input', type: 'input' },\n    { label: '预期结果', key: 'expectedResult', type: 'input' },\n  ];\n  const router = useRouter();\n  const handleCheckDetail = (row: { id: string }) => {\n    router.push({ query: { ...router.currentRoute.value.query, caseResultId: row.id } });\n    createDrawer({\n      title: '',\n      content: CaseDetail,\n      width: '100vw',\n      customHeader: true,\n      drawerProps: {\n        showClose: false,\n        onClose() {\n          router.replace({ query: { ...router.currentRoute.value.query, caseResultId: '' } });\n          return true;\n        },\n      },\n    });\n  };\n  const columns: Column[] = [\n    { prop: 'useCaseCode', label: '用例编号', width: '220px' },\n    { prop: 'testPointName', label: '测试点', width: '220px' },\n    { prop: 'preCondition', label: '前提条件', width: '220px' },\n    { prop: 'prompt', label: 'prompt', width: '220px' },\n    { prop: 'input', label: '输入', width: '220px' },\n    { prop: 'expectedResult', label: '预期结果', width: '220px' },\n    { prop: 'statusDesc', label: '流程结果', width: '220px' },\n    { prop: 'aiResults', label: '结果', width: '200px', slot: true, headerSlot: true },\n    { prop: 'escape', label: '返回耗时', width: '220px' },\n    {\n      prop: 'actions',\n      label: '操作',\n      fixed: 'right',\n      buttons: [{ label: '详情', handler: handleCheckDetail }],\n    },\n  ];\n  /**\n   * 搜索\n   */\n  const route = useRoute();\n  const currentJobId = route.query.jobId as string;\n  const currentType = route.query.toolType as string as SingleResultType;\n  const tableRef = ref<BasicTableInstance>();\n  const props = defineProps<{ runSeq: number; currentAnalyzeType?: ResAnalysisTmpTypeEnum }>();\n  const params = ref<Record<string, any>>({});\n  const finalParams = ref<QueryCaseResultRequest>({\n    conditions: [],\n    toolType: currentType,\n    jobId: currentJobId,\n    runSeq: props.runSeq,\n  });\n  watch(\n    () => props.runSeq,\n    (val) => (finalParams.value.runSeq = val)\n  );\n  const handleSearch = (conditions: FilterConditionDto[][]) => {\n    finalParams.value.conditions = conditions;\n    tableRef.value?.reset();\n  };\n  const filterRef = ref();\n  const setStatus = (statusDesc: string) => {\n    params.value.statusDesc = statusDesc;\n    filterRef.value?.search();\n  };\n\n  defineExpose({ reset: () => tableRef.value?.reset(), setStatus });\n</script>\n<style scoped lang=\"scss\"></style>\n",
  },
  newFile: {
    fileName: "src/views/test/result/singleResult/singleResultDetail/llm/components/result.vue",
    // content:
    // "<template>\n  <div>\n    <div>\n      <SimpleFilters ref=\"filterRef\" v-model=\"params\" :items=\"filters\" @conditions-search=\"handleSearch\" />\n    </div>\n    <BasicTable\n      ref=\"tableRef\"\n      manual-request\n      selection\n      tool-bar\n      v-model:selection-rows=\"selectionRows\"\n      row-key=\"id\"\n      :request=\"queryCaseResult<LLMReportCase>\"\n      :params=\"finalParams\"\n      :columns=\"columns\"\n    >\n      <template #headers>\n        <el-button size=\"small\" :disabled=\"!selectionRows.length\" @click=\"handleExport\" :loading=\"exporting\">\n          导出数据\n        </el-button>\n      </template>\n      <template #aiResults_header>\n        <span v-if=\"currentAnalyzeType === ResAnalysisTmpTypeEnum.LLM_Assert\"> 分析结果 </span>\n        <span v-else-if=\"currentAnalyzeType === ResAnalysisTmpTypeEnum.LLM_Mark_Avg\"> 平均分 </span>\n        <span v-else-if=\"currentAnalyzeType === ResAnalysisTmpTypeEnum.LLM_Mark_Sum\"> 总分 </span>\n        <span v-else>结果</span>\n      </template>\n      <template #aiResults=\"{ row }\">\n        <el-tag\n          v-if=\"currentAnalyzeType === ResAnalysisTmpTypeEnum.LLM_Assert && row.analyzeResult\"\n          :type=\"AnalyzeResultInfo[row.analyzeResult]?.type\"\n        >\n          {{ AnalyzeResultInfo[row.analyzeResult]?.label }}\n        </el-tag>\n        <span\n          v-else-if=\"\n            [ResAnalysisTmpTypeEnum.LLM_Mark_Avg, ResAnalysisTmpTypeEnum.LLM_Mark_Sum].includes(currentAnalyzeType)\n          \"\n        >\n          {{ row.score }}\n        </span>\n      </template>\n    </BasicTable>\n  </div>\n</template>\n<script lang=\"ts\" setup>\n  import { ResAnalysisTmpTypeEnum } from '@/apis/wqe-aggregation/orderTemplate';\n  import {\n    SingleResultType,\n    LLMReportCase,\n    QueryCaseResultRequest,\n    queryCaseResult,\n    AnalyzeResult,\n  } from '@/apis/wqe-case/result/singleResult';\n  import { exportLLMSingleResultCases } from '@/apis/wqe-testcase/result';\n  import { createDrawer } from '@/components/basic/basicDrawer';\n  import { BasicTableInstance, Column } from '@/components/basic/basicTable';\n  import { FilterConditionDto } from '@/components/business/filters';\n  import SimpleFilters, { FiltersItem } from '@/components/business/simpleFilters';\n\n  import { SingleResultTestResultOptions } from '../../common';\n  import CaseDetail from '../caseDetail';\n\n  /**\n   * 分析结果\n   */\n  const AnalyzeResultInfo = {\n    [AnalyzeResult.Wait]: { label: '待分析', type: '' },\n    [AnalyzeResult.Pass]: { label: '通过', type: 'success' },\n    [AnalyzeResult.NotPass]: { label: '不通过', type: 'danger' },\n    [AnalyzeResult.Ignore]: { label: '忽略', type: 'info' },\n  } as const;\n\n  /**\n   * 页面配置\n   */\n  const filters: FiltersItem[] = [\n    { label: '流程结果', key: 'statusDesc', type: 'select', props: { options: SingleResultTestResultOptions } },\n    { label: '用例编号', key: 'useCaseCode', type: 'input' },\n    { label: '测试点', key: 'testPointName', type: 'input' },\n    { label: '前提条件', key: 'preCondition', type: 'input' },\n    { label: 'prompt', key: 'prompt', type: 'input' },\n    { label: '输入', key: 'input', type: 'input' },\n    { label: '预期结果', key: 'expectedResult', type: 'input' },\n  ];\n  const router = useRouter();\n  const handleCheckDetail = (row: { id: string }) => {\n    router.push({ query: { ...router.currentRoute.value.query, caseResultId: row.id } });\n    createDrawer({\n      title: '',\n      content: CaseDetail,\n      width: '100vw',\n      customHeader: true,\n      drawerProps: {\n        showClose: false,\n        onClose() {\n          router.replace({ query: { ...router.currentRoute.value.query, caseResultId: '' } });\n          return true;\n        },\n      },\n    });\n  };\n  const columns: Column[] = [\n    { prop: 'useCaseCode', label: '用例编号', width: '220px' },\n    { prop: 'testPointName', label: '测试点', width: '220px' },\n    { prop: 'preCondition', label: '前提条件', width: '220px' },\n    { prop: 'prompt', label: 'prompt', width: '220px' },\n    { prop: 'input', label: '输入', width: '220px' },\n    { prop: 'expectedResult', label: '预期结果', width: '220px' },\n    { prop: 'statusDesc', label: '流程结果', width: '220px' },\n    { prop: 'aiResults', label: '结果', width: '200px', slot: true, headerSlot: true },\n    { prop: 'escape', label: '返回耗时', width: '220px' },\n    {\n      prop: 'actions',\n      label: '操作',\n      fixed: 'right',\n      buttons: [{ label: '详情', handler: handleCheckDetail }],\n    },\n  ];\n  /**\n   * 搜索\n   */\n  const route = useRoute();\n  const currentJobId = route.query.jobId as string;\n  const currentType = route.query.toolType as string as SingleResultType;\n  const tableRef = ref<BasicTableInstance>();\n  const props = defineProps<{ runSeq: number; currentAnalyzeType?: ResAnalysisTmpTypeEnum }>();\n  const params = ref<Record<string, any>>({});\n  const finalParams = ref<QueryCaseResultRequest>({\n    conditions: [],\n    toolType: currentType,\n    jobId: currentJobId,\n    runSeq: props.runSeq,\n  });\n  watch(\n    () => props.runSeq,\n    (val) => (finalParams.value.runSeq = val)\n  );\n  const handleSearch = (conditions: FilterConditionDto[][]) => {\n    finalParams.value.conditions = conditions;\n    tableRef.value?.reset();\n  };\n  const filterRef = ref();\n  const setStatus = (statusDesc: string) => {\n    params.value.statusDesc = statusDesc;\n    filterRef.value?.search();\n  };\n\n  defineExpose({ reset: () => tableRef.value?.reset(), setStatus });\n\n  /**\n   * 导出数据\n   */\n  const exporting = ref(false);\n  const selectionRows = ref<LLMReportCase[]>([]);\n  const handleExport = () => {\n    exporting.value = true;\n    exportLLMSingleResultCases({\n      caseResultIds: selectionRows.value.map((item) => item.id),\n      toolType: currentType,\n      jobId: currentJobId,\n      runSeq: props.runSeq,\n    }).finally(() => {\n      exporting.value = false;\n    });\n  };\n</script>\n<style scoped lang=\"scss\"></style>\n",
  },
  hunks: [
    '--- src/views/test/result/singleResult/singleResultDetail/llm/components/result.vue\n+++ src/views/test/result/singleResult/singleResultDetail/llm/components/result.vue\n@@ -6,10 +6,19 @@\n     <BasicTable\n       ref="tableRef"\n       manual-request\n+      selection\n+      tool-bar\n+      v-model:selection-rows="selectionRows"\n+      row-key="id"\n       :request="queryCaseResult<LLMReportCase>"\n       :params="finalParams"\n       :columns="columns"\n     >\n+      <template #headers>\n+        <el-button size="small" :disabled="!selectionRows.length" @click="handleExport" :loading="exporting">\n+          导出数据\n+        </el-button>\n+      </template>\n       <template #aiResults_header>\n         <span v-if="currentAnalyzeType === ResAnalysisTmpTypeEnum.LLM_Assert"> 分析结果 </span>\n         <span v-else-if="currentAnalyzeType === ResAnalysisTmpTypeEnum.LLM_Mark_Avg"> 平均分 </span>\n',
    "--- src/views/test/result/singleResult/singleResultDetail/llm/components/result.vue\n+++ src/views/test/result/singleResult/singleResultDetail/llm/components/result.vue\n@@ -43,6 +52,7 @@\n     queryCaseResult,\n     AnalyzeResult,\n   } from '@/apis/wqe-case/result/singleResult';\n+  import { exportLLMSingleResultCases } from '@/apis/wqe-testcase/result';\n   import { createDrawer } from '@/components/basic/basicDrawer';\n   import { BasicTableInstance, Column } from '@/components/basic/basicTable';\n   import { FilterConditionDto } from '@/components/business/filters';\n",
    '--- src/views/test/result/singleResult/singleResultDetail/llm/components/result.vue\n+++ src/views/test/result/singleResult/singleResultDetail/llm/components/result.vue\n@@ -137,5 +147,22 @@\n   };\n \n   defineExpose({ reset: () => tableRef.value?.reset(), setStatus });\n+\n+  /**\n+   * 导出数据\n+   */\n+  const exporting = ref(false);\n+  const selectionRows = ref<LLMReportCase[]>([]);\n+  const handleExport = () => {\n+    exporting.value = true;\n+    exportLLMSingleResultCases({\n+      caseResultIds: selectionRows.value.map((item) => item.id),\n+      toolType: currentType,\n+      jobId: currentJobId,\n+      runSeq: props.runSeq,\n+    }).finally(() => {\n+      exporting.value = false;\n+    });\n+  };\n </script>\n <style scoped lang="scss"></style>\n',
  ],
};

export const e = {
  oldFile: {
    fileName: "src/apis/modules/catalog/module.ts",
    content:
      "export type CataLogTreeItem = {\n  id: number;\n  depoId: number;\n  key: string;\n  level: number;\n  title: string;\n  value: string;\n  isLeaf: boolean;\n  parentId: number;\n  inherited: boolean;\n  createTime: string;\n  updateTime: string;\n  reviewers: string;\n  // TODO\n  state: number;\n  children: null | CataLogTreeItem[];\n};\n\nexport type ApplyCataLogItem = {\n  applyId: number;\n  catalogId: number;\n  createTime: string;\n  updateTime: string;\n  // TODO\n  deleted: number;\n\n  id: number;\n  remark: string | null;\n  // TODO\n  reviewState: number;\n\n  reviewers: string;\n  version: number;\n}\n",
  },
  newFile: {
    fileName: null,
    content: null,
  },
  hunks: [
    "--- src/apis/modules/catalog/module.ts\n+++ /dev/null\n@@ -1,34 +0,0 @@\n-export type CataLogTreeItem = {\n-  id: number;\n-  depoId: number;\n-  key: string;\n-  level: number;\n-  title: string;\n-  value: string;\n-  isLeaf: boolean;\n-  parentId: number;\n-  inherited: boolean;\n-  createTime: string;\n-  updateTime: string;\n-  reviewers: string;\n-  // TODO\n-  state: number;\n-  children: null | CataLogTreeItem[];\n-};\n-\n-export type ApplyCataLogItem = {\n-  applyId: number;\n-  catalogId: number;\n-  createTime: string;\n-  updateTime: string;\n-  // TODO\n-  deleted: number;\n-\n-  id: number;\n-  remark: string | null;\n-  // TODO\n-  reviewState: number;\n-\n-  reviewers: string;\n-  version: number;\n-}\n",
  ],
};

export const f = {
  oldFile: {
    fileName: "src/apis/modules/catalog/index.ts",
    content:
      "import request from '@/apis/fetcher';\nimport type { BasicResponse } from '@/apis/fetcher/type';\nimport type { ApplyCataLogItem, CataLogTreeItem } from './module';\n\nexport const getCataLogTree = (repoId: number) => {\n  return request<BasicResponse<CataLogTreeItem[]>>(`/api/catalogue/getCatalogTree/${repoId}`, {\n    method: 'GET',\n    description: '根据仓库ID获取目录树结构',\n  });\n};\n\nexport const getApplyCataLogById = (applyId: number) => {\n  return request<BasicResponse<ApplyCataLogItem[]>>(`/api/applyCatalog/getCatalogById/${applyId}`, {\n    method: 'GET',\n    description: '根据申请ID获取目录结构',\n  });\n};\n\nexport const getMrApplyCataLogById = (applyId: number) => {\n  return request<BasicResponse<ApplyCataLogItem[]>>(`/api/mrApplyCatalog/getCatalogById/${applyId}`, {\n    method: 'GET',\n    description: '根据ID获取MR目录结构',\n  });\n};\n",
  },
  newFile: {
    fileName: null,
    content: null,
  },
  hunks: [
    "--- src/apis/modules/catalog/index.ts\n+++ /dev/null\n@@ -1,24 +0,0 @@\n-import request from '@/apis/fetcher';\n-import type { BasicResponse } from '@/apis/fetcher/type';\n-import type { ApplyCataLogItem, CataLogTreeItem } from './module';\n-\n-export const getCataLogTree = (repoId: number) => {\n-  return request<BasicResponse<CataLogTreeItem[]>>(`/api/catalogue/getCatalogTree/${repoId}`, {\n-    method: 'GET',\n-    description: '根据仓库ID获取目录树结构',\n-  });\n-};\n-\n-export const getApplyCataLogById = (applyId: number) => {\n-  return request<BasicResponse<ApplyCataLogItem[]>>(`/api/applyCatalog/getCatalogById/${applyId}`, {\n-    method: 'GET',\n-    description: '根据申请ID获取目录结构',\n-  });\n-};\n-\n-export const getMrApplyCataLogById = (applyId: number) => {\n-  return request<BasicResponse<ApplyCataLogItem[]>>(`/api/mrApplyCatalog/getCatalogById/${applyId}`, {\n-    method: 'GET',\n-    description: '根据ID获取MR目录结构',\n-  });\n-};\n",
  ],
};

export const g = {
  oldFile: {
    fileName: "222.cpp",
    content: "",
  },
  newFile: {
    fileName: "222.cpp",
    content:
      "123\n222.cpp\nqAUTHORS\nCONTRIBUTING.rst\nGruntfile.js\nINSTALL\nLICENSE\nLICENSE.python\nMANIFEST.in\nREADME.md\nbadblocks.c\nbdev.c\nbfq-cgroup.c\nbfq-iosched.c\nbfq-iosched.h\nbfq-wf2q.c\nbio-integrity.c\nbio.c\nblk-cgroup-rwstat.c\nblk-cgroup-rwstat.h\nblk-cgroup-rwstat的副本.h\nblk-cgroup.c\nblk-cgroup的副本.c\nblk-cgroup的副本2.c\nblk-core.c\nblk-crypto-fallback.c\nblk-crypto-internal.h\nblk-crypto-profile.c\nblk-crypto.c\nblk-crypto的副本.c\nblk-flush.c\nblk-flush的副本.c\nblk-ia-ranges.c\ndjango\ndocs\nextras\njs_tests\npackage.json\npyproject.toml\nscripts\nsetup.cfg\nsetup.py\ntests\ntox.ini\n",
  },
  hunks: [
    "--- 222.cpp\n+++ 222.cpp\n@@ -1,6 +1,6 @@\n 123\n 222.cpp\n-AUTHORS\n+qAUTHORS\n CONTRIBUTING.rst\n Gruntfile.js\n INSTALL\n",
  ],
};

export const h = {
  oldFile: {
    fileName: "CYJ.cpp",
    content: "",
  },
  newFile: {
    fileName: "CYJ.cpp",
    content: "1\n1\n1\n1\n1\n1\n1\n1\n1\n",
  },
  hunks: ["--- CYJ.cpp\n+++ CYJ.cpp\n@@ -5,3 +5,5 @@\n 1\n 1\n 1\n+1\n+1\n"],
};

export const i = {
  oldFile: {
    fileName: "src/components/DiffView/AsideCompose.tsx",
    content:
      "import { useComposeDiffAside } from '@/hooks/useComposeDiffAside';\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons';\nimport { Button, Tooltip } from 'antd';\n\nexport const AsideCompose = () => {\n  const { compose, toggle } = useComposeDiffAside();\n\n  return (\n    <Tooltip\n      title={`点击${compose ? '展开' : '折叠'}目录栏`}\n      placement=\"right\"\n      key={compose ? 'left' : 'right'}\n      getTooltipContainer={() => document.querySelector('[data-diff-new-ui-compose]') || document.body}\n    >\n      <Button\n        onClick={toggle}\n        style={{ fontSize: '14px', position: 'absolute', display: compose ? 'block' : 'none', marginTop: '2px' }}\n        size=\"small\"\n      >\n        {compose ? <RightOutlined color=\"inherit\" /> : <LeftOutlined color=\"inherit\" />}\n      </Button>\n    </Tooltip>\n  );\n};\n",
  },
  newFile: {
    fileName: "src/components/DiffView/AsideCompose.tsx",
    content:
      "import { useComposeDiffAside } from '@/hooks/useComposeDiffAside';\nimport { Button, Tooltip } from 'antd';\nimport { MenuFoldOutlined, MenuUnfoldOutlined } from '@ant-design/icons';\n\nexport const AsideCompose = () => {\n  const { compose, toggle } = useComposeDiffAside();\n\n  return (\n    <Tooltip\n      title={`点击${compose ? '展开' : '折叠'}目录栏`}\n      placement=\"right\"\n      key={compose ? 'left' : 'right'}\n      getTooltipContainer={() => document.querySelector('[data-diff-new-ui-compose]') || document.body}\n    >\n      <Button\n        style={{ display: 'inline-flex', alignItems: 'center', borderRadius: '2px', paddingLeft: '10px', paddingRight: '10px' }}\n        onClick={toggle}\n      >\n        {compose ? (\n          <MenuUnfoldOutlined color=\"currentColor\" style={{ transform: 'scale(1.35)', display: 'flex', alignItems: 'center' }} />\n        ) : (\n          <MenuFoldOutlined color=\"currentColor\" style={{ transform: 'scale(1.35)', display: 'flex', alignItems: 'center' }} />\n        )}\n      </Button>\n    </Tooltip>\n  );\n};\n",
  },
  hunks: [
    "--- src/components/DiffView/AsideCompose.tsx\n+++ src/components/DiffView/AsideCompose.tsx\n@@ -1,6 +1,6 @@\n import { useComposeDiffAside } from '@/hooks/useComposeDiffAside';\n-import { LeftOutlined, RightOutlined } from '@ant-design/icons';\n import { Button, Tooltip } from 'antd';\n+import { MenuFoldOutlined, MenuUnfoldOutlined } from '@ant-design/icons';\n \n export const AsideCompose = () => {\n   const { compose, toggle } = useComposeDiffAside();\n",
    "--- src/components/DiffView/AsideCompose.tsx\n+++ src/components/DiffView/AsideCompose.tsx\n@@ -13,11 +13,14 @@ export const AsideCompose = () => {\n       getTooltipContainer={() => document.querySelector('[data-diff-new-ui-compose]') || document.body}\n     >\n       <Button\n+        style={{ display: 'inline-flex', alignItems: 'center', borderRadius: '2px', paddingLeft: '10px', paddingRight: '10px' }}\n         onClick={toggle}\n-        style={{ fontSize: '14px', position: 'absolute', display: compose ? 'block' : 'none', marginTop: '2px' }}\n-        size=\"small\"\n       >\n-        {compose ? <RightOutlined color=\"inherit\" /> : <LeftOutlined color=\"inherit\" />}\n+        {compose ? (\n+          <MenuUnfoldOutlined color=\"currentColor\" style={{ transform: 'scale(1.35)', display: 'flex', alignItems: 'center' }} />\n+        ) : (\n+          <MenuFoldOutlined color=\"currentColor\" style={{ transform: 'scale(1.35)', display: 'flex', alignItems: 'center' }} />\n+        )}\n       </Button>\n     </Tooltip>\n   );\n",
  ],
};

export const j = {
  oldFile: {
    fileName: "src/pages/gitManage/repositoryManage/project/components/projectDetail.tsx",
    content:
      'import React, { useState, useRef, useEffect } from \'react\';\nimport { Button, Form, Input, Select, message, Transfer, Space, Card, Modal, Empty, Drawer, Tooltip } from \'antd\';\nimport ProDescriptions from \'@ant-design/pro-descriptions\';\nimport type { ProDescriptionsActionType } from \'@ant-design/pro-descriptions\';\nimport {\n    accessLevelStatusMap,\n    accessLevelValueEnum,\n    checkTypeStatusMap,\n    commonOpenStateValueEnum,\n    commonStateValueEnum,\n    groupVisibilityLevelValueEnum,\n    labelTypeStatusMap,\n    purposeTypeValueEnum\n} from \'@/utils/DataEnum\';\nimport {\n    checkMemberPermission,\n    getGmOpenApiList,\n    getProjectDetail,\n    getProjectInheritedMembers,\n    getProjectMembers,\n    updateProjectDetail\n} from \'../service\';\nimport { RequestUtils } from \'@/utils/request\';\nimport type {\n    projectDetailDataType,\n    repositoryBasicDataType,\n    updateDetailParamType\n} from \'../data\';\nimport Label from \'@/components/KLabel\';\nimport {\n    getLabelListByTypeId,\n    getUserListInGM,\n    getRepositoryListInGM,\n    getUserInfo,\n    checkUserAdminRole\n} from \'@/utils/commonRequest\';\nimport styles from \'./index.less\';\nimport { MinusCircleOutlined, QuestionCircleOutlined } from \'@ant-design/icons\';\nimport type { labelDataType, memberDataType, openApiDataType } from \'../../data\';\nimport type { transferDataSourceDataType } from \'../../data\';\nimport { projectDetailUrl } from \'@/utils/commonUrl\';\nimport HistoryDrawer from \'./historyDrawer\';\nimport { Link } from \'umi\';\nimport { getNotification } from \'../../components/conflictNotifaction\';\nimport type { commonPropsDataType, dataPropsDataType, formItemPropsDataType } from \'../../group/data\';\nimport { ReactComponent as EmptyData } from \'@/assets/emptyDataSmall.svg\';\nimport {\n    accessLevelOptionForRepository,\n    checkIrregularMemberHandler,\n    checkVisibilityAndPurposeTypeHandler,\n    excludeSpacialMember,\n    showIrregularMemberListModal,\n    showUserInfo,\n    validateMember,\n    getAddAndDeleteMembers\n} from \'../../common\';\nimport { gsModalSize } from \'@/utils/commonVariable\';\nimport DrawerCollapseBtn from \'@/components/DetailDrawerCollapse\';\nimport { cloneDeep, isEqual } from \'lodash\';\nimport { FrontendError } from \'@/constants/error\';\nimport { gitManageFieldTips } from \'@/pages/gitManage/const/tips\';\nimport { useGroupApprover } from \'../../hooks/useGroupApprover\';\nimport type { ICollection } from \'@/apis/modules/collection/module\';\nimport { getCollectionList } from \'@/apis/modules/collection\';\nimport { hasPermission } from \'@/utils/authority\';\n\nconst initUpdateParam = {\n    id: 0, userId: 0, version: 0, branchControl: 0, visibilityLevel: 0, state: 0, codeReviewState: 0, groupVisibilityLevel: 1,\n    description: "", modifyDescription: "", addLabels: [], deleteLabels: [],\n    addDependencyRepositories: [], deleteDependencyRepositories: [], addApprovers: [],\n    deleteApprovers: [], addMembers: [], deleteMembers: [], addSlaveRepositories: [], deleteSlaveRepositories: [],\n    type: 0\n}\n\ninterface projectDetailProps {\n    detailDrawerVisible: boolean;\n    detailId: number;\n    closeDetailDrawer: any;\n}\n\nconst ProjectDetail: React.FC<projectDetailProps> = (props: any) => {\n    const { detailDrawerVisible, detailId, closeDetailDrawer } = props;\n    // antd相关\n    const [form] = Form.useForm();\n    const FormItem = Form.Item;\n    const { Option } = Select;\n    const { TextArea } = Input;\n    const actionRef = useRef<ProDescriptionsActionType>();\n\n    // 常用state\n    const [updateLoading, setUpdateLoading] = useState<boolean>(false);\n    const [submitLoading, setSubmitLoading] = useState<boolean>(false);\n    const [dataLoading, setDataLoading] = useState<boolean>(false);\n    const [updateMode, setUpdateMode] = useState<boolean>(false);\n    const [reload, setReload] = useState<boolean>(true);\n    const [projectDetailInfo, setProjectDetailInfo] = useState<projectDetailDataType>({\n        id: 0, applyUsername: "", applyUserNickname: "", approvers: [], branchControl: 0, dependencyRepositories: [],\n        description: "", groupId: 0, groupName: "", labels: [], members: [], name: "", projectId: 0, repositoryUrl: "",\n        repositoryHttpUrl: "", slaveRepositories: [], state: 0, type: 0, version: 0, visibilityLevel: 0, codeReviewState: 0,\n        groupVisibilityLevel: 1\n    });\n    const [openApiList, setOpenApiList] = useState<openApiDataType[]>([]);\n    const [collectionList, setCollectionList] = useState<ICollection[]>([]);\n    const [repositoryList, setRepositoryList] = useState<repositoryBasicDataType[]>([]);\n    const [slaveRepositoriesList, setSlaveRepositoriesList] = useState<any[]>([]);\n    const [dependencyRepositoriesList, setDependencyRepositoriesList] = useState<any[]>([]);\n    const [labelList, setLabelList] = useState<labelDataType[]>([]);\n    const [labelOptionList, setLabelOptionList] = useState<labelDataType[]>([]);\n    // 所有用户列表数据源\n    const [userList, setUserList] = useState<transferDataSourceDataType[]>([]);\n    const [userOptionForSelect, setUserOptionForSelect] = useState<any[]>([]);\n    // 负责人穿梭框的targetKeys,为用户id数组,但id格式需要转string类型\n    const [targetKeysForTransfer, setTargetKeysForTransfer] = useState<string[]>([]);\n    // 用于负责人和成员穿梭框的targetKeys回滚\n    const [targetKeysForTransferRollback, setTargetKeysForTransferRollback] = useState<string[]>([]);\n    // 更新接口需要的参数\n    const [updateProjectDetailParam, setUpdateProjectDetailParam] = useState<updateDetailParamType>({\n        id: 0, userId: 0, version: 0, branchControl: 0, visibilityLevel: 0, state: 0,\n        description: "", modifyDescription: "", addLabels: [], deleteLabels: [], codeReviewState: 0,\n        addDependencyRepositories: [], deleteDependencyRepositories: [], addApprovers: [],\n        deleteApprovers: [], addMembers: [], deleteMembers: [], addSlaveRepositories: [], deleteSlaveRepositories: [],\n        type: 0\n    });\n    const [isApprover, setIsApprover] = useState<boolean>(false);\n    const [confirmVisible, setConfirmVisible] = useState<boolean>(false);\n    const [historyVisible, setHistoryVisible] = useState<boolean>(false);\n    // 判断当前是否已经请求过成员列表\n    const [requestMembersStatus, setRequestMembersStatus] = useState<boolean>(false);\n    // 继承来的成员列表\n    const [inheritedMembers, setInheritedMembers] = useState<memberDataType[]>([]);\n    // 仓库id和代码检视开关的映射类,即{id: state, ...}\n    const [repoIdAndCodeReviewStateMap, setRepoIdAndCodeReviewStateMap] = useState<Record<number, number>>({});\n    // 当前选择的代码检视开关值,用于提交修改时判断子仓相对路径是否需要填写\n    const [codeReviewStateValue, setCodeReviewStateValue] = useState<number>(0);\n    // 子仓id和其相对路径的映射\n    const [slaveRepoId2Prefix, setSlaveRepoId2Prefix] = useState<Record<number, string | null>>({});\n    // 用户信息\n    const user = getUserInfo();\n    const currentUserId = user.id;\n    const isAdmin: boolean = checkUserAdminRole(user);\n    const { updateGroupApproverState } = useGroupApprover();\n\n    const visibilityLevelOptionForSelect: any[] = [\n        <Option\n            value={1}\n            key="Private"\n            disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 1 : false}\n        >\n            Private\n        </Option>,\n        <Option\n            value={2}\n            key="Internal"\n            disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 2 : false}\n        >\n            Internal\n        </Option>,\n        <Option\n            value={3}\n            key="Public"\n            disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 3 : false}\n        >\n            Public\n        </Option>\n    ];\n\n    const stateOptionForSelect: any[] = [\n        <Option value={0} key="disable">禁用</Option>,\n        <Option value={1} key="enable">启用</Option>,\n    ];\n\n    const switchOptionForSelect: any[] = [\n        <Option value={0} key="close">关闭</Option>,\n        <Option value={1} key="open">开启</Option>,\n    ];\n\n    // ----------通用方法----------\n\n    // 处理取消编辑的必要回滚,主要针对非form表单可控的组件,如穿梭框\n    const rollbackData = () => {\n        // 初始化掉updateParam,防止数据错乱\n        setUpdateProjectDetailParam(cloneDeep(initUpdateParam));\n        setTargetKeysForTransfer(targetKeysForTransferRollback);\n    }\n\n    /**\n     * 获取项目继承自群组的成员\n     * @param projectId 仓库id\n     * @returns\n     */\n    const getProjectInheritedMembersHandler = async (projectId: number) => {\n        const response = await RequestUtils(getProjectInheritedMembers, projectId, { msg: "获取从群组继承的成员" });\n        if (response.data) {\n            const inheritedMemberIdList: number[] = [];\n            response.data.forEach((item: memberDataType) => inheritedMemberIdList.push(item.id));\n            const excludeCreator: memberDataType[] = excludeSpacialMember(response.data);\n            setInheritedMembers(excludeCreator);\n            return excludeCreator;\n        }\n        return [];\n    }\n\n    /**\n     * 获取群组成员\n     * @param projectId 项目id\n     */\n    const getProjectMembersHandler = async (projectId: number) => {\n        try {\n            setDataLoading(true);\n            const response = await RequestUtils(getProjectMembers, projectId, { msg: "获取项目成员" });\n            await getProjectInheritedMembersHandler(projectId);\n            if (response.success) {\n                // 需要从member数组里面排除掉创建人,不进行显示\n                const excludeProjectCreater: memberDataType[] = excludeSpacialMember(response.data);\n                // 将已有的用户id记录起来,用于校验用户重复选择\n                const memberIds: number[] = [];\n                excludeProjectCreater.forEach(item => { return memberIds.push(item.id) });\n                setProjectDetailInfo({ ...projectDetailInfo, members: excludeProjectCreater });\n                setRequestMembersStatus(true);\n            }\n        } catch (e) {\n            console.log(e);\n        } finally {\n            setDataLoading(false);\n        }\n    }\n\n    /**\n     * 判断当前按钮点击的状态,若是编辑状态时点击,说明要回滚数据\n     * @param updateStatus 编辑状态的标志位\n     */\n    const updateButtonClickHandler = async (updateStatus: boolean) => {\n        setUpdateLoading(true);\n        if (updateStatus) {\n            // 若取消编辑,那么重置form表单的内容\n            rollbackData();\n            form.resetFields();\n        }\n        if (!requestMembersStatus) {\n            await getProjectMembersHandler(detailId);\n        }\n        const { version, id } = projectDetailInfo;\n        // 将必填的字段传入update接口参数state\n        setUpdateProjectDetailParam({ ...updateProjectDetailParam, version, id, userId: currentUserId });\n        setUpdateMode(!updateMode)\n        setUpdateLoading(false);\n    }\n\n    /**\n     * 根据穿梭框的targetKey数组或FormList的用户id反查用户列表,得到用户对象\n     * @param item 用户id数组或用户id\n     * @returns\n     */\n    const getItemFromUserList = (param: string[] | number) => {\n        // 如果是ids,说明是穿梭框的请求\n        if (Array.isArray(param)) {\n            if (param && param.length > 0) {\n                const filterList = userList.filter(item => param.includes(item.key));\n                const userInfoList: memberDataType[] = [];\n                filterList.map(item => {\n                    return userInfoList.push({\n                        id: +item.key,\n                        nickname: item.title,\n                        username: item.description\n                    })\n                })\n                return userInfoList;\n            }\n            return [];\n        }\n        // 如果是单id,说明是成员FormList的请求,只返回一个\n        const userInfo = userList.find(item => item.key === param.toString());\n        if (userInfo) {\n            // 将transferDataType转化为memberDataType\n            return { id: +userInfo.key, username: userInfo.description, nickname: userInfo.title };\n        }\n        return {};\n    }\n\n    const getItemFromLabelList = (param: number) => {\n        const labelInfo = labelList.find(item => item.id === param);\n        if (labelInfo) {\n            return labelInfo;\n        }\n        return undefined;\n    }\n\n    /**\n     * 从仓库列表获取对应的仓库信息\n     * @param param\n     * @returns\n     */\n    const getItemFromRepositoryList = (param: number) => {\n        const repositoryInfo = repositoryList.find(item => item.id === param);\n        if (repositoryInfo) {\n            return repositoryInfo;\n        }\n        return undefined;\n    }\n\n    /**\n     * 判断选中的标签是否在初始数据中,若不存在说明是新增的,需要添加进update参数的addLabels中\n     * @param labelId 当前选中的标签ID\n     */\n    const selectLabelHandler = (labelId: number) => {\n        const { addLabels } = updateProjectDetailParam;\n        // 如果不在初始detail和addLabel里面,说明是新增的\n        if (!projectDetailInfo.labels.find(item => item.id === labelId) && !addLabels?.find(item => item.id === labelId)) {\n            const labelInfo: labelDataType | undefined = getItemFromLabelList(labelId);\n            // 判断是否为空,过滤非法数据\n            if (labelInfo) {\n                addLabels?.push(labelInfo);\n                setUpdateProjectDetailParam({ ...updateProjectDetailParam, addLabels });\n            }\n        }\n    }\n\n    /**\n     * 提交前对标签进行数据处理\n     * @param labelInForm form表单提交上来的label值\n     * @returns\n     */\n    const beforeRequestLabelHandler = async (labelInForm: number[]) => {\n        // 初始的label数据\n        const labelFromGroupDetail = projectDetailInfo.labels;\n        // 因为添加的标签在Select选中的时候就已经添加了,因此需要使用该值和初始的标签数据进行比对以得到哪些标签被删除\n        const { deleteLabels, addLabels } = updateProjectDetailParam;\n\n        // 遍历初始的数据,查找出属于删除的标签\n        labelFromGroupDetail.map((labelInDetail: labelDataType) => {\n            // 若表单值数组里存在当前初始标签值,说明该标签未处理,跳过\n            // 若表单值数组里当前值在add里面,说明该标签是新增的,跳过\n            // 若表单值数组里当前值在delete里面,说明该标签已经记录删除了,跳过\n            if (labelInForm.find((labelId: number) => labelInDetail.id === labelId\n                || addLabels?.find((labelInParam: labelDataType) => labelInDetail.id === labelInParam.id)\n                || deleteLabels?.find((labelInParam: labelDataType) => labelInDetail.id === labelInParam.id)\n            )) {\n                return "";\n            }\n            // 以上条件都不满足,代表当前数据是被删除的,需要加进delete数组里\n            return deleteLabels?.push(labelInDetail);\n        });\n\n        // 判断addLabel里面是否存在于表单值里,若不存在说明已经删除了,需要从addLabel剔除\n        let addLabelsTemp = addLabels || [];\n        addLabels?.map((labelInParam: labelDataType) => {\n            if (!labelInForm.find((labelId: number) => labelInParam.id === labelId)) {\n                addLabelsTemp = addLabelsTemp.filter((labelInfo: labelDataType) => labelInfo.id !== labelInParam.id);\n                return true;\n            }\n            return "";\n        });\n        return { deleteLabels, addLabels: addLabelsTemp };\n    }\n\n    /**\n     * 提交前对仓库信息进行数据处理\n     * @param repositoryInForm 修改表单里的仓库信息\n     * @param repoType 仓库类型:子仓/依赖仓\n     * @returns\n     */\n    const beforeRequestRepositoryHandler = async (repositoryInForm: repositoryBasicDataType[], repoType: string) => {\n        if (repoType === "slave") {\n            const slaveRepositories: repositoryBasicDataType[] = [];\n            // 表单内的子仓相对路径是否和详情的子仓相对路径相同\n            let isSameWithProjectDetail = repositoryInForm.length === projectDetailInfo.slaveRepositories.length;\n            repositoryInForm.forEach((item: repositoryBasicDataType) => {\n                const repositoryInfo: any = getItemFromRepositoryList(item.id);\n                slaveRepositories.push({ ...repositoryInfo, prefix: item.prefix });\n                if (isSameWithProjectDetail) {\n                    const slaveRepoInProjectDetail = projectDetailInfo.slaveRepositories.find(slaveRepo => item.id === slaveRepo.id);\n                    if (!slaveRepoInProjectDetail || slaveRepoInProjectDetail.prefix !== item.prefix) {\n                        isSameWithProjectDetail = false;\n                    }\n                }\n            });\n            // 未修改子仓返回null\n            if (isSameWithProjectDetail) {\n                return null;\n            }\n            return slaveRepositories;\n        }\n\n        let dependencyRepoInDetailInfo = cloneDeep(projectDetailInfo.dependencyRepositories);\n        const addRepositories: repositoryBasicDataType[] = [];\n        repositoryInForm.forEach((dependencyRepo: repositoryBasicDataType) => {\n            const theSameMember = dependencyRepoInDetailInfo.find(item => item.id === dependencyRepo.id);\n            if (theSameMember?.id === dependencyRepo.id) {\n                dependencyRepoInDetailInfo = dependencyRepoInDetailInfo.filter(item => item.id !== dependencyRepo.id);\n                return;\n            }\n            const repositoryInfo: any = getItemFromRepositoryList(dependencyRepo.id);\n            addRepositories.push(repositoryInfo);\n        });\n        const deleteRepositories = dependencyRepoInDetailInfo;\n        return { addDependencyRepositories: addRepositories, deleteDependencyRepositories: deleteRepositories };\n    }\n\n    /**\n     * 获取openApi参数值\n     * @param openApiIds 已选中的openApiId\n     * @returns openApiDataType\n     */\n    const beforeRequestOpenApiHandler = (openApiIds: number[]) => {\n        if (isEqual(openApiIds, (projectDetailInfo?.openApiApps || []).map(openApi => openApi.id))) {\n            return null;\n        }\n        return openApiList.filter(item => (openApiIds || []).includes(item.id));\n    }\n\n    /**\n     * 获取openApi参数值\n     * @param openApiIds 已选中的openApiId\n     * @returns openApiDataType\n     */\n    const beforeRequestCollectionHandler = (collectionIds: number[]) => {\n        if (isEqual(collectionIds, (projectDetailInfo?.gsCollects || []).map(collection => collection.id))) {\n            return null;\n        }\n        return collectionList.filter(item => (collectionIds || []).includes(item.id));\n    }\n\n    /**\n     * 判断当前输入的用户是否拥有权限\n     * @param repositoryId 仓库id\n     * @param username 用户ksso\n     * @returns true: 拥有权限或出现异常;false: 没有权限可以继续流程\n     */\n    const checkMemberPermissionHandler = async (repositoryId: number, username: string) => {\n        if (username === "" || !username) {\n            message.warning("ksso不能为空!");\n            return;\n        }\n        try {\n            const response = await RequestUtils(checkMemberPermission, { id: repositoryId, username }, { msg: "校验选择的用户是否有权限" });\n            if (response.success) {\n                // 无返回说明没有权限,可以添加\n                if (response.data === null) {\n                    message.info("该用户在当前仓库下没有权限!");\n                    return;\n                }\n                // 有返回说明权限已存在,无法添加并提示用户\n                if (response.data.id && response.data.username) {\n                    message.warning(`该用户在当前仓库下已经有${accessLevelValueEnum[response.data.accessLevel].text || ""}权限了!`);\n                    return;\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            message.error("校验用户权限时出现异常,若要添加该用户可能会失败!");\n        }\n    }\n\n    /**\n     * 获取当前用户是否已选择\n     * @param userId\n     */\n    const checkCurrentSelectInForm = (userId: number, index: number) => {\n        const membersFormValues = form.getFieldValue("members");\n        // 如果已选择该用户,不让其选择\n        if (membersFormValues.filter((item: any) => item.id === userId).length > 1) {\n            message.warning("该用户已被选择,请勿重复选择");\n            membersFormValues[index].id = null;\n            form.setFieldsValue({ "members": membersFormValues });\n        }\n    }\n\n    /**\n     * 获取当前仓库是否已选择\n     * @param repoId\n     * @param type 类型(子仓/依赖仓)\n     */\n    const checkCurrentRepoSelectInForm = (repoId: number, type: string, index: number) => {\n        const formProperty = type === "slave" ? "slaveRepositories" : "dependencyRepositories";\n        const typeFormValues = form.getFieldValue(formProperty);\n\n        if (typeFormValues.filter((item: any) => item.id === repoId).length > 1) {\n            message.warning("该仓库已被选择,请勿重复选择");\n            typeFormValues[index].id = null;\n            form.setFieldsValue({ formProperty: typeFormValues });\n        }\n    }\n\n    /**\n     * 处理提交的方法\n     */\n    const submitHandler = async () => {\n        try {\n            const formValues = await form.validateFields();\n            setSubmitLoading(true);\n\n            // 处理标签数据\n            const labelData = await beforeRequestLabelHandler(formValues.label);\n            // 处理成员数据,判断哪些是新增的,哪些是删除的\n            const memberData = await getAddAndDeleteMembers(formValues.members, projectDetailInfo.members, getItemFromUserList);\n\n            await checkVisibilityAndPurposeTypeHandler({\n                purposeType: formValues.type,\n                visibilityLevel: formValues.visibilityLevel || projectDetailInfo.visibilityLevel,\n                groupId: projectDetailInfo?.groupId\n            });\n\n            const errorContent: any[] = [];\n            // 只校验addMembers的权限是否存在冲突,已存在的不校验\n            if (memberData.addMembers && memberData.addMembers.length > 0) {\n                await checkIrregularMemberHandler({\n                    domain: projectDetailInfo.repositoryHttpUrl,\n                    members: memberData.addMembers,\n                    purposeType: formValues.type,\n                    visibilityLevel: formValues.visibilityLevel || projectDetailInfo.visibilityLevel,\n                    reviserId: currentUserId,\n                    checkType: checkTypeStatusMap.repository.code\n                });\n\n                const conflictMembers = await validateMember("permission", projectDetailInfo.repositoryUrl, memberData.addMembers, "成员", false);\n                if (!conflictMembers) {\n                    setSubmitLoading(false);\n                    return;\n                }\n                // 不是false也不是true,说明是有dom对象的,将其加进来\n                if (conflictMembers !== true) {\n                    errorContent.push(conflictMembers);\n                }\n            }\n            if (errorContent.length > 0) {\n                getNotification("提交申请时发生错误!", errorContent, 8);\n                setSubmitLoading(false);\n                return;\n            }\n\n            // 处理子仓数据\n            const slaveRepositories = await beforeRequestRepositoryHandler(formValues.slaveRepositories, "slave");\n            // 处理依赖仓数据\n            const dependencyRepoData = await beforeRequestRepositoryHandler(formValues.dependencyRepositories, "dependency");\n            const openApiApps = beforeRequestOpenApiHandler(formValues.openApiApps);\n            const gsCollects = beforeRequestCollectionHandler(formValues.gsCollects)\n\n            // 判断以下常量是否修改过,若没有修改过则不传参\n            let { description, state, visibilityLevel, branchControl, codeReviewState, type, whitelistRegex } = formValues;\n            if (whitelistRegex === projectDetailInfo.whitelistRegex) {\n                whitelistRegex = undefined;\n            }\n            description = description === projectDetailInfo.description ? undefined : description;\n            state = state === projectDetailInfo.state ? undefined : state;\n            visibilityLevel = visibilityLevel === projectDetailInfo.visibilityLevel ? undefined : visibilityLevel;\n            branchControl = branchControl === projectDetailInfo.branchControl ? undefined : branchControl;\n            codeReviewState = codeReviewState === projectDetailInfo.codeReviewState ? undefined : codeReviewState;\n            type = type === projectDetailInfo.type ? undefined : type;\n\n\n            // 获取构建的参数,准备发起请求\n            let requestParam: any = {};\n            setUpdateProjectDetailParam({\n                ...updateProjectDetailParam, ...formValues, description, state, visibilityLevel, branchControl, codeReviewState,\n                ...labelData, ...memberData, label: undefined, members: undefined, dependencyRepositories: undefined,\n                slaveRepositories, ...dependencyRepoData, type, whitelistRegex, openApiApps, gsCollects\n            });\n            // 此处使用setstate的回调函数,是为了取得最新值,否则因为异步取的还是旧值\n            setUpdateProjectDetailParam((item: any) => {\n                requestParam = item;\n                return item;\n            });\n\n            const updateProjectHandler = async () => {\n                // 发起修改请求\n                const response = await RequestUtils(updateProjectDetail, requestParam, { msg: \'更新project信息\' });\n                if (response.success) {\n                    setUpdateMode(false);\n                    setReload(true);\n                    setConfirmVisible(false);\n                    setUpdateProjectDetailParam(cloneDeep(initUpdateParam));\n                    setRequestMembersStatus(false);\n                }\n            }\n\n            const confirmIrregularMemberModal = await showIrregularMemberListModal({\n                purposeType: formValues.type,\n                repositoryId: projectDetailInfo.id\n            });\n\n            if (confirmIrregularMemberModal) {\n                confirmIrregularMemberModal?.update({\n                    onOk: async () => {\n                        await updateProjectHandler()\n                    }\n                })\n            } else {\n                await updateProjectHandler();\n            }\n        } catch (e: any) {\n            // 事故多发地，输出下日志用于线上排查\n            console.log(e);\n            if (e.message === FrontendError.END_PROCESS) {\n                return;\n            }\n            const description = form.getFieldValue("modifyDescription");\n            // 如果修改原因不是空的,说明参数校验出错\n            if (description && description !== "") {\n                setConfirmVisible(false);\n                message.warning("请求出错,请检查数据是否填写正确", 3);\n            }\n        } finally {\n            setSubmitLoading(false);\n        }\n    }\n\n    /**\n     * 获取标签列表\n     * @param typeId\n     */\n    const getLabelList = async (typeId: number) => {\n        const response = await getLabelListByTypeId(typeId);\n        if (response.success) {\n            const responseData = response.data;\n            const labelOption: any[] = [];\n            responseData.map((item: labelDataType) => {\n                const colorValue = item.colorValue ? item.colorValue.slice(0, -1) : "rgb(255, 255, 255)";\n                const backgroundColor = `${colorValue}, 0.12)`;\n                return labelOption.push(\n                    <Option key={item.id}\n                        title={item.name}\n                        value={item.id}\n                        className={styles.labelSelect}\n                    >\n                        <Label backgroundColor={backgroundColor} color={item.colorValue ? item.colorValue : \'#ffffff\'} name={item.name ? item.name : ""} maxWidth="100%" />\n                    </Option>\n                )\n            })\n            setLabelList(responseData);\n            setLabelOptionList(labelOption);\n        }\n    }\n\n    /**\n     * 根据type转化对应antd组件\n     */\n    const tagTypeToAntdItem = (tagType: string, formItemProps?: commonPropsDataType) => {\n        switch (tagType.toLowerCase()) {\n            case "input":\n                return <Input {...formItemProps?.apiOption} />;\n            case "textarea":\n                return <TextArea {...formItemProps?.apiOption} />;\n            case "select":\n                if (!formItemProps) {\n                    message.warning("未传递select组件的option和属性,Select组件将失效!");\n                    // throw new Error("未传递select组件的option!");\n                }\n                return (\n                    <Select {...formItemProps?.apiOption}>\n                        {formItemProps ? formItemProps.selectOptions : undefined}\n                    </Select>\n                )\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * 将接口返回的内容转化为description里的文本内容和修改的表单项\n     * @param dataProps 数据基础内容,包含源数据, 枚举数据, "标签"行标志位\n     * @param updateCondition 更新判断条件,是否为管理员或负责人\n     * @param formItemProps antd的formitem属性\n     * @returns\n     */\n    const responseDataToContent = (\n        dataProps: dataPropsDataType,\n        updateCondition: boolean,\n        formItemProps?: formItemPropsDataType\n    ) => {\n        const { responseData, dataEnum, isLabel } = dataProps;\n        let content = responseData;\n\n        // 进入编辑模式后,返回的是form表单内容\n        if (formItemProps && updateCondition && updateMode) {\n            const { fieldName, initialValue, tagType, componentProps } = formItemProps;\n            return (\n                <Form form={form} className={styles.updateForm}>\n                    <FormItem name={fieldName} initialValue={initialValue}>\n                        {tagTypeToAntdItem(tagType, componentProps)}\n                    </FormItem>\n                </Form>\n            );\n        }\n\n        // 如果不是"标签"字段,则根据提供的枚举类直接返回普通文本(非编辑模式下)\n        if (!isLabel && dataEnum) {\n            const numberToObj = dataEnum[responseData];\n            if (numberToObj) {\n                if (numberToObj.text !== undefined) {\n                    content = numberToObj.text;\n                }\n            }\n            return <span className="gs_needToWrap">{content}</span>;\n        }\n        if (!isLabel && !dataEnum) {\n            return <span className="gs_needToWrap">{content}</span>;\n        }\n        // 标签的非编辑模式返回\n        return (\n            responseData.map((item: labelDataType) => {\n                const colorValue = item.colorValue ? item.colorValue.slice(0, -1) : "rgb(255, 255, 255)";\n                const backgroundColor = `${colorValue}, 0.12)`;\n                return <Label key={item.id} backgroundColor={backgroundColor} color={item.colorValue ? item.colorValue : "#ffffff"} name={item.name ? item.name : ""} />\n            })\n        )\n    }\n\n    // ----------穿梭框相关----------\n\n    /**\n     * 格式化用户数据为穿梭框需要的格式\n     * @param list 用户列表\n     * @returns\n     */\n    const formatUserList = (list: memberDataType[]) => {\n        const formatList: transferDataSourceDataType[] = []\n        list.forEach((item: memberDataType) => {\n            formatList.push({\n                key: item.id.toString(),\n                title: item.nickname,\n                description: item.username,\n            })\n        });\n        return formatList;\n    }\n\n    // 获取用户列表,用于成员的选择\n    const getUserListHandler = async () => {\n        const response = await RequestUtils(getUserListInGM, undefined, { msg: \'获取用户列表\' });\n        if (response.success) {\n            const userListFromResponse: memberDataType[] = response.data;\n            const userOption: any[] = [];\n            userListFromResponse.map((item: memberDataType) => {\n                return userOption.push(\n                    <Option key={item.username}\n                        title={item.username}\n                        value={item.id}\n                        disabled={false}\n                    >\n                        {`${item.nickname}(${item.username})`}\n                    </Option>\n                )\n            })\n            setUserOptionForSelect(userOption);\n            setUserList(formatUserList(response.data));\n        }\n    }\n\n    /** 获取并设置openApi值 */\n    const getAndSetOpenApiList = async () => {\n        const response = await RequestUtils(getGmOpenApiList, undefined, { msg: "获取OpenApi列表" });\n        setOpenApiList(response.success ? response.data : []);\n    }\n\n    /** 获取并设置集合 */\n    const getAndSetCollection = () => {\n        getCollectionList().then(response => {\n            setCollectionList(response.data);\n        });\n    };\n\n    // 穿梭框的搜索判断\n    const filterOption = (inputValue: string, option: any) => option.title.indexOf(inputValue) > -1 || option.description.indexOf(inputValue) > -1;\n\n    /**\n     * 处理穿梭框数据变化,根据移动方向和原始人员列表判断是否需要加入变更参数里\n     * @param newTargetKeys 新的targetKeys数组\n     * @param direction 移动方向\n     * @param moveKeys 移动的userId\n     */\n    const handleApproversTargetKeysChange = (newTargetKeys: string[], direction: string, moveKeys: string[]) => {\n        // 如果往右移动,说明是新增负责人\n        // 需要判断用户是否已存在原始数据里,若存在说明是无意义的移动\n        const approversFromDetail: memberDataType[] = projectDetailInfo.approvers;\n        let addApproversFromParam: memberDataType[] = updateProjectDetailParam.addApprovers || [];\n        if (direction === "right") {\n            // moveKeys只有更新的数据\n            moveKeys.map((userId: string) => {\n                if (!approversFromDetail.find((userInApprovers: memberDataType) => userInApprovers.id === +userId)) {\n                    const userInfo: any = getItemFromUserList(+userId);\n                    return addApproversFromParam.push(userInfo);\n                }\n                return "";\n            })\n            setUpdateProjectDetailParam({ ...updateProjectDetailParam, addApprovers: addApproversFromParam });\n        } else {\n            if (newTargetKeys.length === 0) {\n                return message.warning("不能删除所有负责人!");\n            }\n            // 要从update参数里查找到数据,用该数据filter掉已经delete的数据\n            const deleteApproversFromParam: memberDataType[] = updateProjectDetailParam.deleteApprovers || [];\n            // moveKeys只有更新的数据\n            moveKeys.map((userId: string) => {\n                // 若在初始数据中能找到当前用户ID,说明是要删除的,直接加入deleteApprovers里\n                // 若在update参数中找不到当前用户ID,说明从未删除过该用户,直接加入deleteApprovers里\n                if (approversFromDetail.find((userInApprovers: memberDataType) => userInApprovers.id === +userId) &&\n                    !deleteApproversFromParam.find((userInParam: memberDataType) => userInParam.id === +userId)\n                ) {\n                    const userInfo: any = getItemFromUserList(+userId);\n                    userInfo.accessLevel = accessLevelStatusMap.delete.code;\n                    return deleteApproversFromParam.push(userInfo);\n                }\n                // 如果当前删除用户的在add参数里面也有,说明是增加后删除,只需删除掉add里面的数据即可\n                if (addApproversFromParam.find(item => item.id === +userId)) {\n                    addApproversFromParam = addApproversFromParam.filter(item => item.id !== +userId);\n                    return "";\n                }\n                return "";\n            })\n            setUpdateProjectDetailParam({\n                ...updateProjectDetailParam,\n                deleteApprovers: deleteApproversFromParam,\n                addApprovers: addApproversFromParam\n            });\n        }\n        setTargetKeysForTransfer(newTargetKeys);\n    }\n\n    // ProDescription组件的列数据\n    const coulumn: any = [\n        {\n            title: "申请人",\n            key: "applyUser",\n            span: 4,\n            render: (_: any, record: projectDetailDataType) => {\n                if (record.applyUsername) {\n                    return <span>{record.applyUserNickname}({record.applyUsername})</span>\n                }\n                return <span>{record.applyUserNickname}</span>\n            }\n        },\n        {\n            title: "名称",\n            key: "name",\n            dataIndex: "name",\n            span: 4,\n        },\n        {\n            title: "分支管控",\n            key: "branchControl",\n            dataIndex: "branchControl",\n            span: 4,\n            tooltip: gitManageFieldTips.branchControl.tooltip,\n            render: (branchControl: number) => {\n                return responseDataToContent(\n                    { responseData: branchControl, dataEnum: commonStateValueEnum, isLabel: false },\n                    isAdmin || isApprover,\n                    {\n                        fieldName: "branchControl", initialValue: branchControl, tagType: "select", componentProps: {\n                            selectOptions: switchOptionForSelect,\n                            apiOption: {\n                                style: { width: \'30%\' },\n                                onChange: (value: any) => {\n                                    setUpdateProjectDetailParam({ ...updateProjectDetailParam, branchControl: value })\n                                }\n                            }\n                        }\n                    });\n            }\n        },\n        {\n            title: "分支管控正则",\n            key: "whitelistRegex",\n            dataIndex: "whitelistRegex",\n            span: 4,\n            tooltip: gitManageFieldTips.whitelistRegex.tooltip,\n            render: (whitelistRegex: string) => {\n                return responseDataToContent(\n                    { responseData: whitelistRegex, dataEnum: undefined, isLabel: false },\n                    isAdmin || isApprover,\n                    {\n                        fieldName: "whitelistRegex",\n                        initialValue: whitelistRegex,\n                        tagType: "input",\n                        componentProps: {\n                            apiOption: {\n                                style: { width: \'30%\' },\n                                onBlur: () => {\n                                    setUpdateProjectDetailParam({\n                                        ...updateProjectDetailParam,\n                                        whitelistRegex: form.getFieldValue("whitelistRegex")?.trim()\n                                    });\n                                },\n                                placeholder: gitManageFieldTips.whitelistRegex.placeholder,\n                            }\n                        }\n                    });\n            }\n        },\n        {\n            title: "代码检视开关",\n            key: "codeReviewState",\n            dataIndex: "codeReviewState",\n            span: 4,\n            tooltip: "",\n            render: (codeReviewState: number) => {\n                return responseDataToContent(\n                    { responseData: codeReviewState, dataEnum: commonOpenStateValueEnum, isLabel: false },\n                    isAdmin || isApprover,\n                    {\n                        fieldName: "codeReviewState", initialValue: codeReviewState, tagType: "select", componentProps: {\n                            selectOptions: switchOptionForSelect,\n                            apiOption: {\n                                style: { width: \'30%\' },\n                                onChange: (value: any) => {\n                                    setUpdateProjectDetailParam({ ...updateProjectDetailParam, codeReviewState: value });\n                                    setCodeReviewStateValue(value);\n                                }\n                            }\n                        }\n                    });\n            }\n        },\n        {\n            title: "projectID",\n            key: "projectId",\n            dataIndex: "projectId",\n            span: 4,\n        },\n        {\n            title: "所属group",\n            key: "groupName",\n            dataIndex: "groupName",\n            span: 4,\n        },\n        {\n            title: "可见等级",\n            key: "visibilityLevel",\n            dataIndex: "visibilityLevel",\n            span: 4,\n            render: (visibilityLevel: number) => {\n                return responseDataToContent(\n                    { responseData: visibilityLevel, dataEnum: groupVisibilityLevelValueEnum, isLabel: false },\n                    isAdmin,\n                    {\n                        fieldName: "visibilityLevel", initialValue: visibilityLevel, tagType: "select", componentProps: {\n                            selectOptions: visibilityLevelOptionForSelect,\n                            apiOption: {\n                                style: { width: \'30%\' },\n                                onChange: (value: any) => {\n                                    setUpdateProjectDetailParam({ ...updateProjectDetailParam, visibilityLevel: value })\n                                }\n                            }\n                        }\n                    });\n            }\n        },\n        {\n            title: "project用途",\n            key: "type",\n            dataIndex: "type",\n            span: 4,\n            render: (type: number) => {\n                return responseDataToContent(\n                    { responseData: type, dataEnum: purposeTypeValueEnum, isLabel: false },\n                    isAdmin || isApprover,\n                    {\n                        fieldName: "type", initialValue: type, tagType: "select", componentProps: {\n                            selectOptions: Object.keys(purposeTypeValueEnum).map(item => {\n                                return (<Option value={+item}>{purposeTypeValueEnum[item].text}</Option>)\n                            }),\n                            apiOption: {\n                                style: { width: \'30%\' },\n                                onChange: (value: any) => {\n                                    setUpdateProjectDetailParam({ ...updateProjectDetailParam, type: value })\n                                }\n                            }\n                        }\n                    });\n            }\n        },\n        {\n            title: "状态",\n            key: "state",\n            dataIndex: "state",\n            span: 4,\n            render: (state: number) => {\n                return responseDataToContent(\n                    { responseData: state, dataEnum: commonStateValueEnum, isLabel: false },\n                    isAdmin || isApprover,\n                    {\n                        fieldName: "state", initialValue: state, tagType: "select", componentProps: {\n                            selectOptions: stateOptionForSelect,\n                            apiOption: {\n                                style: { width: \'30%\' },\n                                onChange: (value: any) => {\n                                    setUpdateProjectDetailParam({ ...updateProjectDetailParam, state: value })\n                                }\n                            }\n                        }\n                    });\n            }\n        },\n        {\n            title: "OpenApi配置",\n            key: "openApiApps",\n            dataIndex: "openApiApps",\n            tooltip: gitManageFieldTips.openApiApps.tooltip,\n            span: 4,\n            render: (openApiApps: openApiDataType[]) => {\n                if (!updateMode) {\n                    if (openApiApps && openApiApps.length > 0) {\n                        return (\n                            openApiApps.map((item) => {\n                                return (\n                                    <React.Fragment key={`openApiApp-${item.id}`}>\n                                        <div>\n                                            {item.title}\n                                        </div>\n                                    </React.Fragment>\n                                )\n                            })\n                        )\n                    }\n                    return "";\n                }\n                return responseDataToContent(\n                    { responseData: openApiApps, dataEnum: undefined, isLabel: false },\n                    isAdmin || isApprover,\n                    {\n                        fieldName: "openApiApps",\n                        initialValue: (openApiApps || []).map(item => item.id),\n                        tagType: "select",\n                        componentProps: {\n                            selectOptions: openApiList.map(item => (\n                                <Option value={item.id} title={item.title}>\n                                    {item.title}\n                                </Option>\n                            )),\n                            apiOption: {\n                                style: { width: \'50%\' },\n                                optionLabelProp: "title",\n                                mode: "multiple",\n                                allowClear: true,\n                                showSearch: true,\n                                placeholder: "请选择",\n                                filterOption: (input: any, option: any) => {\n                                    return (\n                                        option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    )\n                                },\n                            }\n                        }\n                    });\n            }\n        },\n        {\n            title: "标签",\n            key: "labels",\n            dataIndex: "labels",\n            span: 4,\n            render: (labels: labelDataType[]) => {\n                const labelInitialValue: number[] = [];\n                labels.forEach(item => {\n                    labelInitialValue.push(item.id);\n                });\n                return responseDataToContent(\n                    { responseData: labels, dataEnum: undefined, isLabel: true },\n                    isAdmin || isApprover,\n                    {\n                        fieldName: "label", initialValue: labelInitialValue, tagType: "select", componentProps: {\n                            selectOptions: labelOptionList,\n                            apiOption: {\n                                style: { width: \'50%\' },\n                                optionLabelProp: "title",\n                                mode: "multiple",\n                                onSelect: (value: number) => {\n                                    selectLabelHandler(value);\n                                },\n                                allowClear: true,\n                                showSearch: true,\n                                placeholder: "请选择",\n                                filterOption: (input: any, option: any) => {\n                                    return (\n                                        option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    )\n                                },\n                            }\n                        }\n                    });\n            }\n        },\n        {\n            title: "所属集合",\n            key: "gsCollects",\n            dataIndex: "gsCollects",\n            tooltip: gitManageFieldTips.collection.tooltip,\n            span: 4,\n            render: (gsCollects: ICollection[]) => {\n                if (!updateMode) {\n                    if (gsCollects && gsCollects.length > 0) {\n                        return (\n                          gsCollects.map((item) => {\n                              return (\n                                <React.Fragment key={`collection-${item.id}`}>\n                                    <div>\n                                        {item.name}\n                                    </div>\n                                </React.Fragment>\n                              )\n                          })\n                        )\n                    }\n                    return "";\n                }\n                return responseDataToContent(\n                  { responseData: gsCollects, dataEnum: undefined, isLabel: false },\n                  isAdmin || isApprover,\n                  {\n                      fieldName: "gsCollects",\n                      initialValue: (gsCollects || []).map(item => item.id),\n                      tagType: "select",\n                      componentProps: {\n                          selectOptions: collectionList.map(item => (\n                            <Option key={`collection-${item.id}`} value={item.id} title={item.name}>\n                                {item.name}\n                            </Option>\n                          )),\n                          apiOption: {\n                              style: { width: \'50%\' },\n                              optionLabelProp: "title",\n                              mode: "multiple",\n                              allowClear: true,\n                              showSearch: true,\n                              placeholder: gitManageFieldTips.collection.placeholder,\n                              filterOption: (input: any, option: any) => {\n                                  return (\n                                    option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                  )\n                              },\n                          }\n                      }\n                  });\n            }\n        },\n        {\n            title: "地址",\n            key: "repositoryUrl",\n            dataIndex: "repositoryUrl",\n            span: 4,\n            render: (_: any, record: projectDetailDataType) => {\n                if (record.repositoryHttpUrl) {\n                    return (\n                        <>\n                            <div>\n                                <span style={{ display: \'block\' }}>ssh：{record.repositoryUrl}</span>\n                                <span>http：{record.repositoryHttpUrl}</span>\n                            </div>\n                        </>\n                    )\n                }\n                return <span>ssh：{record.repositoryUrl}</span>;\n            }\n        },\n        {\n            title: "备注",\n            key: "description",\n            dataIndex: "description",\n            span: 4,\n            render: (description: string) => {\n                return responseDataToContent(\n                    { responseData: description, dataEnum: undefined, isLabel: false },\n                    isAdmin || isApprover,\n                    {\n                        fieldName: "description", initialValue: description, tagType: "textArea", componentProps: {}\n                    });\n            }\n        },\n        {\n            title: "创建时间",\n            key: "createTime",\n            dataIndex: "createTime",\n            span: 4\n        },\n        {\n            title: "关联project",\n            key: "slaveRepositories",\n            dataIndex: "slaveRepositories",\n            span: 4,\n            render: (slaveRepositories: repositoryBasicDataType[]) => {\n                if ((isAdmin || isApprover) && updateMode) {\n                    return (\n                        <>\n                            <Space>\n                                <span>仓库</span>\n                                <span style={{ marginLeft: "29rem" }}>\n                                    相对路径\n                                    <Tooltip overlay="比如主仓库是wps，目录有wps/a/b/c，c目录是wps的子仓库,那么c的相对路径就是a/b/c（不需要斜杠开头）">\n                                        <QuestionCircleOutlined />\n                                    </Tooltip>\n                                </span>\n                            </Space>\n                            <Form className={styles.updateForm} form={form} initialValues={{ slaveRepositories: projectDetailInfo.slaveRepositories }}>\n                                <Form.List name="slaveRepositories" key="slaveRepositoriesFormList">\n                                    {(fields, { add, remove }) => (\n                                        <>\n                                            {fields.map(({ key, name, fieldKey, ...restField }) => (\n                                                <Space\n                                                    key={key}\n                                                    style={{ display: "flex" }}\n                                                    align="baseline"\n                                                >\n                                                    <Form.Item\n                                                        {...restField}\n                                                        name={[name, "id"]}\n                                                        fieldKey={[fieldKey, "id"]}\n                                                        rules={[{ required: true, message: "请选择仓库" }]}\n                                                    >\n                                                        <Select\n                                                            style={{ width: \'31.25rem\' }}\n                                                            onChange={(repoId: number) => { checkCurrentRepoSelectInForm(repoId, "slave", name); }}\n                                                            showSearch\n                                                            placeholder="请选择仓库"\n                                                            filterOption={(input: any, option: any) => {\n                                                                return (\n                                                                    option.key.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                                                );\n                                                            }}\n                                                        >\n                                                            {slaveRepositoriesList}\n                                                        </Select>\n                                                    </Form.Item>\n                                                    <Form.Item\n                                                        {...restField}\n                                                        name={[name, "prefix"]}\n                                                        fieldKey={[fieldKey, "prefix"]}\n                                                        rules={[{\n                                                            required: (isAdmin ? codeReviewStateValue === 1 : projectDetailInfo.codeReviewState === 1)\n                                                                && slaveRepoId2Prefix[form.getFieldValue("slaveRepositories")[name]?.id] !==\n                                                                form.getFieldValue("slaveRepositories")[name]?.prefix,\n                                                            message: "请填写正确的子仓相对路径",\n                                                            pattern: /^(.?\\/?)+([^/])$/\n                                                        }]}\n                                                        validateTrigger="onBlur"\n                                                    >\n                                                        <Input placeholder="相对主仓库的路径" autoComplete="off" />\n                                                    </Form.Item>\n                                                    <MinusCircleOutlined\n                                                        onClick={() => {\n                                                            remove(name);\n                                                        }}\n                                                    />\n                                                </Space>\n                                            ))}\n                                            <Form.Item style={{ width: \'35%\' }}>\n                                                <Button\n                                                    type="dashed"\n                                                    onClick={() => add({ id: undefined, prefix: null })}\n                                                    block\n                                                >\n                                                    添加\n                                                </Button>\n                                            </Form.Item>\n                                        </>\n                                    )}\n                                </Form.List>\n                            </Form>\n                        </>\n                    )\n                }\n                if (slaveRepositories && slaveRepositories.length > 0) {\n                    return (\n                        slaveRepositories.map((item) => {\n                            return (\n                                <React.Fragment key={`slaveRepository-${item.id}`}>\n                                    <div>\n                                        <Space>\n                                            <Link to={`${projectDetailUrl}${item.id}`} target="_blank" className="gs_link">\n                                                {item.name} - {item.repositoryUrl}\n                                            </Link>\n                                            {item.prefix && item.prefix !== "" ? <span>相对路径: {item.prefix}</span> : null}\n                                        </Space>\n                                    </div>\n                                </React.Fragment>\n                            )\n                        })\n                    )\n                }\n                return "";\n            }\n        },\n        {\n            title: "依赖project",\n            key: "dependencyRepositories",\n            dataIndex: "dependencyRepositories",\n            span: 4,\n            render: (dependencyRepositories: repositoryBasicDataType[]) => {\n                if ((isAdmin || isApprover) && updateMode) {\n                    return (\n                        <Form className={styles.updateForm} form={form} initialValues={{ dependencyRepositories: projectDetailInfo.dependencyRepositories }}>\n                            <Form.List name="dependencyRepositories" key="dependencyRepositoriesFormList">\n                                {(fields, { add, remove }) => (\n                                    <>\n                                        {fields.map(({ key, name, fieldKey, ...restField }) => (\n                                            <Space\n                                                key={key}\n                                                style={{ display: "flex" }}\n                                                align="baseline"\n                                            >\n                                                <Form.Item\n                                                    {...restField}\n                                                    name={[name, "id"]}\n                                                    fieldKey={[fieldKey, "id"]}\n                                                    rules={[{ required: true, message: "请选择仓库" }]}\n                                                >\n                                                    <Select\n                                                        style={{ width: \'31.25rem\' }}\n                                                        onChange={(repoId: number) => { checkCurrentRepoSelectInForm(repoId, "dependency", name); }}\n                                                        showSearch\n                                                        placeholder="请选择仓库"\n                                                        filterOption={(input: any, option: any) => {\n                                                            return (\n                                                                option.key.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                                            );\n                                                        }}\n                                                    >\n                                                        {dependencyRepositoriesList}\n                                                    </Select>\n                                                </Form.Item>\n                                                <MinusCircleOutlined\n                                                    onClick={() => {\n                                                        remove(name);\n                                                    }}\n                                                />\n                                            </Space>\n                                        ))}\n                                        <Form.Item style={{ width: \'35%\' }}>\n                                            <Button\n                                                type="dashed"\n                                                onClick={() => add()}\n                                                block\n                                            >\n                                                添加\n                                            </Button>\n                                        </Form.Item>\n                                    </>\n                                )}\n                            </Form.List>\n                        </Form>\n                    )\n                }\n                if (dependencyRepositories && dependencyRepositories.length > 0) {\n                    return (\n                        dependencyRepositories.map((item) => {\n                            return (\n                                <React.Fragment key={`dependencyRepository-${item.id}`}>\n                                    <div>\n                                        <Link to={`${projectDetailUrl}${item.id}`} target="_blank" className="gs_link">\n                                            {item.name} - {item.repositoryUrl}\n                                        </Link>\n                                    </div>\n                                </React.Fragment>\n                            )\n                        })\n                    )\n                }\n                return "";\n            }\n        },\n        {\n            title: "负责人",\n            key: "approvers",\n            dataIndex: "approvers",\n            span: 4,\n            tooltip: "负责人仅用于平台仓库管理，未对应gitlab权限，若需访问代码，请在成员一栏进行添加",\n            render: (approvers: memberDataType[]) => {\n                if ((isAdmin || isApprover) && updateMode) {\n                    return (\n                        <Transfer\n                            dataSource={userList}\n                            showSearch\n                            listStyle={{ width: \'15%\', height: \'300px\' }}\n                            titles={[\'所有的用户列表\', \'已选择的用户列表\']}\n                            pagination={{ pageSize: 100 }}\n                            filterOption={filterOption}\n                            targetKeys={targetKeysForTransfer}\n                            onChange={handleApproversTargetKeysChange}\n                            render={(item: any) => `${item.title}(${item.description})`}\n                            locale={{\n                                notFoundContent:\n                                    <Empty\n                                        image={<EmptyData />}\n                                        imageStyle={{ height: 32, marginBottom: 0 }}\n                                    />\n                            }}\n                        />\n                    )\n                }\n                if (approvers && approvers.length > 0) {\n                    return showUserInfo(approvers);\n                }\n                return "";\n            }\n        },\n        {\n            title: "成员",\n            key: "members",\n            dataIndex: "members",\n            span: 4,\n            render: (members: memberDataType[]) => {\n                if ((isAdmin || isApprover) && updateMode) {\n                    return (\n                        <>\n                            <Form className={styles.updateForm} form={form} initialValues={{ members: projectDetailInfo.members }}>\n                                <Form.List name="members" key="membersFormList">\n                                    {(fields, { add, remove }) => (\n                                        <>\n                                            <Input.Search\n                                                style={{ width: \'30%\', marginBottom: 5 }}\n                                                placeholder="输入ksso账号即可判断该用户是否拥有权限"\n                                                onSearch={(ksso: string) => {\n                                                    checkMemberPermissionHandler(detailId, ksso);\n                                                }}\n                                            />\n                                            {fields.map(({ key, name, fieldKey, ...restField }) => (\n                                                <Space\n                                                    key={key}\n                                                    style={{ display: "flex" }}\n                                                    align="baseline"\n                                                >\n                                                    <Form.Item\n                                                        {...restField}\n                                                        name={[name, "id"]}\n                                                        fieldKey={[fieldKey, "id"]}\n                                                        rules={[{ required: true, message: "请选择用户" }]}\n                                                    >\n                                                        <Select\n                                                            style={{ width: \'18.75rem\' }}\n                                                            onChange={(userId: number) => { checkCurrentSelectInForm(userId, name); }}\n                                                            showSearch\n                                                            placeholder="请选择用户"\n                                                            filterOption={(input: any, option: any) => {\n                                                                return (\n                                                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                                                );\n                                                            }}\n                                                        >\n                                                            {userOptionForSelect}\n                                                        </Select>\n                                                    </Form.Item>\n                                                    <Form.Item\n                                                        {...restField}\n                                                        name={[name, "accessLevel"]}\n                                                        fieldKey={[fieldKey, "accessLevel"]}\n                                                        rules={[{ required: true, message: "请选择用户权限" }]}\n                                                    >\n                                                        <Select\n                                                            placeholder="请选择用户权限"\n                                                            style={{ width: \'12.5rem\' }}\n                                                        >\n                                                            {accessLevelOptionForRepository}\n                                                        </Select>\n                                                    </Form.Item>\n                                                    <MinusCircleOutlined onClick={() => {\n                                                        remove(name);\n                                                    }\n                                                    } />\n                                                </Space>\n                                            ))}\n                                            <Form.Item style={{ width: \'35%\' }}>\n                                                <Button\n                                                    type="dashed"\n                                                    onClick={() => add({ id: undefined, accessLevel: 20 })}\n                                                    block\n                                                >\n                                                    添加\n                                                </Button>\n                                            </Form.Item>\n                                        </>\n                                    )}\n                                </Form.List>\n                            </Form>\n                        </>\n                    )\n                }\n                if (requestMembersStatus) {\n                    return showUserInfo(members, inheritedMembers);\n                }\n                return <Button onClick={() => getProjectMembersHandler(detailId)}>获取成员</Button>\n            }\n        },\n        {\n            title: "变更记录",\n            key: "recordHistory",\n            span: 4,\n            render: () => {\n                return (\n                    <Button onClick={() => { setHistoryVisible(true) }}>\n                        变更记录\n                    </Button>)\n            },\n            hideInDescriptions: !hasPermission(\'gm:repository:record:page\')\n        },\n    ]\n\n    /**\n     * 仓库的详情渲染方法\n     * @param record 详情数据\n     * @returns\n     */\n    const projectDetailInfoRender = (record: projectDetailDataType) => {\n        return (\n            <>\n                <ProDescriptions bordered size="small" column={4} title={`${record.name}的基本信息`}\n                    actionRef={actionRef}\n                    dataSource={record}\n                    loading={dataLoading}\n                    labelStyle={{ width: \'115px\', textAlign: \'end\', padding: \'5px 4px 8px 0px\', verticalAlign: \'top\' }}\n                    className="gs_description"\n                    extra={(isAdmin || isApprover) && hasPermission(\'gm:repository:update\') ?\n                        <>\n                            <Button type="primary" onClick={() => { updateButtonClickHandler(updateMode) }} loading={updateLoading}>\n                                {!updateMode ? "编辑" : "取消"}\n                            </Button>\n                            {updateMode\n                                ?\n                                <Button type="primary" onClick={() => setConfirmVisible(true)} loading={submitLoading}>保存</Button>\n                                : null\n                            }\n                        </>\n                        : null}\n                    columns={coulumn}\n                 />\n            </>\n        )\n    }\n\n    /**\n     * 将数据转化为Select的Option\n     * @param repoList 仓库列表\n     * @param updateState 对应的state Hook\n     */\n    const dataToSelectOption = async (repoList: repositoryBasicDataType[], updateState: any) => {\n        const optionList: any[] = [];\n        const repositoryIdMapToCodeReviewState: Record<number, number> = {};\n        repoList.map((item: repositoryBasicDataType) => {\n            repositoryIdMapToCodeReviewState[item.id] = item.codeReviewState;\n            return optionList.push(\n                <Option key={item.repositoryUrl}\n                    title={item.name}\n                    value={item.id}\n                    disabled={false}\n                >\n                    {`${item.name}(${item.repositoryUrl})`}\n                </Option>\n            )\n        });\n        if (Object.keys(repoIdAndCodeReviewStateMap).length === 0) {\n            setRepoIdAndCodeReviewStateMap(repositoryIdMapToCodeReviewState);\n        }\n        updateState(optionList);\n    };\n\n    /**\n     * 获取仓库列表,用于子仓和依赖仓的选择\n     */\n    const getRepositoryListHandler = async () => {\n        const response = await RequestUtils(getRepositoryListInGM, undefined, { msg: \'获取仓库列表\' });\n        if (response.success) {\n            setRepositoryList(response.data);\n            if (slaveRepositoriesList.length === 0) {\n                dataToSelectOption(response.data, setSlaveRepositoriesList);\n            }\n            if (dependencyRepositoriesList.length === 0) {\n                dataToSelectOption(response.data, setDependencyRepositoriesList);\n            }\n        }\n    }\n\n    /**\n     * 获取project详情\n     * @param projectId\n     * @returns\n     */\n    const getProjectDetailHandler = async (projectId: number) => {\n        const response = await RequestUtils(getProjectDetail, projectId, { msg: \'获取project详情\' });\n        if (response.success) {\n            const slaveRepoId2PrefixTemp = {};\n            const { approvers, slaveRepositories, dependencyRepositories } = response.data;\n            slaveRepositories.forEach((item: repositoryBasicDataType) => {\n                slaveRepoId2PrefixTemp[item.id] = item.prefix;\n            });\n            setSlaveRepoId2Prefix(slaveRepoId2PrefixTemp);\n\n            // 负责人的targetKeys,数据规约是string类型数组\n            const approversIdList: string[] = [];\n            approvers.map((item: memberDataType) => {\n                return approversIdList.push(item.id.toString());\n            });\n            // 设置相关穿梭框的targetKeys\n            setTargetKeysForTransfer(approversIdList);\n            setTargetKeysForTransferRollback(approversIdList);\n\n            // 遍历用户列表,判断当前用户是否为负责人,若是可以提供编辑入口\n            const groupAllApprovers = await updateGroupApproverState(response.data.groupId);\n            const allApprovers = [...approvers, ...groupAllApprovers]\n            const userInfo = allApprovers.find((item: memberDataType) => item.id === currentUserId);\n            setIsApprover(!!userInfo);\n\n            // 将已有的子仓和依赖仓id记录起来,用于校验用户重复选择\n            const slaveRepoIds: number[] = [];\n            const dependencyRepoIds: number[] = [];\n            slaveRepositories.map((item: repositoryBasicDataType) => { return slaveRepoIds.push(item.id) });\n            dependencyRepositories.map((item: repositoryBasicDataType) => { return dependencyRepoIds.push(item.id) });\n\n            // 设置代码检视开关值\n            setCodeReviewStateValue(response.data.codeReviewState);\n            setProjectDetailInfo({ ...response.data });\n            setReload(!reload);\n            return true;\n        }\n        return false;\n    }\n\n    useEffect(() => {\n        if (detailDrawerVisible) {\n            getLabelList(labelTypeStatusMap.repositoryManage.code);\n        }\n    }, [detailId])\n\n    useEffect(() => {\n        if (reload && detailDrawerVisible) {\n            setDataLoading(true);\n            setRequestMembersStatus(false);\n            getProjectDetailHandler(detailId).finally(() => {\n                setDataLoading(false);\n            });\n            form.resetFields();\n        }\n    }, [reload, detailDrawerVisible])\n\n    // 若url中的id发生改变,重新请求数据\n    useEffect(() => {\n        setUpdateMode(false);\n        setReload(true);\n    }, [detailId])\n\n    // 判断是否为编辑模式,如果是编辑模式要获取用户列表\n    useEffect(() => {\n        if (updateMode) {\n            setDataLoading(true);\n            const getUserPromise = userList.length === 0 ? getUserListHandler() : Promise.resolve();\n            const getRepoPromise = slaveRepositoriesList.length === 0 || dependencyRepositoriesList.length === 0 ? getRepositoryListHandler() : Promise.resolve();\n            Promise.all([getUserPromise, getRepoPromise, getAndSetOpenApiList(), getAndSetCollection()])\n                .finally(() => {\n                    setDataLoading(false);\n                });\n        }\n    }, [updateMode, detailId])\n\n    return (\n        <>\n            <Drawer\n                title="项目详情"\n                placement="right"\n                closable\n                width="100%"\n                className="detailDrawer"\n                extra={<DrawerCollapseBtn />}\n                onClose={closeDetailDrawer}\n                visible={detailDrawerVisible}\n                mask={false}\n                destroyOnClose\n            >\n                {detailDrawerVisible ?\n                    <>\n                        <Card className="gs_descriptionInCard">\n                            <div>\n                                {projectDetailInfoRender(projectDetailInfo)}\n                            </div>\n                        </Card>\n                        <Modal\n                            visible={confirmVisible}\n                            title="提示"\n                            onOk={submitHandler}\n                            confirmLoading={submitLoading}\n                            onCancel={() => setConfirmVisible(false)}\n                            width={gsModalSize}\n                            destroyOnClose\n                        >\n                            <Form form={form} >\n                                <FormItem name="modifyDescription" rules={[{ required: true, message: "修改描述不能为空!" }]}>\n                                    <Input.TextArea placeholder="请输入修改描述" maxLength={1000} showCount />\n                                </FormItem>\n                            </Form>\n                        </Modal>\n                    </>\n                    :\n                    null\n                }\n            </Drawer>\n            {historyVisible ?\n                <HistoryDrawer\n                    historyVisible={historyVisible}\n                    closeHistoryDrawer={() => setHistoryVisible(false)}\n                    repositoryId={projectDetailInfo.id}\n                />\n                :\n                null\n            }\n        </>\n    )\n}\n\nexport default ProjectDetail;\n',
  },
  newFile: {
    fileName: "src/pages/gitManage/repositoryManage/project/components/projectDetail.tsx",
    content:
      "import React, { useState, useRef, useEffect } from 'react';\nimport { Button, Form, Input, Select, message, Transfer, Space, Card, Modal, Empty, Drawer, Tooltip, Affix } from 'antd';\nimport ProDescriptions from '@ant-design/pro-descriptions';\nimport type { ProDescriptionsActionType } from '@ant-design/pro-descriptions';\nimport {\n  accessLevelStatusMap,\n  accessLevelValueEnum,\n  checkTypeStatusMap,\n  commonOpenStateValueEnum,\n  commonStateValueEnum,\n  groupVisibilityLevelValueEnum,\n  labelTypeStatusMap,\n  purposeTypeValueEnum,\n} from '@/utils/DataEnum';\nimport {\n  checkMemberPermission,\n  getGmOpenApiList,\n  getProjectDetail,\n  getProjectInheritedMembers,\n  getProjectMembers,\n  updateProjectDetail,\n} from '../service';\nimport { RequestUtils } from '@/utils/request';\nimport type { projectDetailDataType, repositoryBasicDataType, updateDetailParamType } from '../data';\nimport Label from '@/components/KLabel';\nimport { getLabelListByTypeId, getUserListInGM, getRepositoryListInGM, getUserInfo, checkUserAdminRole } from '@/utils/commonRequest';\nimport styles from './index.less';\nimport { MinusCircleOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport type { labelDataType, memberDataType, openApiDataType } from '../../data';\nimport type { transferDataSourceDataType } from '../../data';\nimport { projectDetailUrl } from '@/utils/commonUrl';\nimport HistoryDrawer from './historyDrawer';\nimport { Link } from 'umi';\nimport { getNotification } from '../../components/conflictNotifaction';\nimport type { commonPropsDataType, dataPropsDataType, formItemPropsDataType } from '../../group/data';\nimport { ReactComponent as EmptyData } from '@/assets/emptyDataSmall.svg';\nimport {\n  accessLevelOptionForRepository,\n  checkIrregularMemberHandler,\n  checkVisibilityAndPurposeTypeHandler,\n  excludeSpacialMember,\n  showIrregularMemberListModal,\n  showUserInfo,\n  validateMember,\n  getAddAndDeleteMembers,\n} from '../../common';\nimport { gsModalSize } from '@/utils/commonVariable';\nimport DrawerCollapseBtn from '@/components/DetailDrawerCollapse';\nimport { cloneDeep, isEqual } from 'lodash';\nimport { FrontendError } from '@/constants/error';\nimport { gitManageFieldTips } from '@/pages/gitManage/const/tips';\nimport { useGroupApprover } from '../../hooks/useGroupApprover';\nimport type { ICollection } from '@/apis/modules/collection/module';\nimport { getCollectionList } from '@/apis/modules/collection';\nimport { hasPermission } from '@/utils/authority';\n\nconst initUpdateParam = {\n  id: 0,\n  userId: 0,\n  version: 0,\n  branchControl: 0,\n  visibilityLevel: 0,\n  state: 0,\n  codeReviewState: 0,\n  groupVisibilityLevel: 1,\n  description: '',\n  modifyDescription: '',\n  addLabels: [],\n  deleteLabels: [],\n  addDependencyRepositories: [],\n  deleteDependencyRepositories: [],\n  addApprovers: [],\n  deleteApprovers: [],\n  addMembers: [],\n  deleteMembers: [],\n  addSlaveRepositories: [],\n  deleteSlaveRepositories: [],\n  type: 0,\n};\n\ninterface projectDetailProps {\n  detailDrawerVisible: boolean;\n  detailId: number;\n  closeDetailDrawer: any;\n}\n\nconst ProjectDetail: React.FC<projectDetailProps> = (props: any) => {\n  const { detailDrawerVisible, detailId, closeDetailDrawer } = props;\n  // antd相关\n  const [form] = Form.useForm();\n  const FormItem = Form.Item;\n  const { Option } = Select;\n  const { TextArea } = Input;\n  const actionRef = useRef<ProDescriptionsActionType>();\n\n  // 常用state\n  const [updateLoading, setUpdateLoading] = useState<boolean>(false);\n  const [submitLoading, setSubmitLoading] = useState<boolean>(false);\n  const [dataLoading, setDataLoading] = useState<boolean>(false);\n  const [updateMode, setUpdateMode] = useState<boolean>(false);\n  const [reload, setReload] = useState<boolean>(true);\n  const [projectDetailInfo, setProjectDetailInfo] = useState<projectDetailDataType>({\n    id: 0,\n    applyUsername: '',\n    applyUserNickname: '',\n    approvers: [],\n    branchControl: 0,\n    dependencyRepositories: [],\n    description: '',\n    groupId: 0,\n    groupName: '',\n    labels: [],\n    members: [],\n    name: '',\n    projectId: 0,\n    repositoryUrl: '',\n    repositoryHttpUrl: '',\n    slaveRepositories: [],\n    state: 0,\n    type: 0,\n    version: 0,\n    visibilityLevel: 0,\n    codeReviewState: 0,\n    groupVisibilityLevel: 1,\n  });\n  const [openApiList, setOpenApiList] = useState<openApiDataType[]>([]);\n  const [collectionList, setCollectionList] = useState<ICollection[]>([]);\n  const [repositoryList, setRepositoryList] = useState<repositoryBasicDataType[]>([]);\n  const [slaveRepositoriesList, setSlaveRepositoriesList] = useState<any[]>([]);\n  const [dependencyRepositoriesList, setDependencyRepositoriesList] = useState<any[]>([]);\n  const [labelList, setLabelList] = useState<labelDataType[]>([]);\n  const [labelOptionList, setLabelOptionList] = useState<labelDataType[]>([]);\n  // 所有用户列表数据源\n  const [userList, setUserList] = useState<transferDataSourceDataType[]>([]);\n  const [userOptionForSelect, setUserOptionForSelect] = useState<any[]>([]);\n  // 负责人穿梭框的targetKeys,为用户id数组,但id格式需要转string类型\n  const [targetKeysForTransfer, setTargetKeysForTransfer] = useState<string[]>([]);\n  // 用于负责人和成员穿梭框的targetKeys回滚\n  const [targetKeysForTransferRollback, setTargetKeysForTransferRollback] = useState<string[]>([]);\n  // 更新接口需要的参数\n  const [updateProjectDetailParam, setUpdateProjectDetailParam] = useState<updateDetailParamType>({\n    id: 0,\n    userId: 0,\n    version: 0,\n    branchControl: 0,\n    visibilityLevel: 0,\n    state: 0,\n    description: '',\n    modifyDescription: '',\n    addLabels: [],\n    deleteLabels: [],\n    codeReviewState: 0,\n    addDependencyRepositories: [],\n    deleteDependencyRepositories: [],\n    addApprovers: [],\n    deleteApprovers: [],\n    addMembers: [],\n    deleteMembers: [],\n    addSlaveRepositories: [],\n    deleteSlaveRepositories: [],\n    type: 0,\n  });\n  const [isApprover, setIsApprover] = useState<boolean>(false);\n  const [confirmVisible, setConfirmVisible] = useState<boolean>(false);\n  const [historyVisible, setHistoryVisible] = useState<boolean>(false);\n  // 判断当前是否已经请求过成员列表\n  const [requestMembersStatus, setRequestMembersStatus] = useState<boolean>(false);\n  // 继承来的成员列表\n  const [inheritedMembers, setInheritedMembers] = useState<memberDataType[]>([]);\n  // 仓库id和代码检视开关的映射类,即{id: state, ...}\n  const [repoIdAndCodeReviewStateMap, setRepoIdAndCodeReviewStateMap] = useState<Record<number, number>>({});\n  // 当前选择的代码检视开关值,用于提交修改时判断子仓相对路径是否需要填写\n  const [codeReviewStateValue, setCodeReviewStateValue] = useState<number>(0);\n  // 子仓id和其相对路径的映射\n  const [slaveRepoId2Prefix, setSlaveRepoId2Prefix] = useState<Record<number, string | null>>({});\n  // 用户信息\n  const user = getUserInfo();\n  const currentUserId = user.id;\n  const isAdmin: boolean = checkUserAdminRole(user);\n  const { updateGroupApproverState } = useGroupApprover();\n\n  const visibilityLevelOptionForSelect: any[] = [\n    <Option value={1} key=\"Private\" disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 1 : false}>\n      Private\n    </Option>,\n    <Option value={2} key=\"Internal\" disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 2 : false}>\n      Internal\n    </Option>,\n    <Option value={3} key=\"Public\" disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 3 : false}>\n      Public\n    </Option>,\n  ];\n\n  const stateOptionForSelect: any[] = [\n    <Option value={0} key=\"disable\">\n      禁用\n    </Option>,\n    <Option value={1} key=\"enable\">\n      启用\n    </Option>,\n  ];\n\n  const switchOptionForSelect: any[] = [\n    <Option value={0} key=\"close\">\n      关闭\n    </Option>,\n    <Option value={1} key=\"open\">\n      开启\n    </Option>,\n  ];\n\n  // ----------通用方法----------\n\n  // 处理取消编辑的必要回滚,主要针对非form表单可控的组件,如穿梭框\n  const rollbackData = () => {\n    // 初始化掉updateParam,防止数据错乱\n    setUpdateProjectDetailParam(cloneDeep(initUpdateParam));\n    setTargetKeysForTransfer(targetKeysForTransferRollback);\n  };\n\n  /**\n   * 获取项目继承自群组的成员\n   * @param projectId 仓库id\n   * @returns\n   */\n  const getProjectInheritedMembersHandler = async (projectId: number) => {\n    const response = await RequestUtils(getProjectInheritedMembers, projectId, { msg: '获取从群组继承的成员' });\n    if (response.data) {\n      const inheritedMemberIdList: number[] = [];\n      response.data.forEach((item: memberDataType) => inheritedMemberIdList.push(item.id));\n      const excludeCreator: memberDataType[] = excludeSpacialMember(response.data);\n      setInheritedMembers(excludeCreator);\n      return excludeCreator;\n    }\n    return [];\n  };\n\n  /**\n   * 获取群组成员\n   * @param projectId 项目id\n   */\n  const getProjectMembersHandler = async (projectId: number) => {\n    try {\n      setDataLoading(true);\n      const response = await RequestUtils(getProjectMembers, projectId, { msg: '获取项目成员' });\n      await getProjectInheritedMembersHandler(projectId);\n      if (response.success) {\n        // 需要从member数组里面排除掉创建人,不进行显示\n        const excludeProjectCreater: memberDataType[] = excludeSpacialMember(response.data);\n        // 将已有的用户id记录起来,用于校验用户重复选择\n        const memberIds: number[] = [];\n        excludeProjectCreater.forEach((item) => {\n          return memberIds.push(item.id);\n        });\n        setProjectDetailInfo({ ...projectDetailInfo, members: excludeProjectCreater });\n        setRequestMembersStatus(true);\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setDataLoading(false);\n    }\n  };\n\n  /**\n   * 判断当前按钮点击的状态,若是编辑状态时点击,说明要回滚数据\n   * @param updateStatus 编辑状态的标志位\n   */\n  const updateButtonClickHandler = async (updateStatus: boolean) => {\n    setUpdateLoading(true);\n    if (updateStatus) {\n      // 若取消编辑,那么重置form表单的内容\n      rollbackData();\n      form.resetFields();\n    }\n    if (!requestMembersStatus) {\n      await getProjectMembersHandler(detailId);\n    }\n    const { version, id } = projectDetailInfo;\n    // 将必填的字段传入update接口参数state\n    setUpdateProjectDetailParam({ ...updateProjectDetailParam, version, id, userId: currentUserId });\n    setUpdateMode(!updateMode);\n    setUpdateLoading(false);\n  };\n\n  /**\n   * 根据穿梭框的targetKey数组或FormList的用户id反查用户列表,得到用户对象\n   * @param item 用户id数组或用户id\n   * @returns\n   */\n  const getItemFromUserList = (param: string[] | number) => {\n    // 如果是ids,说明是穿梭框的请求\n    if (Array.isArray(param)) {\n      if (param && param.length > 0) {\n        const filterList = userList.filter((item) => param.includes(item.key));\n        const userInfoList: memberDataType[] = [];\n        filterList.map((item) => {\n          return userInfoList.push({\n            id: +item.key,\n            nickname: item.title,\n            username: item.description,\n          });\n        });\n        return userInfoList;\n      }\n      return [];\n    }\n    // 如果是单id,说明是成员FormList的请求,只返回一个\n    const userInfo = userList.find((item) => item.key === param.toString());\n    if (userInfo) {\n      // 将transferDataType转化为memberDataType\n      return { id: +userInfo.key, username: userInfo.description, nickname: userInfo.title };\n    }\n    return {};\n  };\n\n  const getItemFromLabelList = (param: number) => {\n    const labelInfo = labelList.find((item) => item.id === param);\n    if (labelInfo) {\n      return labelInfo;\n    }\n    return undefined;\n  };\n\n  /**\n   * 从仓库列表获取对应的仓库信息\n   * @param param\n   * @returns\n   */\n  const getItemFromRepositoryList = (param: number) => {\n    const repositoryInfo = repositoryList.find((item) => item.id === param);\n    if (repositoryInfo) {\n      return repositoryInfo;\n    }\n    return undefined;\n  };\n\n  /**\n   * 判断选中的标签是否在初始数据中,若不存在说明是新增的,需要添加进update参数的addLabels中\n   * @param labelId 当前选中的标签ID\n   */\n  const selectLabelHandler = (labelId: number) => {\n    const { addLabels } = updateProjectDetailParam;\n    // 如果不在初始detail和addLabel里面,说明是新增的\n    if (!projectDetailInfo.labels.find((item) => item.id === labelId) && !addLabels?.find((item) => item.id === labelId)) {\n      const labelInfo: labelDataType | undefined = getItemFromLabelList(labelId);\n      // 判断是否为空,过滤非法数据\n      if (labelInfo) {\n        addLabels?.push(labelInfo);\n        setUpdateProjectDetailParam({ ...updateProjectDetailParam, addLabels });\n      }\n    }\n  };\n\n  /**\n   * 提交前对标签进行数据处理\n   * @param labelInForm form表单提交上来的label值\n   * @returns\n   */\n  const beforeRequestLabelHandler = async (labelInForm: number[]) => {\n    // 初始的label数据\n    const labelFromGroupDetail = projectDetailInfo.labels;\n    // 因为添加的标签在Select选中的时候就已经添加了,因此需要使用该值和初始的标签数据进行比对以得到哪些标签被删除\n    const { deleteLabels, addLabels } = updateProjectDetailParam;\n\n    // 遍历初始的数据,查找出属于删除的标签\n    labelFromGroupDetail.map((labelInDetail: labelDataType) => {\n      // 若表单值数组里存在当前初始标签值,说明该标签未处理,跳过\n      // 若表单值数组里当前值在add里面,说明该标签是新增的,跳过\n      // 若表单值数组里当前值在delete里面,说明该标签已经记录删除了,跳过\n      if (\n        labelInForm.find(\n          (labelId: number) =>\n            labelInDetail.id === labelId ||\n            addLabels?.find((labelInParam: labelDataType) => labelInDetail.id === labelInParam.id) ||\n            deleteLabels?.find((labelInParam: labelDataType) => labelInDetail.id === labelInParam.id),\n        )\n      ) {\n        return '';\n      }\n      // 以上条件都不满足,代表当前数据是被删除的,需要加进delete数组里\n      return deleteLabels?.push(labelInDetail);\n    });\n\n    // 判断addLabel里面是否存在于表单值里,若不存在说明已经删除了,需要从addLabel剔除\n    let addLabelsTemp = addLabels || [];\n    addLabels?.map((labelInParam: labelDataType) => {\n      if (!labelInForm.find((labelId: number) => labelInParam.id === labelId)) {\n        addLabelsTemp = addLabelsTemp.filter((labelInfo: labelDataType) => labelInfo.id !== labelInParam.id);\n        return true;\n      }\n      return '';\n    });\n    return { deleteLabels, addLabels: addLabelsTemp };\n  };\n\n  /**\n   * 提交前对仓库信息进行数据处理\n   * @param repositoryInForm 修改表单里的仓库信息\n   * @param repoType 仓库类型:子仓/依赖仓\n   * @returns\n   */\n  const beforeRequestRepositoryHandler = async (repositoryInForm: repositoryBasicDataType[], repoType: string) => {\n    if (repoType === 'slave') {\n      const slaveRepositories: repositoryBasicDataType[] = [];\n      // 表单内的子仓相对路径是否和详情的子仓相对路径相同\n      let isSameWithProjectDetail = repositoryInForm.length === projectDetailInfo.slaveRepositories.length;\n      repositoryInForm.forEach((item: repositoryBasicDataType) => {\n        const repositoryInfo: any = getItemFromRepositoryList(item.id);\n        slaveRepositories.push({ ...repositoryInfo, prefix: item.prefix });\n        if (isSameWithProjectDetail) {\n          const slaveRepoInProjectDetail = projectDetailInfo.slaveRepositories.find((slaveRepo) => item.id === slaveRepo.id);\n          if (!slaveRepoInProjectDetail || slaveRepoInProjectDetail.prefix !== item.prefix) {\n            isSameWithProjectDetail = false;\n          }\n        }\n      });\n      // 未修改子仓返回null\n      if (isSameWithProjectDetail) {\n        return null;\n      }\n      return slaveRepositories;\n    }\n\n    let dependencyRepoInDetailInfo = cloneDeep(projectDetailInfo.dependencyRepositories);\n    const addRepositories: repositoryBasicDataType[] = [];\n    repositoryInForm.forEach((dependencyRepo: repositoryBasicDataType) => {\n      const theSameMember = dependencyRepoInDetailInfo.find((item) => item.id === dependencyRepo.id);\n      if (theSameMember?.id === dependencyRepo.id) {\n        dependencyRepoInDetailInfo = dependencyRepoInDetailInfo.filter((item) => item.id !== dependencyRepo.id);\n        return;\n      }\n      const repositoryInfo: any = getItemFromRepositoryList(dependencyRepo.id);\n      addRepositories.push(repositoryInfo);\n    });\n    const deleteRepositories = dependencyRepoInDetailInfo;\n    return { addDependencyRepositories: addRepositories, deleteDependencyRepositories: deleteRepositories };\n  };\n\n  /**\n   * 获取openApi参数值\n   * @param openApiIds 已选中的openApiId\n   * @returns openApiDataType\n   */\n  const beforeRequestOpenApiHandler = (openApiIds: number[]) => {\n    if (\n      isEqual(\n        openApiIds,\n        (projectDetailInfo?.openApiApps || []).map((openApi) => openApi.id),\n      )\n    ) {\n      return null;\n    }\n    return openApiList.filter((item) => (openApiIds || []).includes(item.id));\n  };\n\n  /**\n   * 获取openApi参数值\n   * @param openApiIds 已选中的openApiId\n   * @returns openApiDataType\n   */\n  const beforeRequestCollectionHandler = (collectionIds: number[]) => {\n    if (\n      isEqual(\n        collectionIds,\n        (projectDetailInfo?.gsCollects || []).map((collection) => collection.id),\n      )\n    ) {\n      return null;\n    }\n    return collectionList.filter((item) => (collectionIds || []).includes(item.id));\n  };\n\n  /**\n   * 判断当前输入的用户是否拥有权限\n   * @param repositoryId 仓库id\n   * @param username 用户ksso\n   * @returns true: 拥有权限或出现异常;false: 没有权限可以继续流程\n   */\n  const checkMemberPermissionHandler = async (repositoryId: number, username: string) => {\n    if (username === '' || !username) {\n      message.warning('ksso不能为空!');\n      return;\n    }\n    try {\n      const response = await RequestUtils(checkMemberPermission, { id: repositoryId, username }, { msg: '校验选择的用户是否有权限' });\n      if (response.success) {\n        // 无返回说明没有权限,可以添加\n        if (response.data === null) {\n          message.info('该用户在当前仓库下没有权限!');\n          return;\n        }\n        // 有返回说明权限已存在,无法添加并提示用户\n        if (response.data.id && response.data.username) {\n          message.warning(`该用户在当前仓库下已经有${accessLevelValueEnum[response.data.accessLevel].text || ''}权限了!`);\n          return;\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      message.error('校验用户权限时出现异常,若要添加该用户可能会失败!');\n    }\n  };\n\n  /**\n   * 获取当前用户是否已选择\n   * @param userId\n   */\n  const checkCurrentSelectInForm = (userId: number, index: number) => {\n    const membersFormValues = form.getFieldValue('members');\n    // 如果已选择该用户,不让其选择\n    if (membersFormValues.filter((item: any) => item.id === userId).length > 1) {\n      message.warning('该用户已被选择,请勿重复选择');\n      membersFormValues[index].id = null;\n      form.setFieldsValue({ members: membersFormValues });\n    }\n  };\n\n  /**\n   * 获取当前仓库是否已选择\n   * @param repoId\n   * @param type 类型(子仓/依赖仓)\n   */\n  const checkCurrentRepoSelectInForm = (repoId: number, type: string, index: number) => {\n    const formProperty = type === 'slave' ? 'slaveRepositories' : 'dependencyRepositories';\n    const typeFormValues = form.getFieldValue(formProperty);\n\n    if (typeFormValues.filter((item: any) => item.id === repoId).length > 1) {\n      message.warning('该仓库已被选择,请勿重复选择');\n      typeFormValues[index].id = null;\n      form.setFieldsValue({ formProperty: typeFormValues });\n    }\n  };\n\n  /**\n   * 处理提交的方法\n   */\n  const submitHandler = async () => {\n    try {\n      const formValues = await form.validateFields();\n      setSubmitLoading(true);\n\n      // 处理标签数据\n      const labelData = await beforeRequestLabelHandler(formValues.label);\n      // 处理成员数据,判断哪些是新增的,哪些是删除的\n      const memberData = await getAddAndDeleteMembers(formValues.members, projectDetailInfo.members, getItemFromUserList);\n\n      await checkVisibilityAndPurposeTypeHandler({\n        purposeType: formValues.type,\n        visibilityLevel: formValues.visibilityLevel || projectDetailInfo.visibilityLevel,\n        groupId: projectDetailInfo?.groupId,\n      });\n\n      const errorContent: any[] = [];\n      // 只校验addMembers的权限是否存在冲突,已存在的不校验\n      if (memberData.addMembers && memberData.addMembers.length > 0) {\n        await checkIrregularMemberHandler({\n          domain: projectDetailInfo.repositoryHttpUrl,\n          members: memberData.addMembers,\n          purposeType: formValues.type,\n          visibilityLevel: formValues.visibilityLevel || projectDetailInfo.visibilityLevel,\n          reviserId: currentUserId,\n          checkType: checkTypeStatusMap.repository.code,\n        });\n\n        const conflictMembers = await validateMember('permission', projectDetailInfo.repositoryUrl, memberData.addMembers, '成员', false);\n        if (!conflictMembers) {\n          setSubmitLoading(false);\n          return;\n        }\n        // 不是false也不是true,说明是有dom对象的,将其加进来\n        if (conflictMembers !== true) {\n          errorContent.push(conflictMembers);\n        }\n      }\n      if (errorContent.length > 0) {\n        getNotification('提交申请时发生错误!', errorContent, 8);\n        setSubmitLoading(false);\n        return;\n      }\n\n      // 处理子仓数据\n      const slaveRepositories = await beforeRequestRepositoryHandler(formValues.slaveRepositories, 'slave');\n      // 处理依赖仓数据\n      const dependencyRepoData = await beforeRequestRepositoryHandler(formValues.dependencyRepositories, 'dependency');\n      const openApiApps = beforeRequestOpenApiHandler(formValues.openApiApps);\n      const gsCollects = beforeRequestCollectionHandler(formValues.gsCollects);\n\n      // 判断以下常量是否修改过,若没有修改过则不传参\n      let { description, state, visibilityLevel, branchControl, codeReviewState, type, whitelistRegex } = formValues;\n      if (whitelistRegex === projectDetailInfo.whitelistRegex) {\n        whitelistRegex = undefined;\n      }\n      description = description === projectDetailInfo.description ? undefined : description;\n      state = state === projectDetailInfo.state ? undefined : state;\n      visibilityLevel = visibilityLevel === projectDetailInfo.visibilityLevel ? undefined : visibilityLevel;\n      branchControl = branchControl === projectDetailInfo.branchControl ? undefined : branchControl;\n      codeReviewState = codeReviewState === projectDetailInfo.codeReviewState ? undefined : codeReviewState;\n      type = type === projectDetailInfo.type ? undefined : type;\n\n      // 获取构建的参数,准备发起请求\n      let requestParam: any = {};\n      setUpdateProjectDetailParam({\n        ...updateProjectDetailParam,\n        ...formValues,\n        description,\n        state,\n        visibilityLevel,\n        branchControl,\n        codeReviewState,\n        ...labelData,\n        ...memberData,\n        label: undefined,\n        members: undefined,\n        dependencyRepositories: undefined,\n        slaveRepositories,\n        ...dependencyRepoData,\n        type,\n        whitelistRegex,\n        openApiApps,\n        gsCollects,\n      });\n      // 此处使用setstate的回调函数,是为了取得最新值,否则因为异步取的还是旧值\n      setUpdateProjectDetailParam((item: any) => {\n        requestParam = item;\n        return item;\n      });\n\n      const updateProjectHandler = async () => {\n        // 发起修改请求\n        const response = await RequestUtils(updateProjectDetail, requestParam, { msg: '更新project信息' });\n        if (response.success) {\n          setUpdateMode(false);\n          setReload(true);\n          setConfirmVisible(false);\n          setUpdateProjectDetailParam(cloneDeep(initUpdateParam));\n          setRequestMembersStatus(false);\n        }\n      };\n\n      const confirmIrregularMemberModal = await showIrregularMemberListModal({\n        purposeType: formValues.type,\n        repositoryId: projectDetailInfo.id,\n      });\n\n      if (confirmIrregularMemberModal) {\n        confirmIrregularMemberModal?.update({\n          onOk: async () => {\n            await updateProjectHandler();\n          },\n        });\n      } else {\n        await updateProjectHandler();\n      }\n    } catch (e: any) {\n      // 事故多发地，输出下日志用于线上排查\n      console.log(e);\n      if (e.message === FrontendError.END_PROCESS) {\n        return;\n      }\n      const description = form.getFieldValue('modifyDescription');\n      // 如果修改原因不是空的,说明参数校验出错\n      if (description && description !== '') {\n        setConfirmVisible(false);\n        message.warning('请求出错,请检查数据是否填写正确', 3);\n      }\n    } finally {\n      setSubmitLoading(false);\n    }\n  };\n\n  /**\n   * 获取标签列表\n   * @param typeId\n   */\n  const getLabelList = async (typeId: number) => {\n    const response = await getLabelListByTypeId(typeId);\n    if (response.success) {\n      const responseData = response.data;\n      const labelOption: any[] = [];\n      responseData.map((item: labelDataType) => {\n        const colorValue = item.colorValue ? item.colorValue.slice(0, -1) : 'rgb(255, 255, 255)';\n        const backgroundColor = `${colorValue}, 0.12)`;\n        return labelOption.push(\n          <Option key={item.id} title={item.name} value={item.id} className={styles.labelSelect}>\n            <Label\n              backgroundColor={backgroundColor}\n              color={item.colorValue ? item.colorValue : '#ffffff'}\n              name={item.name ? item.name : ''}\n              maxWidth=\"100%\"\n            />\n          </Option>,\n        );\n      });\n      setLabelList(responseData);\n      setLabelOptionList(labelOption);\n    }\n  };\n\n  /**\n   * 根据type转化对应antd组件\n   */\n  const tagTypeToAntdItem = (tagType: string, formItemProps?: commonPropsDataType) => {\n    switch (tagType.toLowerCase()) {\n      case 'input':\n        return <Input {...formItemProps?.apiOption} />;\n      case 'textarea':\n        return <TextArea {...formItemProps?.apiOption} />;\n      case 'select':\n        if (!formItemProps) {\n          message.warning('未传递select组件的option和属性,Select组件将失效!');\n          // throw new Error(\"未传递select组件的option!\");\n        }\n        return <Select {...formItemProps?.apiOption}>{formItemProps ? formItemProps.selectOptions : undefined}</Select>;\n      default:\n        return null;\n    }\n  };\n\n  /**\n   * 将接口返回的内容转化为description里的文本内容和修改的表单项\n   * @param dataProps 数据基础内容,包含源数据, 枚举数据, \"标签\"行标志位\n   * @param updateCondition 更新判断条件,是否为管理员或负责人\n   * @param formItemProps antd的formitem属性\n   * @returns\n   */\n  const responseDataToContent = (dataProps: dataPropsDataType, updateCondition: boolean, formItemProps?: formItemPropsDataType) => {\n    const { responseData, dataEnum, isLabel } = dataProps;\n    let content = responseData;\n\n    // 进入编辑模式后,返回的是form表单内容\n    if (formItemProps && updateCondition && updateMode) {\n      const { fieldName, initialValue, tagType, componentProps } = formItemProps;\n      return (\n        <Form form={form} className={styles.updateForm}>\n          <FormItem name={fieldName} initialValue={initialValue}>\n            {tagTypeToAntdItem(tagType, componentProps)}\n          </FormItem>\n        </Form>\n      );\n    }\n\n    // 如果不是\"标签\"字段,则根据提供的枚举类直接返回普通文本(非编辑模式下)\n    if (!isLabel && dataEnum) {\n      const numberToObj = dataEnum[responseData];\n      if (numberToObj) {\n        if (numberToObj.text !== undefined) {\n          content = numberToObj.text;\n        }\n      }\n      return <span className=\"gs_needToWrap\">{content}</span>;\n    }\n    if (!isLabel && !dataEnum) {\n      return <span className=\"gs_needToWrap\">{content}</span>;\n    }\n    // 标签的非编辑模式返回\n    return responseData.map((item: labelDataType) => {\n      const colorValue = item.colorValue ? item.colorValue.slice(0, -1) : 'rgb(255, 255, 255)';\n      const backgroundColor = `${colorValue}, 0.12)`;\n      return (\n        <Label\n          key={item.id}\n          backgroundColor={backgroundColor}\n          color={item.colorValue ? item.colorValue : '#ffffff'}\n          name={item.name ? item.name : ''}\n        />\n      );\n    });\n  };\n\n  // ----------穿梭框相关----------\n\n  /**\n   * 格式化用户数据为穿梭框需要的格式\n   * @param list 用户列表\n   * @returns\n   */\n  const formatUserList = (list: memberDataType[]) => {\n    const formatList: transferDataSourceDataType[] = [];\n    list.forEach((item: memberDataType) => {\n      formatList.push({\n        key: item.id.toString(),\n        title: item.nickname,\n        description: item.username,\n      });\n    });\n    return formatList;\n  };\n\n  // 获取用户列表,用于成员的选择\n  const getUserListHandler = async () => {\n    const response = await RequestUtils(getUserListInGM, undefined, { msg: '获取用户列表' });\n    if (response.success) {\n      const userListFromResponse: memberDataType[] = response.data;\n      const userOption: any[] = [];\n      userListFromResponse.map((item: memberDataType) => {\n        return userOption.push(\n          <Option key={item.username} title={item.username} value={item.id} disabled={false}>\n            {`${item.nickname}(${item.username})`}\n          </Option>,\n        );\n      });\n      setUserOptionForSelect(userOption);\n      setUserList(formatUserList(response.data));\n    }\n  };\n\n  /** 获取并设置openApi值 */\n  const getAndSetOpenApiList = async () => {\n    const response = await RequestUtils(getGmOpenApiList, undefined, { msg: '获取OpenApi列表' });\n    setOpenApiList(response.success ? response.data : []);\n  };\n\n  /** 获取并设置集合 */\n  const getAndSetCollection = () => {\n    getCollectionList().then((response) => {\n      setCollectionList(response.data);\n    });\n  };\n\n  // 穿梭框的搜索判断\n  const filterOption = (inputValue: string, option: any) =>\n    option.title.indexOf(inputValue) > -1 || option.description.indexOf(inputValue) > -1;\n\n  /**\n   * 处理穿梭框数据变化,根据移动方向和原始人员列表判断是否需要加入变更参数里\n   * @param newTargetKeys 新的targetKeys数组\n   * @param direction 移动方向\n   * @param moveKeys 移动的userId\n   */\n  const handleApproversTargetKeysChange = (newTargetKeys: string[], direction: string, moveKeys: string[]) => {\n    // 如果往右移动,说明是新增负责人\n    // 需要判断用户是否已存在原始数据里,若存在说明是无意义的移动\n    const approversFromDetail: memberDataType[] = projectDetailInfo.approvers;\n    let addApproversFromParam: memberDataType[] = updateProjectDetailParam.addApprovers || [];\n    if (direction === 'right') {\n      // moveKeys只有更新的数据\n      moveKeys.map((userId: string) => {\n        if (!approversFromDetail.find((userInApprovers: memberDataType) => userInApprovers.id === +userId)) {\n          const userInfo: any = getItemFromUserList(+userId);\n          return addApproversFromParam.push(userInfo);\n        }\n        return '';\n      });\n      setUpdateProjectDetailParam({ ...updateProjectDetailParam, addApprovers: addApproversFromParam });\n    } else {\n      if (newTargetKeys.length === 0) {\n        return message.warning('不能删除所有负责人!');\n      }\n      // 要从update参数里查找到数据,用该数据filter掉已经delete的数据\n      const deleteApproversFromParam: memberDataType[] = updateProjectDetailParam.deleteApprovers || [];\n      // moveKeys只有更新的数据\n      moveKeys.map((userId: string) => {\n        // 若在初始数据中能找到当前用户ID,说明是要删除的,直接加入deleteApprovers里\n        // 若在update参数中找不到当前用户ID,说明从未删除过该用户,直接加入deleteApprovers里\n        if (\n          approversFromDetail.find((userInApprovers: memberDataType) => userInApprovers.id === +userId) &&\n          !deleteApproversFromParam.find((userInParam: memberDataType) => userInParam.id === +userId)\n        ) {\n          const userInfo: any = getItemFromUserList(+userId);\n          userInfo.accessLevel = accessLevelStatusMap.delete.code;\n          return deleteApproversFromParam.push(userInfo);\n        }\n        // 如果当前删除用户的在add参数里面也有,说明是增加后删除,只需删除掉add里面的数据即可\n        if (addApproversFromParam.find((item) => item.id === +userId)) {\n          addApproversFromParam = addApproversFromParam.filter((item) => item.id !== +userId);\n          return '';\n        }\n        return '';\n      });\n      setUpdateProjectDetailParam({\n        ...updateProjectDetailParam,\n        deleteApprovers: deleteApproversFromParam,\n        addApprovers: addApproversFromParam,\n      });\n    }\n    setTargetKeysForTransfer(newTargetKeys);\n  };\n\n  // ProDescription组件的列数据\n  const coulumn: any = [\n    {\n      title: '申请人',\n      key: 'applyUser',\n      span: 4,\n      render: (_: any, record: projectDetailDataType) => {\n        if (record.applyUsername) {\n          return (\n            <span>\n              {record.applyUserNickname}({record.applyUsername})\n            </span>\n          );\n        }\n        return <span>{record.applyUserNickname}</span>;\n      },\n    },\n    {\n      title: '名称',\n      key: 'name',\n      dataIndex: 'name',\n      span: 4,\n    },\n    {\n      title: '分支管控',\n      key: 'branchControl',\n      dataIndex: 'branchControl',\n      span: 4,\n      tooltip: gitManageFieldTips.branchControl.tooltip,\n      render: (branchControl: number) => {\n        return responseDataToContent(\n          { responseData: branchControl, dataEnum: commonStateValueEnum, isLabel: false },\n          isAdmin || isApprover,\n          {\n            fieldName: 'branchControl',\n            initialValue: branchControl,\n            tagType: 'select',\n            componentProps: {\n              selectOptions: switchOptionForSelect,\n              apiOption: {\n                style: { width: '30%' },\n                onChange: (value: any) => {\n                  setUpdateProjectDetailParam({ ...updateProjectDetailParam, branchControl: value });\n                },\n              },\n            },\n          },\n        );\n      },\n    },\n    {\n      title: 'commit 校验',\n      key: 'commitSpecificationState',\n      dataIndex: 'commitSpecificationState',\n      span: 4,\n      tooltip: gitManageFieldTips.commitSpecificationState.tooltip,\n      render: (_value) => {\n        return responseDataToContent({ responseData: _value, dataEnum: commonStateValueEnum, isLabel: false }, isAdmin || isApprover, {\n          fieldName: 'commitSpecificationState',\n          initialValue: _value,\n          tagType: 'select',\n          componentProps: {\n            selectOptions: switchOptionForSelect,\n            apiOption: {\n              style: { width: '30%' },\n              onChange: (value: any) => {\n                setUpdateProjectDetailParam({ ...updateProjectDetailParam, commitSpecificationState: value });\n              },\n            },\n          },\n        });\n      },\n    },\n    {\n      title: '分支管控正则',\n      key: 'whitelistRegex',\n      dataIndex: 'whitelistRegex',\n      span: 4,\n      tooltip: gitManageFieldTips.whitelistRegex.tooltip,\n      render: (whitelistRegex: string) => {\n        return responseDataToContent({ responseData: whitelistRegex, dataEnum: undefined, isLabel: false }, isAdmin || isApprover, {\n          fieldName: 'whitelistRegex',\n          initialValue: whitelistRegex,\n          tagType: 'input',\n          componentProps: {\n            apiOption: {\n              style: { width: '30%' },\n              onBlur: () => {\n                setUpdateProjectDetailParam({\n                  ...updateProjectDetailParam,\n                  whitelistRegex: form.getFieldValue('whitelistRegex')?.trim(),\n                });\n              },\n              placeholder: gitManageFieldTips.whitelistRegex.placeholder,\n            },\n          },\n        });\n      },\n    },\n    {\n      title: '代码检视开关',\n      key: 'codeReviewState',\n      dataIndex: 'codeReviewState',\n      span: 4,\n      tooltip: '',\n      render: (codeReviewState: number) => {\n        return responseDataToContent(\n          { responseData: codeReviewState, dataEnum: commonOpenStateValueEnum, isLabel: false },\n          isAdmin || isApprover,\n          {\n            fieldName: 'codeReviewState',\n            initialValue: codeReviewState,\n            tagType: 'select',\n            componentProps: {\n              selectOptions: switchOptionForSelect,\n              apiOption: {\n                style: { width: '30%' },\n                onChange: (value: any) => {\n                  setUpdateProjectDetailParam({ ...updateProjectDetailParam, codeReviewState: value });\n                  setCodeReviewStateValue(value);\n                },\n              },\n            },\n          },\n        );\n      },\n    },\n    {\n      title: 'projectID',\n      key: 'projectId',\n      dataIndex: 'projectId',\n      span: 4,\n    },\n    {\n      title: '所属group',\n      key: 'groupName',\n      dataIndex: 'groupName',\n      span: 4,\n    },\n    {\n      title: '可见等级',\n      key: 'visibilityLevel',\n      dataIndex: 'visibilityLevel',\n      span: 4,\n      render: (visibilityLevel: number) => {\n        return responseDataToContent({ responseData: visibilityLevel, dataEnum: groupVisibilityLevelValueEnum, isLabel: false }, isAdmin, {\n          fieldName: 'visibilityLevel',\n          initialValue: visibilityLevel,\n          tagType: 'select',\n          componentProps: {\n            selectOptions: visibilityLevelOptionForSelect,\n            apiOption: {\n              style: { width: '30%' },\n              onChange: (value: any) => {\n                setUpdateProjectDetailParam({ ...updateProjectDetailParam, visibilityLevel: value });\n              },\n            },\n          },\n        });\n      },\n    },\n    {\n      title: 'project用途',\n      key: 'type',\n      dataIndex: 'type',\n      span: 4,\n      render: (type: number) => {\n        return responseDataToContent({ responseData: type, dataEnum: purposeTypeValueEnum, isLabel: false }, isAdmin || isApprover, {\n          fieldName: 'type',\n          initialValue: type,\n          tagType: 'select',\n          componentProps: {\n            selectOptions: Object.keys(purposeTypeValueEnum).map((item) => {\n              return <Option value={+item}>{purposeTypeValueEnum[item].text}</Option>;\n            }),\n            apiOption: {\n              style: { width: '30%' },\n              onChange: (value: any) => {\n                setUpdateProjectDetailParam({ ...updateProjectDetailParam, type: value });\n              },\n            },\n          },\n        });\n      },\n    },\n    {\n      title: '状态',\n      key: 'state',\n      dataIndex: 'state',\n      span: 4,\n      render: (state: number) => {\n        return responseDataToContent({ responseData: state, dataEnum: commonStateValueEnum, isLabel: false }, isAdmin || isApprover, {\n          fieldName: 'state',\n          initialValue: state,\n          tagType: 'select',\n          componentProps: {\n            selectOptions: stateOptionForSelect,\n            apiOption: {\n              style: { width: '30%' },\n              onChange: (value: any) => {\n                setUpdateProjectDetailParam({ ...updateProjectDetailParam, state: value });\n              },\n            },\n          },\n        });\n      },\n    },\n    {\n      title: 'OpenApi配置',\n      key: 'openApiApps',\n      dataIndex: 'openApiApps',\n      tooltip: gitManageFieldTips.openApiApps.tooltip,\n      span: 4,\n      render: (openApiApps: openApiDataType[]) => {\n        if (!updateMode) {\n          if (openApiApps && openApiApps.length > 0) {\n            return openApiApps.map((item) => {\n              return (\n                <React.Fragment key={`openApiApp-${item.id}`}>\n                  <div>{item.title}</div>\n                </React.Fragment>\n              );\n            });\n          }\n          return '';\n        }\n        return responseDataToContent({ responseData: openApiApps, dataEnum: undefined, isLabel: false }, isAdmin || isApprover, {\n          fieldName: 'openApiApps',\n          initialValue: (openApiApps || []).map((item) => item.id),\n          tagType: 'select',\n          componentProps: {\n            selectOptions: openApiList.map((item) => (\n              <Option value={item.id} title={item.title}>\n                {item.title}\n              </Option>\n            )),\n            apiOption: {\n              style: { width: '50%' },\n              optionLabelProp: 'title',\n              mode: 'multiple',\n              allowClear: true,\n              showSearch: true,\n              placeholder: '请选择',\n              filterOption: (input: any, option: any) => {\n                return option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n              },\n            },\n          },\n        });\n      },\n    },\n    {\n      title: '标签',\n      key: 'labels',\n      dataIndex: 'labels',\n      span: 4,\n      render: (labels: labelDataType[]) => {\n        const labelInitialValue: number[] = [];\n        labels.forEach((item) => {\n          labelInitialValue.push(item.id);\n        });\n        return responseDataToContent({ responseData: labels, dataEnum: undefined, isLabel: true }, isAdmin || isApprover, {\n          fieldName: 'label',\n          initialValue: labelInitialValue,\n          tagType: 'select',\n          componentProps: {\n            selectOptions: labelOptionList,\n            apiOption: {\n              style: { width: '50%' },\n              optionLabelProp: 'title',\n              mode: 'multiple',\n              onSelect: (value: number) => {\n                selectLabelHandler(value);\n              },\n              allowClear: true,\n              showSearch: true,\n              placeholder: '请选择',\n              filterOption: (input: any, option: any) => {\n                return option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n              },\n            },\n          },\n        });\n      },\n    },\n    {\n      title: '所属集合',\n      key: 'gsCollects',\n      dataIndex: 'gsCollects',\n      tooltip: gitManageFieldTips.collection.tooltip,\n      span: 4,\n      render: (gsCollects: ICollection[]) => {\n        if (!updateMode) {\n          if (gsCollects && gsCollects.length > 0) {\n            return gsCollects.map((item) => {\n              return (\n                <React.Fragment key={`collection-${item.id}`}>\n                  <div>{item.name}</div>\n                </React.Fragment>\n              );\n            });\n          }\n          return '';\n        }\n        return responseDataToContent({ responseData: gsCollects, dataEnum: undefined, isLabel: false }, isAdmin || isApprover, {\n          fieldName: 'gsCollects',\n          initialValue: (gsCollects || []).map((item) => item.id),\n          tagType: 'select',\n          componentProps: {\n            selectOptions: collectionList.map((item) => (\n              <Option key={`collection-${item.id}`} value={item.id} title={item.name}>\n                {item.name}\n              </Option>\n            )),\n            apiOption: {\n              style: { width: '50%' },\n              optionLabelProp: 'title',\n              mode: 'multiple',\n              allowClear: true,\n              showSearch: true,\n              placeholder: gitManageFieldTips.collection.placeholder,\n              filterOption: (input: any, option: any) => {\n                return option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n              },\n            },\n          },\n        });\n      },\n    },\n    {\n      title: '地址',\n      key: 'repositoryUrl',\n      dataIndex: 'repositoryUrl',\n      span: 4,\n      render: (_: any, record: projectDetailDataType) => {\n        if (record.repositoryHttpUrl) {\n          return (\n            <>\n              <div>\n                <span style={{ display: 'block' }}>ssh：{record.repositoryUrl}</span>\n                <span>http：{record.repositoryHttpUrl}</span>\n              </div>\n            </>\n          );\n        }\n        return <span>ssh：{record.repositoryUrl}</span>;\n      },\n    },\n    {\n      title: '备注',\n      key: 'description',\n      dataIndex: 'description',\n      span: 4,\n      render: (description: string) => {\n        return responseDataToContent({ responseData: description, dataEnum: undefined, isLabel: false }, isAdmin || isApprover, {\n          fieldName: 'description',\n          initialValue: description,\n          tagType: 'textArea',\n          componentProps: {},\n        });\n      },\n    },\n    {\n      title: '创建时间',\n      key: 'createTime',\n      dataIndex: 'createTime',\n      span: 4,\n    },\n    {\n      title: '关联project',\n      key: 'slaveRepositories',\n      dataIndex: 'slaveRepositories',\n      span: 4,\n      render: (slaveRepositories: repositoryBasicDataType[]) => {\n        if ((isAdmin || isApprover) && updateMode) {\n          return (\n            <>\n              <Space>\n                <span>仓库</span>\n                <span style={{ marginLeft: '29rem' }}>\n                  相对路径\n                  <Tooltip overlay=\"比如主仓库是wps，目录有wps/a/b/c，c目录是wps的子仓库,那么c的相对路径就是a/b/c（不需要斜杠开头）\">\n                    <QuestionCircleOutlined />\n                  </Tooltip>\n                </span>\n              </Space>\n              <Form className={styles.updateForm} form={form} initialValues={{ slaveRepositories: projectDetailInfo.slaveRepositories }}>\n                <Form.List name=\"slaveRepositories\" key=\"slaveRepositoriesFormList\">\n                  {(fields, { add, remove }) => (\n                    <>\n                      {fields.map(({ key, name, fieldKey, ...restField }) => (\n                        <Space key={key} style={{ display: 'flex' }} align=\"baseline\">\n                          <Form.Item\n                            {...restField}\n                            name={[name, 'id']}\n                            fieldKey={[fieldKey, 'id']}\n                            rules={[{ required: true, message: '请选择仓库' }]}\n                          >\n                            <Select\n                              style={{ width: '31.25rem' }}\n                              onChange={(repoId: number) => {\n                                checkCurrentRepoSelectInForm(repoId, 'slave', name);\n                              }}\n                              showSearch\n                              placeholder=\"请选择仓库\"\n                              filterOption={(input: any, option: any) => {\n                                return option.key.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n                              }}\n                            >\n                              {slaveRepositoriesList}\n                            </Select>\n                          </Form.Item>\n                          <Form.Item\n                            {...restField}\n                            name={[name, 'prefix']}\n                            fieldKey={[fieldKey, 'prefix']}\n                            rules={[\n                              {\n                                required:\n                                  (isAdmin ? codeReviewStateValue === 1 : projectDetailInfo.codeReviewState === 1) &&\n                                  slaveRepoId2Prefix[form.getFieldValue('slaveRepositories')[name]?.id] !==\n                                    form.getFieldValue('slaveRepositories')[name]?.prefix,\n                                message: '请填写正确的子仓相对路径',\n                                pattern: /^(.?\\/?)+([^/])$/,\n                              },\n                            ]}\n                            validateTrigger=\"onBlur\"\n                          >\n                            <Input placeholder=\"相对主仓库的路径\" autoComplete=\"off\" />\n                          </Form.Item>\n                          <MinusCircleOutlined\n                            onClick={() => {\n                              remove(name);\n                            }}\n                          />\n                        </Space>\n                      ))}\n                      <Form.Item style={{ width: '35%' }}>\n                        <Button type=\"dashed\" onClick={() => add({ id: undefined, prefix: null })} block>\n                          添加\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form.List>\n              </Form>\n            </>\n          );\n        }\n        if (slaveRepositories && slaveRepositories.length > 0) {\n          return slaveRepositories.map((item) => {\n            return (\n              <React.Fragment key={`slaveRepository-${item.id}`}>\n                <div>\n                  <Space>\n                    <Link to={`${projectDetailUrl}${item.id}`} target=\"_blank\" className=\"gs_link\">\n                      {item.name} - {item.repositoryUrl}\n                    </Link>\n                    {item.prefix && item.prefix !== '' ? <span>相对路径: {item.prefix}</span> : null}\n                  </Space>\n                </div>\n              </React.Fragment>\n            );\n          });\n        }\n        return '';\n      },\n    },\n    {\n      title: '依赖project',\n      key: 'dependencyRepositories',\n      dataIndex: 'dependencyRepositories',\n      span: 4,\n      render: (dependencyRepositories: repositoryBasicDataType[]) => {\n        if ((isAdmin || isApprover) && updateMode) {\n          return (\n            <Form\n              className={styles.updateForm}\n              form={form}\n              initialValues={{ dependencyRepositories: projectDetailInfo.dependencyRepositories }}\n            >\n              <Form.List name=\"dependencyRepositories\" key=\"dependencyRepositoriesFormList\">\n                {(fields, { add, remove }) => (\n                  <>\n                    {fields.map(({ key, name, fieldKey, ...restField }) => (\n                      <Space key={key} style={{ display: 'flex' }} align=\"baseline\">\n                        <Form.Item\n                          {...restField}\n                          name={[name, 'id']}\n                          fieldKey={[fieldKey, 'id']}\n                          rules={[{ required: true, message: '请选择仓库' }]}\n                        >\n                          <Select\n                            style={{ width: '31.25rem' }}\n                            onChange={(repoId: number) => {\n                              checkCurrentRepoSelectInForm(repoId, 'dependency', name);\n                            }}\n                            showSearch\n                            placeholder=\"请选择仓库\"\n                            filterOption={(input: any, option: any) => {\n                              return option.key.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n                            }}\n                          >\n                            {dependencyRepositoriesList}\n                          </Select>\n                        </Form.Item>\n                        <MinusCircleOutlined\n                          onClick={() => {\n                            remove(name);\n                          }}\n                        />\n                      </Space>\n                    ))}\n                    <Form.Item style={{ width: '35%' }}>\n                      <Button type=\"dashed\" onClick={() => add()} block>\n                        添加\n                      </Button>\n                    </Form.Item>\n                  </>\n                )}\n              </Form.List>\n            </Form>\n          );\n        }\n        if (dependencyRepositories && dependencyRepositories.length > 0) {\n          return dependencyRepositories.map((item) => {\n            return (\n              <React.Fragment key={`dependencyRepository-${item.id}`}>\n                <div>\n                  <Link to={`${projectDetailUrl}${item.id}`} target=\"_blank\" className=\"gs_link\">\n                    {item.name} - {item.repositoryUrl}\n                  </Link>\n                </div>\n              </React.Fragment>\n            );\n          });\n        }\n        return '';\n      },\n    },\n    {\n      title: '负责人',\n      key: 'approvers',\n      dataIndex: 'approvers',\n      span: 4,\n      tooltip: '负责人仅用于平台仓库管理，未对应gitlab权限，若需访问代码，请在成员一栏进行添加',\n      render: (approvers: memberDataType[]) => {\n        if ((isAdmin || isApprover) && updateMode) {\n          return (\n            <Transfer\n              dataSource={userList}\n              showSearch\n              listStyle={{ width: '15%', height: '300px' }}\n              titles={['所有的用户列表', '已选择的用户列表']}\n              pagination={{ pageSize: 100 }}\n              filterOption={filterOption}\n              targetKeys={targetKeysForTransfer}\n              onChange={handleApproversTargetKeysChange}\n              render={(item: any) => `${item.title}(${item.description})`}\n              locale={{\n                notFoundContent: <Empty image={<EmptyData />} imageStyle={{ height: 32, marginBottom: 0 }} />,\n              }}\n            />\n          );\n        }\n        if (approvers && approvers.length > 0) {\n          return showUserInfo(approvers);\n        }\n        return '';\n      },\n    },\n    {\n      title: '成员',\n      key: 'members',\n      dataIndex: 'members',\n      span: 4,\n      render: (members: memberDataType[]) => {\n        if ((isAdmin || isApprover) && updateMode) {\n          return (\n            <>\n              <Form className={styles.updateForm} form={form} initialValues={{ members: projectDetailInfo.members }}>\n                <Form.List name=\"members\" key=\"membersFormList\">\n                  {(fields, { add, remove }) => (\n                    <>\n                      <Input.Search\n                        style={{ width: '30%', marginBottom: 5 }}\n                        placeholder=\"输入ksso账号即可判断该用户是否拥有权限\"\n                        onSearch={(ksso: string) => {\n                          checkMemberPermissionHandler(detailId, ksso);\n                        }}\n                      />\n                      {fields.map(({ key, name, fieldKey, ...restField }) => (\n                        <Space key={key} style={{ display: 'flex' }} align=\"baseline\">\n                          <Form.Item\n                            {...restField}\n                            name={[name, 'id']}\n                            fieldKey={[fieldKey, 'id']}\n                            rules={[{ required: true, message: '请选择用户' }]}\n                          >\n                            <Select\n                              style={{ width: '18.75rem' }}\n                              onChange={(userId: number) => {\n                                checkCurrentSelectInForm(userId, name);\n                              }}\n                              showSearch\n                              placeholder=\"请选择用户\"\n                              filterOption={(input: any, option: any) => {\n                                return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n                              }}\n                            >\n                              {userOptionForSelect}\n                            </Select>\n                          </Form.Item>\n                          <Form.Item\n                            {...restField}\n                            name={[name, 'accessLevel']}\n                            fieldKey={[fieldKey, 'accessLevel']}\n                            rules={[{ required: true, message: '请选择用户权限' }]}\n                          >\n                            <Select placeholder=\"请选择用户权限\" style={{ width: '12.5rem' }}>\n                              {accessLevelOptionForRepository}\n                            </Select>\n                          </Form.Item>\n                          <MinusCircleOutlined\n                            onClick={() => {\n                              remove(name);\n                            }}\n                          />\n                        </Space>\n                      ))}\n                      <Form.Item style={{ width: '35%' }}>\n                        <Button type=\"dashed\" onClick={() => add({ id: undefined, accessLevel: 20 })} block>\n                          添加\n                        </Button>\n                      </Form.Item>\n                    </>\n                  )}\n                </Form.List>\n              </Form>\n            </>\n          );\n        }\n        if (requestMembersStatus) {\n          return showUserInfo(members, inheritedMembers);\n        }\n        return <Button onClick={() => getProjectMembersHandler(detailId)}>获取成员</Button>;\n      },\n    },\n    {\n      title: '变更记录',\n      key: 'recordHistory',\n      span: 4,\n      render: () => {\n        return (\n          <Button\n            onClick={() => {\n              setHistoryVisible(true);\n            }}\n          >\n            变更记录\n          </Button>\n        );\n      },\n      hideInDescriptions: !hasPermission('gm:repository:record:page'),\n    },\n  ];\n\n  /**\n   * 仓库的详情渲染方法\n   * @param record 详情数据\n   * @returns\n   */\n  const projectDetailInfoRender = (record: projectDetailDataType) => {\n    return (\n      <>\n        <ProDescriptions\n          bordered\n          size=\"small\"\n          column={4}\n          title={`${record.name}的基本信息`}\n          actionRef={actionRef}\n          dataSource={record}\n          loading={dataLoading}\n          labelStyle={{ width: '115px', textAlign: 'end', padding: '5px 4px 8px 0px', verticalAlign: 'top' }}\n          className=\"gs_description\"\n          extra={\n            (isAdmin || isApprover) && hasPermission('gm:repository:update') ? (\n              <>\n                <Affix offsetTop={110} target={() => document.querySelector('.detailDrawer-projectDetail')}>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      updateButtonClickHandler(updateMode);\n                    }}\n                    loading={updateLoading}\n                  >\n                    {!updateMode ? '编辑' : '取消'}\n                  </Button>\n                </Affix>\n\n                {updateMode ? (\n                  <Affix offsetTop={110} target={() => document.querySelector('.detailDrawer-projectDetail')}>\n                    <Button type=\"primary\" onClick={() => setConfirmVisible(true)} loading={submitLoading}>\n                      保存\n                    </Button>\n                  </Affix>\n                ) : null}\n              </>\n            ) : null\n          }\n          columns={coulumn}\n        />\n      </>\n    );\n  };\n\n  /**\n   * 将数据转化为Select的Option\n   * @param repoList 仓库列表\n   * @param updateState 对应的state Hook\n   */\n  const dataToSelectOption = async (repoList: repositoryBasicDataType[], updateState: any) => {\n    const optionList: any[] = [];\n    const repositoryIdMapToCodeReviewState: Record<number, number> = {};\n    repoList.map((item: repositoryBasicDataType) => {\n      repositoryIdMapToCodeReviewState[item.id] = item.codeReviewState;\n      return optionList.push(\n        <Option key={item.repositoryUrl} title={item.name} value={item.id} disabled={false}>\n          {`${item.name}(${item.repositoryUrl})`}\n        </Option>,\n      );\n    });\n    if (Object.keys(repoIdAndCodeReviewStateMap).length === 0) {\n      setRepoIdAndCodeReviewStateMap(repositoryIdMapToCodeReviewState);\n    }\n    updateState(optionList);\n  };\n\n  /**\n   * 获取仓库列表,用于子仓和依赖仓的选择\n   */\n  const getRepositoryListHandler = async () => {\n    const response = await RequestUtils(getRepositoryListInGM, undefined, { msg: '获取仓库列表' });\n    if (response.success) {\n      setRepositoryList(response.data);\n      if (slaveRepositoriesList.length === 0) {\n        dataToSelectOption(response.data, setSlaveRepositoriesList);\n      }\n      if (dependencyRepositoriesList.length === 0) {\n        dataToSelectOption(response.data, setDependencyRepositoriesList);\n      }\n    }\n  };\n\n  /**\n   * 获取project详情\n   * @param projectId\n   * @returns\n   */\n  const getProjectDetailHandler = async (projectId: number) => {\n    const response = await RequestUtils(getProjectDetail, projectId, { msg: '获取project详情' });\n    if (response.success) {\n      const slaveRepoId2PrefixTemp = {};\n      const { approvers, slaveRepositories, dependencyRepositories } = response.data;\n      slaveRepositories.forEach((item: repositoryBasicDataType) => {\n        slaveRepoId2PrefixTemp[item.id] = item.prefix;\n      });\n      setSlaveRepoId2Prefix(slaveRepoId2PrefixTemp);\n\n      // 负责人的targetKeys,数据规约是string类型数组\n      const approversIdList: string[] = [];\n      approvers.map((item: memberDataType) => {\n        return approversIdList.push(item.id.toString());\n      });\n      // 设置相关穿梭框的targetKeys\n      setTargetKeysForTransfer(approversIdList);\n      setTargetKeysForTransferRollback(approversIdList);\n\n      // 遍历用户列表,判断当前用户是否为负责人,若是可以提供编辑入口\n      const groupAllApprovers = await updateGroupApproverState(response.data.groupId);\n      const allApprovers = [...approvers, ...groupAllApprovers];\n      const userInfo = allApprovers.find((item: memberDataType) => item.id === currentUserId);\n      setIsApprover(!!userInfo);\n\n      // 将已有的子仓和依赖仓id记录起来,用于校验用户重复选择\n      const slaveRepoIds: number[] = [];\n      const dependencyRepoIds: number[] = [];\n      slaveRepositories.map((item: repositoryBasicDataType) => {\n        return slaveRepoIds.push(item.id);\n      });\n      dependencyRepositories.map((item: repositoryBasicDataType) => {\n        return dependencyRepoIds.push(item.id);\n      });\n\n      // 设置代码检视开关值\n      setCodeReviewStateValue(response.data.codeReviewState);\n      setProjectDetailInfo({ ...response.data });\n      setReload(!reload);\n      return true;\n    }\n    return false;\n  };\n\n  useEffect(() => {\n    if (detailDrawerVisible) {\n      getLabelList(labelTypeStatusMap.repositoryManage.code);\n    }\n  }, [detailId]);\n\n  useEffect(() => {\n    if (reload && detailDrawerVisible) {\n      setDataLoading(true);\n      setRequestMembersStatus(false);\n      getProjectDetailHandler(detailId).finally(() => {\n        setDataLoading(false);\n      });\n      form.resetFields();\n    }\n  }, [reload, detailDrawerVisible]);\n\n  // 若url中的id发生改变,重新请求数据\n  useEffect(() => {\n    setUpdateMode(false);\n    setReload(true);\n  }, [detailId]);\n\n  // 判断是否为编辑模式,如果是编辑模式要获取用户列表\n  useEffect(() => {\n    if (updateMode) {\n      setDataLoading(true);\n      const getUserPromise = userList.length === 0 ? getUserListHandler() : Promise.resolve();\n      const getRepoPromise =\n        slaveRepositoriesList.length === 0 || dependencyRepositoriesList.length === 0 ? getRepositoryListHandler() : Promise.resolve();\n      Promise.all([getUserPromise, getRepoPromise, getAndSetOpenApiList(), getAndSetCollection()]).finally(() => {\n        setDataLoading(false);\n      });\n    }\n  }, [updateMode, detailId]);\n\n  return (\n    <>\n      <Drawer\n        title=\"项目详情\"\n        placement=\"right\"\n        closable\n        width=\"100%\"\n        className=\"detailDrawer detailDrawer-projectDetail\"\n        extra={<DrawerCollapseBtn />}\n        onClose={closeDetailDrawer}\n        visible={detailDrawerVisible}\n        mask={false}\n        destroyOnClose\n      >\n        {detailDrawerVisible ? (\n          <>\n            <Card className=\"gs_descriptionInCard\">\n              <div>{projectDetailInfoRender(projectDetailInfo)}</div>\n            </Card>\n            <Modal\n              visible={confirmVisible}\n              title=\"提示\"\n              onOk={submitHandler}\n              confirmLoading={submitLoading}\n              onCancel={() => setConfirmVisible(false)}\n              width={gsModalSize}\n              destroyOnClose\n            >\n              <Form form={form}>\n                <FormItem name=\"modifyDescription\" rules={[{ required: true, message: '修改描述不能为空!' }]}>\n                  <Input.TextArea placeholder=\"请输入修改描述\" maxLength={1000} showCount />\n                </FormItem>\n              </Form>\n            </Modal>\n          </>\n        ) : null}\n      </Drawer>\n      {historyVisible ? (\n        <HistoryDrawer\n          historyVisible={historyVisible}\n          closeHistoryDrawer={() => setHistoryVisible(false)}\n          repositoryId={projectDetailInfo.id}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default ProjectDetail;\n",
  },
  hunks: [
    "--- src/pages/gitManage/repositoryManage/project/components/projectDetail.tsx\n+++ src/pages/gitManage/repositoryManage/project/components/projectDetail.tsx\n@@ -1,39 +1,29 @@\n import React, { useState, useRef, useEffect } from 'react';\n-import { Button, Form, Input, Select, message, Transfer, Space, Card, Modal, Empty, Drawer, Tooltip } from 'antd';\n+import { Button, Form, Input, Select, message, Transfer, Space, Card, Modal, Empty, Drawer, Tooltip, Affix } from 'antd';\n import ProDescriptions from '@ant-design/pro-descriptions';\n import type { ProDescriptionsActionType } from '@ant-design/pro-descriptions';\n import {\n-    accessLevelStatusMap,\n-    accessLevelValueEnum,\n-    checkTypeStatusMap,\n-    commonOpenStateValueEnum,\n-    commonStateValueEnum,\n-    groupVisibilityLevelValueEnum,\n-    labelTypeStatusMap,\n-    purposeTypeValueEnum\n+  accessLevelStatusMap,\n+  accessLevelValueEnum,\n+  checkTypeStatusMap,\n+  commonOpenStateValueEnum,\n+  commonStateValueEnum,\n+  groupVisibilityLevelValueEnum,\n+  labelTypeStatusMap,\n+  purposeTypeValueEnum,\n } from '@/utils/DataEnum';\n import {\n-    checkMemberPermission,\n-    getGmOpenApiList,\n-    getProjectDetail,\n-    getProjectInheritedMembers,\n-    getProjectMembers,\n-    updateProjectDetail\n+  checkMemberPermission,\n+  getGmOpenApiList,\n+  getProjectDetail,\n+  getProjectInheritedMembers,\n+  getProjectMembers,\n+  updateProjectDetail,\n } from '../service';\n import { RequestUtils } from '@/utils/request';\n-import type {\n-    projectDetailDataType,\n-    repositoryBasicDataType,\n-    updateDetailParamType\n-} from '../data';\n+import type { projectDetailDataType, repositoryBasicDataType, updateDetailParamType } from '../data';\n import Label from '@/components/KLabel';\n-import {\n-    getLabelListByTypeId,\n-    getUserListInGM,\n-    getRepositoryListInGM,\n-    getUserInfo,\n-    checkUserAdminRole\n-} from '@/utils/commonRequest';\n+import { getLabelListByTypeId, getUserListInGM, getRepositoryListInGM, getUserInfo, checkUserAdminRole } from '@/utils/commonRequest';\n import styles from './index.less';\n import { MinusCircleOutlined, QuestionCircleOutlined } from '@ant-design/icons';\n import type { labelDataType, memberDataType, openApiDataType } from '../../data';\n",
    "--- src/pages/gitManage/repositoryManage/project/components/projectDetail.tsx\n+++ src/pages/gitManage/repositoryManage/project/components/projectDetail.tsx\n@@ -45,14 +35,14 @@ import { getNotification } from '../../components/conflictNotifaction';\n import type { commonPropsDataType, dataPropsDataType, formItemPropsDataType } from '../../group/data';\n import { ReactComponent as EmptyData } from '@/assets/emptyDataSmall.svg';\n import {\n-    accessLevelOptionForRepository,\n-    checkIrregularMemberHandler,\n-    checkVisibilityAndPurposeTypeHandler,\n-    excludeSpacialMember,\n-    showIrregularMemberListModal,\n-    showUserInfo,\n-    validateMember,\n-    getAddAndDeleteMembers\n+  accessLevelOptionForRepository,\n+  checkIrregularMemberHandler,\n+  checkVisibilityAndPurposeTypeHandler,\n+  excludeSpacialMember,\n+  showIrregularMemberListModal,\n+  showUserInfo,\n+  validateMember,\n+  getAddAndDeleteMembers,\n } from '../../common';\n import { gsModalSize } from '@/utils/commonVariable';\n import DrawerCollapseBtn from '@/components/DetailDrawerCollapse';\n",
    '--- src/pages/gitManage/repositoryManage/project/components/projectDetail.tsx\n+++ src/pages/gitManage/repositoryManage/project/components/projectDetail.tsx\n@@ -65,1641 +55,1713 @@ import { getCollectionList } from \'@/apis/modules/collection\';\n import { hasPermission } from \'@/utils/authority\';\n \n const initUpdateParam = {\n-    id: 0, userId: 0, version: 0, branchControl: 0, visibilityLevel: 0, state: 0, codeReviewState: 0, groupVisibilityLevel: 1,\n-    description: "", modifyDescription: "", addLabels: [], deleteLabels: [],\n-    addDependencyRepositories: [], deleteDependencyRepositories: [], addApprovers: [],\n-    deleteApprovers: [], addMembers: [], deleteMembers: [], addSlaveRepositories: [], deleteSlaveRepositories: [],\n-    type: 0\n-}\n+  id: 0,\n+  userId: 0,\n+  version: 0,\n+  branchControl: 0,\n+  visibilityLevel: 0,\n+  state: 0,\n+  codeReviewState: 0,\n+  groupVisibilityLevel: 1,\n+  description: \'\',\n+  modifyDescription: \'\',\n+  addLabels: [],\n+  deleteLabels: [],\n+  addDependencyRepositories: [],\n+  deleteDependencyRepositories: [],\n+  addApprovers: [],\n+  deleteApprovers: [],\n+  addMembers: [],\n+  deleteMembers: [],\n+  addSlaveRepositories: [],\n+  deleteSlaveRepositories: [],\n+  type: 0,\n+};\n \n interface projectDetailProps {\n-    detailDrawerVisible: boolean;\n-    detailId: number;\n-    closeDetailDrawer: any;\n+  detailDrawerVisible: boolean;\n+  detailId: number;\n+  closeDetailDrawer: any;\n }\n \n const ProjectDetail: React.FC<projectDetailProps> = (props: any) => {\n-    const { detailDrawerVisible, detailId, closeDetailDrawer } = props;\n-    // antd相关\n-    const [form] = Form.useForm();\n-    const FormItem = Form.Item;\n-    const { Option } = Select;\n-    const { TextArea } = Input;\n-    const actionRef = useRef<ProDescriptionsActionType>();\n-\n-    // 常用state\n-    const [updateLoading, setUpdateLoading] = useState<boolean>(false);\n-    const [submitLoading, setSubmitLoading] = useState<boolean>(false);\n-    const [dataLoading, setDataLoading] = useState<boolean>(false);\n-    const [updateMode, setUpdateMode] = useState<boolean>(false);\n-    const [reload, setReload] = useState<boolean>(true);\n-    const [projectDetailInfo, setProjectDetailInfo] = useState<projectDetailDataType>({\n-        id: 0, applyUsername: "", applyUserNickname: "", approvers: [], branchControl: 0, dependencyRepositories: [],\n-        description: "", groupId: 0, groupName: "", labels: [], members: [], name: "", projectId: 0, repositoryUrl: "",\n-        repositoryHttpUrl: "", slaveRepositories: [], state: 0, type: 0, version: 0, visibilityLevel: 0, codeReviewState: 0,\n-        groupVisibilityLevel: 1\n-    });\n-    const [openApiList, setOpenApiList] = useState<openApiDataType[]>([]);\n-    const [collectionList, setCollectionList] = useState<ICollection[]>([]);\n-    const [repositoryList, setRepositoryList] = useState<repositoryBasicDataType[]>([]);\n-    const [slaveRepositoriesList, setSlaveRepositoriesList] = useState<any[]>([]);\n-    const [dependencyRepositoriesList, setDependencyRepositoriesList] = useState<any[]>([]);\n-    const [labelList, setLabelList] = useState<labelDataType[]>([]);\n-    const [labelOptionList, setLabelOptionList] = useState<labelDataType[]>([]);\n-    // 所有用户列表数据源\n-    const [userList, setUserList] = useState<transferDataSourceDataType[]>([]);\n-    const [userOptionForSelect, setUserOptionForSelect] = useState<any[]>([]);\n-    // 负责人穿梭框的targetKeys,为用户id数组,但id格式需要转string类型\n-    const [targetKeysForTransfer, setTargetKeysForTransfer] = useState<string[]>([]);\n-    // 用于负责人和成员穿梭框的targetKeys回滚\n-    const [targetKeysForTransferRollback, setTargetKeysForTransferRollback] = useState<string[]>([]);\n-    // 更新接口需要的参数\n-    const [updateProjectDetailParam, setUpdateProjectDetailParam] = useState<updateDetailParamType>({\n-        id: 0, userId: 0, version: 0, branchControl: 0, visibilityLevel: 0, state: 0,\n-        description: "", modifyDescription: "", addLabels: [], deleteLabels: [], codeReviewState: 0,\n-        addDependencyRepositories: [], deleteDependencyRepositories: [], addApprovers: [],\n-        deleteApprovers: [], addMembers: [], deleteMembers: [], addSlaveRepositories: [], deleteSlaveRepositories: [],\n-        type: 0\n-    });\n-    const [isApprover, setIsApprover] = useState<boolean>(false);\n-    const [confirmVisible, setConfirmVisible] = useState<boolean>(false);\n-    const [historyVisible, setHistoryVisible] = useState<boolean>(false);\n-    // 判断当前是否已经请求过成员列表\n-    const [requestMembersStatus, setRequestMembersStatus] = useState<boolean>(false);\n-    // 继承来的成员列表\n-    const [inheritedMembers, setInheritedMembers] = useState<memberDataType[]>([]);\n-    // 仓库id和代码检视开关的映射类,即{id: state, ...}\n-    const [repoIdAndCodeReviewStateMap, setRepoIdAndCodeReviewStateMap] = useState<Record<number, number>>({});\n-    // 当前选择的代码检视开关值,用于提交修改时判断子仓相对路径是否需要填写\n-    const [codeReviewStateValue, setCodeReviewStateValue] = useState<number>(0);\n-    // 子仓id和其相对路径的映射\n-    const [slaveRepoId2Prefix, setSlaveRepoId2Prefix] = useState<Record<number, string | null>>({});\n-    // 用户信息\n-    const user = getUserInfo();\n-    const currentUserId = user.id;\n-    const isAdmin: boolean = checkUserAdminRole(user);\n-    const { updateGroupApproverState } = useGroupApprover();\n-\n-    const visibilityLevelOptionForSelect: any[] = [\n-        <Option\n-            value={1}\n-            key="Private"\n-            disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 1 : false}\n-        >\n-            Private\n-        </Option>,\n-        <Option\n-            value={2}\n-            key="Internal"\n-            disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 2 : false}\n-        >\n-            Internal\n-        </Option>,\n-        <Option\n-            value={3}\n-            key="Public"\n-            disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 3 : false}\n-        >\n-            Public\n-        </Option>\n-    ];\n-\n-    const stateOptionForSelect: any[] = [\n-        <Option value={0} key="disable">禁用</Option>,\n-        <Option value={1} key="enable">启用</Option>,\n-    ];\n-\n-    const switchOptionForSelect: any[] = [\n-        <Option value={0} key="close">关闭</Option>,\n-        <Option value={1} key="open">开启</Option>,\n-    ];\n-\n-    // ----------通用方法----------\n-\n-    // 处理取消编辑的必要回滚,主要针对非form表单可控的组件,如穿梭框\n-    const rollbackData = () => {\n-        // 初始化掉updateParam,防止数据错乱\n-        setUpdateProjectDetailParam(cloneDeep(initUpdateParam));\n-        setTargetKeysForTransfer(targetKeysForTransferRollback);\n+  const { detailDrawerVisible, detailId, closeDetailDrawer } = props;\n+  // antd相关\n+  const [form] = Form.useForm();\n+  const FormItem = Form.Item;\n+  const { Option } = Select;\n+  const { TextArea } = Input;\n+  const actionRef = useRef<ProDescriptionsActionType>();\n+\n+  // 常用state\n+  const [updateLoading, setUpdateLoading] = useState<boolean>(false);\n+  const [submitLoading, setSubmitLoading] = useState<boolean>(false);\n+  const [dataLoading, setDataLoading] = useState<boolean>(false);\n+  const [updateMode, setUpdateMode] = useState<boolean>(false);\n+  const [reload, setReload] = useState<boolean>(true);\n+  const [projectDetailInfo, setProjectDetailInfo] = useState<projectDetailDataType>({\n+    id: 0,\n+    applyUsername: \'\',\n+    applyUserNickname: \'\',\n+    approvers: [],\n+    branchControl: 0,\n+    dependencyRepositories: [],\n+    description: \'\',\n+    groupId: 0,\n+    groupName: \'\',\n+    labels: [],\n+    members: [],\n+    name: \'\',\n+    projectId: 0,\n+    repositoryUrl: \'\',\n+    repositoryHttpUrl: \'\',\n+    slaveRepositories: [],\n+    state: 0,\n+    type: 0,\n+    version: 0,\n+    visibilityLevel: 0,\n+    codeReviewState: 0,\n+    groupVisibilityLevel: 1,\n+  });\n+  const [openApiList, setOpenApiList] = useState<openApiDataType[]>([]);\n+  const [collectionList, setCollectionList] = useState<ICollection[]>([]);\n+  const [repositoryList, setRepositoryList] = useState<repositoryBasicDataType[]>([]);\n+  const [slaveRepositoriesList, setSlaveRepositoriesList] = useState<any[]>([]);\n+  const [dependencyRepositoriesList, setDependencyRepositoriesList] = useState<any[]>([]);\n+  const [labelList, setLabelList] = useState<labelDataType[]>([]);\n+  const [labelOptionList, setLabelOptionList] = useState<labelDataType[]>([]);\n+  // 所有用户列表数据源\n+  const [userList, setUserList] = useState<transferDataSourceDataType[]>([]);\n+  const [userOptionForSelect, setUserOptionForSelect] = useState<any[]>([]);\n+  // 负责人穿梭框的targetKeys,为用户id数组,但id格式需要转string类型\n+  const [targetKeysForTransfer, setTargetKeysForTransfer] = useState<string[]>([]);\n+  // 用于负责人和成员穿梭框的targetKeys回滚\n+  const [targetKeysForTransferRollback, setTargetKeysForTransferRollback] = useState<string[]>([]);\n+  // 更新接口需要的参数\n+  const [updateProjectDetailParam, setUpdateProjectDetailParam] = useState<updateDetailParamType>({\n+    id: 0,\n+    userId: 0,\n+    version: 0,\n+    branchControl: 0,\n+    visibilityLevel: 0,\n+    state: 0,\n+    description: \'\',\n+    modifyDescription: \'\',\n+    addLabels: [],\n+    deleteLabels: [],\n+    codeReviewState: 0,\n+    addDependencyRepositories: [],\n+    deleteDependencyRepositories: [],\n+    addApprovers: [],\n+    deleteApprovers: [],\n+    addMembers: [],\n+    deleteMembers: [],\n+    addSlaveRepositories: [],\n+    deleteSlaveRepositories: [],\n+    type: 0,\n+  });\n+  const [isApprover, setIsApprover] = useState<boolean>(false);\n+  const [confirmVisible, setConfirmVisible] = useState<boolean>(false);\n+  const [historyVisible, setHistoryVisible] = useState<boolean>(false);\n+  // 判断当前是否已经请求过成员列表\n+  const [requestMembersStatus, setRequestMembersStatus] = useState<boolean>(false);\n+  // 继承来的成员列表\n+  const [inheritedMembers, setInheritedMembers] = useState<memberDataType[]>([]);\n+  // 仓库id和代码检视开关的映射类,即{id: state, ...}\n+  const [repoIdAndCodeReviewStateMap, setRepoIdAndCodeReviewStateMap] = useState<Record<number, number>>({});\n+  // 当前选择的代码检视开关值,用于提交修改时判断子仓相对路径是否需要填写\n+  const [codeReviewStateValue, setCodeReviewStateValue] = useState<number>(0);\n+  // 子仓id和其相对路径的映射\n+  const [slaveRepoId2Prefix, setSlaveRepoId2Prefix] = useState<Record<number, string | null>>({});\n+  // 用户信息\n+  const user = getUserInfo();\n+  const currentUserId = user.id;\n+  const isAdmin: boolean = checkUserAdminRole(user);\n+  const { updateGroupApproverState } = useGroupApprover();\n+\n+  const visibilityLevelOptionForSelect: any[] = [\n+    <Option value={1} key="Private" disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 1 : false}>\n+      Private\n+    </Option>,\n+    <Option value={2} key="Internal" disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 2 : false}>\n+      Internal\n+    </Option>,\n+    <Option value={3} key="Public" disabled={projectDetailInfo.groupVisibilityLevel ? projectDetailInfo.groupVisibilityLevel < 3 : false}>\n+      Public\n+    </Option>,\n+  ];\n+\n+  const stateOptionForSelect: any[] = [\n+    <Option value={0} key="disable">\n+      禁用\n+    </Option>,\n+    <Option value={1} key="enable">\n+      启用\n+    </Option>,\n+  ];\n+\n+  const switchOptionForSelect: any[] = [\n+    <Option value={0} key="close">\n+      关闭\n+    </Option>,\n+    <Option value={1} key="open">\n+      开启\n+    </Option>,\n+  ];\n+\n+  // ----------通用方法----------\n+\n+  // 处理取消编辑的必要回滚,主要针对非form表单可控的组件,如穿梭框\n+  const rollbackData = () => {\n+    // 初始化掉updateParam,防止数据错乱\n+    setUpdateProjectDetailParam(cloneDeep(initUpdateParam));\n+    setTargetKeysForTransfer(targetKeysForTransferRollback);\n+  };\n+\n+  /**\n+   * 获取项目继承自群组的成员\n+   * @param projectId 仓库id\n+   * @returns\n+   */\n+  const getProjectInheritedMembersHandler = async (projectId: number) => {\n+    const response = await RequestUtils(getProjectInheritedMembers, projectId, { msg: \'获取从群组继承的成员\' });\n+    if (response.data) {\n+      const inheritedMemberIdList: number[] = [];\n+      response.data.forEach((item: memberDataType) => inheritedMemberIdList.push(item.id));\n+      const excludeCreator: memberDataType[] = excludeSpacialMember(response.data);\n+      setInheritedMembers(excludeCreator);\n+      return excludeCreator;\n     }\n-\n-    /**\n-     * 获取项目继承自群组的成员\n-     * @param projectId 仓库id\n-     * @returns\n-     */\n-    const getProjectInheritedMembersHandler = async (projectId: number) => {\n-        const response = await RequestUtils(getProjectInheritedMembers, projectId, { msg: "获取从群组继承的成员" });\n-        if (response.data) {\n-            const inheritedMemberIdList: number[] = [];\n-            response.data.forEach((item: memberDataType) => inheritedMemberIdList.push(item.id));\n-            const excludeCreator: memberDataType[] = excludeSpacialMember(response.data);\n-            setInheritedMembers(excludeCreator);\n-            return excludeCreator;\n-        }\n-        return [];\n+    return [];\n+  };\n+\n+  /**\n+   * 获取群组成员\n+   * @param projectId 项目id\n+   */\n+  const getProjectMembersHandler = async (projectId: number) => {\n+    try {\n+      setDataLoading(true);\n+      const response = await RequestUtils(getProjectMembers, projectId, { msg: \'获取项目成员\' });\n+      await getProjectInheritedMembersHandler(projectId);\n+      if (response.success) {\n+        // 需要从member数组里面排除掉创建人,不进行显示\n+        const excludeProjectCreater: memberDataType[] = excludeSpacialMember(response.data);\n+        // 将已有的用户id记录起来,用于校验用户重复选择\n+        const memberIds: number[] = [];\n+        excludeProjectCreater.forEach((item) => {\n+          return memberIds.push(item.id);\n+        });\n+        setProjectDetailInfo({ ...projectDetailInfo, members: excludeProjectCreater });\n+        setRequestMembersStatus(true);\n+      }\n+    } catch (e) {\n+      console.log(e);\n+    } finally {\n+      setDataLoading(false);\n     }\n-\n-    /**\n-     * 获取群组成员\n-     * @param projectId 项目id\n-     */\n-    const getProjectMembersHandler = async (projectId: number) => {\n-        try {\n-            setDataLoading(true);\n-            const response = await RequestUtils(getProjectMembers, projectId, { msg: "获取项目成员" });\n-            await getProjectInheritedMembersHandler(projectId);\n-            if (response.success) {\n-                // 需要从member数组里面排除掉创建人,不进行显示\n-                const excludeProjectCreater: memberDataType[] = excludeSpacialMember(response.data);\n-                // 将已有的用户id记录起来,用于校验用户重复选择\n-                const memberIds: number[] = [];\n-                excludeProjectCreater.forEach(item => { return memberIds.push(item.id) });\n-                setProjectDetailInfo({ ...projectDetailInfo, members: excludeProjectCreater });\n-                setRequestMembersStatus(true);\n-            }\n-        } catch (e) {\n-            console.log(e);\n-        } finally {\n-            setDataLoading(false);\n-        }\n+  };\n+\n+  /**\n+   * 判断当前按钮点击的状态,若是编辑状态时点击,说明要回滚数据\n+   * @param updateStatus 编辑状态的标志位\n+   */\n+  const updateButtonClickHandler = async (updateStatus: boolean) => {\n+    setUpdateLoading(true);\n+    if (updateStatus) {\n+      // 若取消编辑,那么重置form表单的内容\n+      rollbackData();\n+      form.resetFields();\n     }\n-\n-    /**\n-     * 判断当前按钮点击的状态,若是编辑状态时点击,说明要回滚数据\n-     * @param updateStatus 编辑状态的标志位\n-     */\n-    const updateButtonClickHandler = async (updateStatus: boolean) => {\n-        setUpdateLoading(true);\n-        if (updateStatus) {\n-            // 若取消编辑,那么重置form表单的内容\n-            rollbackData();\n-            form.resetFields();\n-        }\n-        if (!requestMembersStatus) {\n-            await getProjectMembersHandler(detailId);\n-        }\n-        const { version, id } = projectDetailInfo;\n-        // 将必填的字段传入update接口参数state\n-        setUpdateProjectDetailParam({ ...updateProjectDetailParam, version, id, userId: currentUserId });\n-        setUpdateMode(!updateMode)\n-        setUpdateLoading(false);\n+    if (!requestMembersStatus) {\n+      await getProjectMembersHandler(detailId);\n     }\n-\n-    /**\n-     * 根据穿梭框的targetKey数组或FormList的用户id反查用户列表,得到用户对象\n-     * @param item 用户id数组或用户id\n-     * @returns\n-     */\n-    const getItemFromUserList = (param: string[] | number) => {\n-        // 如果是ids,说明是穿梭框的请求\n-        if (Array.isArray(param)) {\n-            if (param && param.length > 0) {\n-                const filterList = userList.filter(item => param.includes(item.key));\n-                const userInfoList: memberDataType[] = [];\n-                filterList.map(item => {\n-                    return userInfoList.push({\n-                        id: +item.key,\n-                        nickname: item.title,\n-                        username: item.description\n-                    })\n-                })\n-                return userInfoList;\n-            }\n-            return [];\n-        }\n-        // 如果是单id,说明是成员FormList的请求,只返回一个\n-        const userInfo = userList.find(item => item.key === param.toString());\n-        if (userInfo) {\n-            // 将transferDataType转化为memberDataType\n-            return { id: +userInfo.key, username: userInfo.description, nickname: userInfo.title };\n-        }\n-        return {};\n+    const { version, id } = projectDetailInfo;\n+    // 将必填的字段传入update接口参数state\n+    setUpdateProjectDetailParam({ ...updateProjectDetailParam, version, id, userId: currentUserId });\n+    setUpdateMode(!updateMode);\n+    setUpdateLoading(false);\n+  };\n+\n+  /**\n+   * 根据穿梭框的targetKey数组或FormList的用户id反查用户列表,得到用户对象\n+   * @param item 用户id数组或用户id\n+   * @returns\n+   */\n+  const getItemFromUserList = (param: string[] | number) => {\n+    // 如果是ids,说明是穿梭框的请求\n+    if (Array.isArray(param)) {\n+      if (param && param.length > 0) {\n+        const filterList = userList.filter((item) => param.includes(item.key));\n+        const userInfoList: memberDataType[] = [];\n+        filterList.map((item) => {\n+          return userInfoList.push({\n+            id: +item.key,\n+            nickname: item.title,\n+            username: item.description,\n+          });\n+        });\n+        return userInfoList;\n+      }\n+      return [];\n     }\n-\n-    const getItemFromLabelList = (param: number) => {\n-        const labelInfo = labelList.find(item => item.id === param);\n-        if (labelInfo) {\n-            return labelInfo;\n-        }\n-        return undefined;\n+    // 如果是单id,说明是成员FormList的请求,只返回一个\n+    const userInfo = userList.find((item) => item.key === param.toString());\n+    if (userInfo) {\n+      // 将transferDataType转化为memberDataType\n+      return { id: +userInfo.key, username: userInfo.description, nickname: userInfo.title };\n     }\n+    return {};\n+  };\n \n-    /**\n-     * 从仓库列表获取对应的仓库信息\n-     * @param param\n-     * @returns\n-     */\n-    const getItemFromRepositoryList = (param: number) => {\n-        const repositoryInfo = repositoryList.find(item => item.id === param);\n-        if (repositoryInfo) {\n-            return repositoryInfo;\n-        }\n-        return undefined;\n+  const getItemFromLabelList = (param: number) => {\n+    const labelInfo = labelList.find((item) => item.id === param);\n+    if (labelInfo) {\n+      return labelInfo;\n     }\n-\n-    /**\n-     * 判断选中的标签是否在初始数据中,若不存在说明是新增的,需要添加进update参数的addLabels中\n-     * @param labelId 当前选中的标签ID\n-     */\n-    const selectLabelHandler = (labelId: number) => {\n-        const { addLabels } = updateProjectDetailParam;\n-        // 如果不在初始detail和addLabel里面,说明是新增的\n-        if (!projectDetailInfo.labels.find(item => item.id === labelId) && !addLabels?.find(item => item.id === labelId)) {\n-            const labelInfo: labelDataType | undefined = getItemFromLabelList(labelId);\n-            // 判断是否为空,过滤非法数据\n-            if (labelInfo) {\n-                addLabels?.push(labelInfo);\n-                setUpdateProjectDetailParam({ ...updateProjectDetailParam, addLabels });\n-            }\n-        }\n+    return undefined;\n+  };\n+\n+  /**\n+   * 从仓库列表获取对应的仓库信息\n+   * @param param\n+   * @returns\n+   */\n+  const getItemFromRepositoryList = (param: number) => {\n+    const repositoryInfo = repositoryList.find((item) => item.id === param);\n+    if (repositoryInfo) {\n+      return repositoryInfo;\n     }\n-\n-    /**\n-     * 提交前对标签进行数据处理\n-     * @param labelInForm form表单提交上来的label值\n-     * @returns\n-     */\n-    const beforeRequestLabelHandler = async (labelInForm: number[]) => {\n-        // 初始的label数据\n-        const labelFromGroupDetail = projectDetailInfo.labels;\n-        // 因为添加的标签在Select选中的时候就已经添加了,因此需要使用该值和初始的标签数据进行比对以得到哪些标签被删除\n-        const { deleteLabels, addLabels } = updateProjectDetailParam;\n-\n-        // 遍历初始的数据,查找出属于删除的标签\n-        labelFromGroupDetail.map((labelInDetail: labelDataType) => {\n-            // 若表单值数组里存在当前初始标签值,说明该标签未处理,跳过\n-            // 若表单值数组里当前值在add里面,说明该标签是新增的,跳过\n-            // 若表单值数组里当前值在delete里面,说明该标签已经记录删除了,跳过\n-            if (labelInForm.find((labelId: number) => labelInDetail.id === labelId\n-                || addLabels?.find((labelInParam: labelDataType) => labelInDetail.id === labelInParam.id)\n-                || deleteLabels?.find((labelInParam: labelDataType) => labelInDetail.id === labelInParam.id)\n-            )) {\n-                return "";\n-            }\n-            // 以上条件都不满足,代表当前数据是被删除的,需要加进delete数组里\n-            return deleteLabels?.push(labelInDetail);\n-        });\n-\n-        // 判断addLabel里面是否存在于表单值里,若不存在说明已经删除了,需要从addLabel剔除\n-        let addLabelsTemp = addLabels || [];\n-        addLabels?.map((labelInParam: labelDataType) => {\n-            if (!labelInForm.find((labelId: number) => labelInParam.id === labelId)) {\n-                addLabelsTemp = addLabelsTemp.filter((labelInfo: labelDataType) => labelInfo.id !== labelInParam.id);\n-                return true;\n-            }\n-            return "";\n-        });\n-        return { deleteLabels, addLabels: addLabelsTemp };\n+    return undefined;\n+  };\n+\n+  /**\n+   * 判断选中的标签是否在初始数据中,若不存在说明是新增的,需要添加进update参数的addLabels中\n+   * @param labelId 当前选中的标签ID\n+   */\n+  const selectLabelHandler = (labelId: number) => {\n+    const { addLabels } = updateProjectDetailParam;\n+    // 如果不在初始detail和addLabel里面,说明是新增的\n+    if (!projectDetailInfo.labels.find((item) => item.id === labelId) && !addLabels?.find((item) => item.id === labelId)) {\n+      const labelInfo: labelDataType | undefined = getItemFromLabelList(labelId);\n+      // 判断是否为空,过滤非法数据\n+      if (labelInfo) {\n+        addLabels?.push(labelInfo);\n+        setUpdateProjectDetailParam({ ...updateProjectDetailParam, addLabels });\n+      }\n     }\n+  };\n+\n+  /**\n+   * 提交前对标签进行数据处理\n+   * @param labelInForm form表单提交上来的label值\n+   * @returns\n+   */\n+  const beforeRequestLabelHandler = async (labelInForm: number[]) => {\n+    // 初始的label数据\n+    const labelFromGroupDetail = projectDetailInfo.labels;\n+    // 因为添加的标签在Select选中的时候就已经添加了,因此需要使用该值和初始的标签数据进行比对以得到哪些标签被删除\n+    const { deleteLabels, addLabels } = updateProjectDetailParam;\n+\n+    // 遍历初始的数据,查找出属于删除的标签\n+    labelFromGroupDetail.map((labelInDetail: labelDataType) => {\n+      // 若表单值数组里存在当前初始标签值,说明该标签未处理,跳过\n+      // 若表单值数组里当前值在add里面,说明该标签是新增的,跳过\n+      // 若表单值数组里当前值在delete里面,说明该标签已经记录删除了,跳过\n+      if (\n+        labelInForm.find(\n+          (labelId: number) =>\n+            labelInDetail.id === labelId ||\n+            addLabels?.find((labelInParam: labelDataType) => labelInDetail.id === labelInParam.id) ||\n+            deleteLabels?.find((labelInParam: labelDataType) => labelInDetail.id === labelInParam.id),\n+        )\n+      ) {\n+        return \'\';\n+      }\n+      // 以上条件都不满足,代表当前数据是被删除的,需要加进delete数组里\n+      return deleteLabels?.push(labelInDetail);\n+    });\n \n-    /**\n-     * 提交前对仓库信息进行数据处理\n-     * @param repositoryInForm 修改表单里的仓库信息\n-     * @param repoType 仓库类型:子仓/依赖仓\n-     * @returns\n-     */\n-    const beforeRequestRepositoryHandler = async (repositoryInForm: repositoryBasicDataType[], repoType: string) => {\n-        if (repoType === "slave") {\n-            const slaveRepositories: repositoryBasicDataType[] = [];\n-            // 表单内的子仓相对路径是否和详情的子仓相对路径相同\n-            let isSameWithProjectDetail = repositoryInForm.length === projectDetailInfo.slaveRepositories.length;\n-            repositoryInForm.forEach((item: repositoryBasicDataType) => {\n-                const repositoryInfo: any = getItemFromRepositoryList(item.id);\n-                slaveRepositories.push({ ...repositoryInfo, prefix: item.prefix });\n-                if (isSameWithProjectDetail) {\n-                    const slaveRepoInProjectDetail = projectDetailInfo.slaveRepositories.find(slaveRepo => item.id === slaveRepo.id);\n-                    if (!slaveRepoInProjectDetail || slaveRepoInProjectDetail.prefix !== item.prefix) {\n-                        isSameWithProjectDetail = false;\n-                    }\n-                }\n-            });\n-            // 未修改子仓返回null\n-            if (isSameWithProjectDetail) {\n-                return null;\n-            }\n-            return slaveRepositories;\n+    // 判断addLabel里面是否存在于表单值里,若不存在说明已经删除了,需要从addLabel剔除\n+    let addLabelsTemp = addLabels || [];\n+    addLabels?.map((labelInParam: labelDataType) => {\n+      if (!labelInForm.find((labelId: number) => labelInParam.id === labelId)) {\n+        addLabelsTemp = addLabelsTemp.filter((labelInfo: labelDataType) => labelInfo.id !== labelInParam.id);\n+        return true;\n+      }\n+      return \'\';\n+    });\n+    return { deleteLabels, addLabels: addLabelsTemp };\n+  };\n+\n+  /**\n+   * 提交前对仓库信息进行数据处理\n+   * @param repositoryInForm 修改表单里的仓库信息\n+   * @param repoType 仓库类型:子仓/依赖仓\n+   * @returns\n+   */\n+  const beforeRequestRepositoryHandler = async (repositoryInForm: repositoryBasicDataType[], repoType: string) => {\n+    if (repoType === \'slave\') {\n+      const slaveRepositories: repositoryBasicDataType[] = [];\n+      // 表单内的子仓相对路径是否和详情的子仓相对路径相同\n+      let isSameWithProjectDetail = repositoryInForm.length === projectDetailInfo.slaveRepositories.length;\n+      repositoryInForm.forEach((item: repositoryBasicDataType) => {\n+        const repositoryInfo: any = getItemFromRepositoryList(item.id);\n+        slaveRepositories.push({ ...repositoryInfo, prefix: item.prefix });\n+        if (isSameWithProjectDetail) {\n+          const slaveRepoInProjectDetail = projectDetailInfo.slaveRepositories.find((slaveRepo) => item.id === slaveRepo.id);\n+          if (!slaveRepoInProjectDetail || slaveRepoInProjectDetail.prefix !== item.prefix) {\n+            isSameWithProjectDetail = false;\n+          }\n         }\n-\n-        let dependencyRepoInDetailInfo = cloneDeep(projectDetailInfo.dependencyRepositories);\n-        const addRepositories: repositoryBasicDataType[] = [];\n-        repositoryInForm.forEach((dependencyRepo: repositoryBasicDataType) => {\n-            const theSameMember = dependencyRepoInDetailInfo.find(item => item.id === dependencyRepo.id);\n-            if (theSameMember?.id === dependencyRepo.id) {\n-                dependencyRepoInDetailInfo = dependencyRepoInDetailInfo.filter(item => item.id !== dependencyRepo.id);\n-                return;\n-            }\n-            const repositoryInfo: any = getItemFromRepositoryList(dependencyRepo.id);\n-            addRepositories.push(repositoryInfo);\n-        });\n-        const deleteRepositories = dependencyRepoInDetailInfo;\n-        return { addDependencyRepositories: addRepositories, deleteDependencyRepositories: deleteRepositories };\n+      });\n+      // 未修改子仓返回null\n+      if (isSameWithProjectDetail) {\n+        return null;\n+      }\n+      return slaveRepositories;\n     }\n \n-    /**\n-     * 获取openApi参数值\n-     * @param openApiIds 已选中的openApiId\n-     * @returns openApiDataType\n-     */\n-    const beforeRequestOpenApiHandler = (openApiIds: number[]) => {\n-        if (isEqual(openApiIds, (projectDetailInfo?.openApiApps || []).map(openApi => openApi.id))) {\n-            return null;\n-        }\n-        return openApiList.filter(item => (openApiIds || []).includes(item.id));\n+    let dependencyRepoInDetailInfo = cloneDeep(projectDetailInfo.dependencyRepositories);\n+    const addRepositories: repositoryBasicDataType[] = [];\n+    repositoryInForm.forEach((dependencyRepo: repositoryBasicDataType) => {\n+      const theSameMember = dependencyRepoInDetailInfo.find((item) => item.id === dependencyRepo.id);\n+      if (theSameMember?.id === dependencyRepo.id) {\n+        dependencyRepoInDetailInfo = dependencyRepoInDetailInfo.filter((item) => item.id !== dependencyRepo.id);\n+        return;\n+      }\n+      const repositoryInfo: any = getItemFromRepositoryList(dependencyRepo.id);\n+      addRepositories.push(repositoryInfo);\n+    });\n+    const deleteRepositories = dependencyRepoInDetailInfo;\n+    return { addDependencyRepositories: addRepositories, deleteDependencyRepositories: deleteRepositories };\n+  };\n+\n+  /**\n+   * 获取openApi参数值\n+   * @param openApiIds 已选中的openApiId\n+   * @returns openApiDataType\n+   */\n+  const beforeRequestOpenApiHandler = (openApiIds: number[]) => {\n+    if (\n+      isEqual(\n+        openApiIds,\n+        (projectDetailInfo?.openApiApps || []).map((openApi) => openApi.id),\n+      )\n+    ) {\n+      return null;\n     }\n-\n-    /**\n-     * 获取openApi参数值\n-     * @param openApiIds 已选中的openApiId\n-     * @returns openApiDataType\n-     */\n-    const beforeRequestCollectionHandler = (collectionIds: number[]) => {\n-        if (isEqual(collectionIds, (projectDetailInfo?.gsCollects || []).map(collection => collection.id))) {\n-            return null;\n-        }\n-        return collectionList.filter(item => (collectionIds || []).includes(item.id));\n+    return openApiList.filter((item) => (openApiIds || []).includes(item.id));\n+  };\n+\n+  /**\n+   * 获取openApi参数值\n+   * @param openApiIds 已选中的openApiId\n+   * @returns openApiDataType\n+   */\n+  const beforeRequestCollectionHandler = (collectionIds: number[]) => {\n+    if (\n+      isEqual(\n+        collectionIds,\n+        (projectDetailInfo?.gsCollects || []).map((collection) => collection.id),\n+      )\n+    ) {\n+      return null;\n     }\n-\n-    /**\n-     * 判断当前输入的用户是否拥有权限\n-     * @param repositoryId 仓库id\n-     * @param username 用户ksso\n-     * @returns true: 拥有权限或出现异常;false: 没有权限可以继续流程\n-     */\n-    const checkMemberPermissionHandler = async (repositoryId: number, username: string) => {\n-        if (username === "" || !username) {\n-            message.warning("ksso不能为空!");\n-            return;\n+    return collectionList.filter((item) => (collectionIds || []).includes(item.id));\n+  };\n+\n+  /**\n+   * 判断当前输入的用户是否拥有权限\n+   * @param repositoryId 仓库id\n+   * @param username 用户ksso\n+   * @returns true: 拥有权限或出现异常;false: 没有权限可以继续流程\n+   */\n+  const checkMemberPermissionHandler = async (repositoryId: number, username: string) => {\n+    if (username === \'\' || !username) {\n+      message.warning(\'ksso不能为空!\');\n+      return;\n+    }\n+    try {\n+      const response = await RequestUtils(checkMemberPermission, { id: repositoryId, username }, { msg: \'校验选择的用户是否有权限\' });\n+      if (response.success) {\n+        // 无返回说明没有权限,可以添加\n+        if (response.data === null) {\n+          message.info(\'该用户在当前仓库下没有权限!\');\n+          return;\n         }\n-        try {\n-            const response = await RequestUtils(checkMemberPermission, { id: repositoryId, username }, { msg: "校验选择的用户是否有权限" });\n-            if (response.success) {\n-                // 无返回说明没有权限,可以添加\n-                if (response.data === null) {\n-                    message.info("该用户在当前仓库下没有权限!");\n-                    return;\n-                }\n-                // 有返回说明权限已存在,无法添加并提示用户\n-                if (response.data.id && response.data.username) {\n-                    message.warning(`该用户在当前仓库下已经有${accessLevelValueEnum[response.data.accessLevel].text || ""}权限了!`);\n-                    return;\n-                }\n-            }\n-        } catch (error) {\n-            console.log(error);\n-            message.error("校验用户权限时出现异常,若要添加该用户可能会失败!");\n+        // 有返回说明权限已存在,无法添加并提示用户\n+        if (response.data.id && response.data.username) {\n+          message.warning(`该用户在当前仓库下已经有${accessLevelValueEnum[response.data.accessLevel].text || \'\'}权限了!`);\n+          return;\n         }\n+      }\n+    } catch (error) {\n+      console.log(error);\n+      message.error(\'校验用户权限时出现异常,若要添加该用户可能会失败!\');\n     }\n-\n-    /**\n-     * 获取当前用户是否已选择\n-     * @param userId\n-     */\n-    const checkCurrentSelectInForm = (userId: number, index: number) => {\n-        const membersFormValues = form.getFieldValue("members");\n-        // 如果已选择该用户,不让其选择\n-        if (membersFormValues.filter((item: any) => item.id === userId).length > 1) {\n-            message.warning("该用户已被选择,请勿重复选择");\n-            membersFormValues[index].id = null;\n-            form.setFieldsValue({ "members": membersFormValues });\n-        }\n+  };\n+\n+  /**\n+   * 获取当前用户是否已选择\n+   * @param userId\n+   */\n+  const checkCurrentSelectInForm = (userId: number, index: number) => {\n+    const membersFormValues = form.getFieldValue(\'members\');\n+    // 如果已选择该用户,不让其选择\n+    if (membersFormValues.filter((item: any) => item.id === userId).length > 1) {\n+      message.warning(\'该用户已被选择,请勿重复选择\');\n+      membersFormValues[index].id = null;\n+      form.setFieldsValue({ members: membersFormValues });\n     }\n-\n-    /**\n-     * 获取当前仓库是否已选择\n-     * @param repoId\n-     * @param type 类型(子仓/依赖仓)\n-     */\n-    const checkCurrentRepoSelectInForm = (repoId: number, type: string, index: number) => {\n-        const formProperty = type === "slave" ? "slaveRepositories" : "dependencyRepositories";\n-        const typeFormValues = form.getFieldValue(formProperty);\n-\n-        if (typeFormValues.filter((item: any) => item.id === repoId).length > 1) {\n-            message.warning("该仓库已被选择,请勿重复选择");\n-            typeFormValues[index].id = null;\n-            form.setFieldsValue({ formProperty: typeFormValues });\n-        }\n+  };\n+\n+  /**\n+   * 获取当前仓库是否已选择\n+   * @param repoId\n+   * @param type 类型(子仓/依赖仓)\n+   */\n+  const checkCurrentRepoSelectInForm = (repoId: number, type: string, index: number) => {\n+    const formProperty = type === \'slave\' ? \'slaveRepositories\' : \'dependencyRepositories\';\n+    const typeFormValues = form.getFieldValue(formProperty);\n+\n+    if (typeFormValues.filter((item: any) => item.id === repoId).length > 1) {\n+      message.warning(\'该仓库已被选择,请勿重复选择\');\n+      typeFormValues[index].id = null;\n+      form.setFieldsValue({ formProperty: typeFormValues });\n     }\n+  };\n+\n+  /**\n+   * 处理提交的方法\n+   */\n+  const submitHandler = async () => {\n+    try {\n+      const formValues = await form.validateFields();\n+      setSubmitLoading(true);\n+\n+      // 处理标签数据\n+      const labelData = await beforeRequestLabelHandler(formValues.label);\n+      // 处理成员数据,判断哪些是新增的,哪些是删除的\n+      const memberData = await getAddAndDeleteMembers(formValues.members, projectDetailInfo.members, getItemFromUserList);\n+\n+      await checkVisibilityAndPurposeTypeHandler({\n+        purposeType: formValues.type,\n+        visibilityLevel: formValues.visibilityLevel || projectDetailInfo.visibilityLevel,\n+        groupId: projectDetailInfo?.groupId,\n+      });\n+\n+      const errorContent: any[] = [];\n+      // 只校验addMembers的权限是否存在冲突,已存在的不校验\n+      if (memberData.addMembers && memberData.addMembers.length > 0) {\n+        await checkIrregularMemberHandler({\n+          domain: projectDetailInfo.repositoryHttpUrl,\n+          members: memberData.addMembers,\n+          purposeType: formValues.type,\n+          visibilityLevel: formValues.visibilityLevel || projectDetailInfo.visibilityLevel,\n+          reviserId: currentUserId,\n+          checkType: checkTypeStatusMap.repository.code,\n+        });\n \n-    /**\n-     * 处理提交的方法\n-     */\n-    const submitHandler = async () => {\n-        try {\n-            const formValues = await form.validateFields();\n-            setSubmitLoading(true);\n-\n-            // 处理标签数据\n-            const labelData = await beforeRequestLabelHandler(formValues.label);\n-            // 处理成员数据,判断哪些是新增的,哪些是删除的\n-            const memberData = await getAddAndDeleteMembers(formValues.members, projectDetailInfo.members, getItemFromUserList);\n-\n-            await checkVisibilityAndPurposeTypeHandler({\n-                purposeType: formValues.type,\n-                visibilityLevel: formValues.visibilityLevel || projectDetailInfo.visibilityLevel,\n-                groupId: projectDetailInfo?.groupId\n-            });\n-\n-            const errorContent: any[] = [];\n-            // 只校验addMembers的权限是否存在冲突,已存在的不校验\n-            if (memberData.addMembers && memberData.addMembers.length > 0) {\n-                await checkIrregularMemberHandler({\n-                    domain: projectDetailInfo.repositoryHttpUrl,\n-                    members: memberData.addMembers,\n-                    purposeType: formValues.type,\n-                    visibilityLevel: formValues.visibilityLevel || projectDetailInfo.visibilityLevel,\n-                    reviserId: currentUserId,\n-                    checkType: checkTypeStatusMap.repository.code\n-                });\n-\n-                const conflictMembers = await validateMember("permission", projectDetailInfo.repositoryUrl, memberData.addMembers, "成员", false);\n-                if (!conflictMembers) {\n-                    setSubmitLoading(false);\n-                    return;\n-                }\n-                // 不是false也不是true,说明是有dom对象的,将其加进来\n-                if (conflictMembers !== true) {\n-                    errorContent.push(conflictMembers);\n-                }\n-            }\n-            if (errorContent.length > 0) {\n-                getNotification("提交申请时发生错误!", errorContent, 8);\n-                setSubmitLoading(false);\n-                return;\n-            }\n-\n-            // 处理子仓数据\n-            const slaveRepositories = await beforeRequestRepositoryHandler(formValues.slaveRepositories, "slave");\n-            // 处理依赖仓数据\n-            const dependencyRepoData = await beforeRequestRepositoryHandler(formValues.dependencyRepositories, "dependency");\n-            const openApiApps = beforeRequestOpenApiHandler(formValues.openApiApps);\n-            const gsCollects = beforeRequestCollectionHandler(formValues.gsCollects)\n-\n-            // 判断以下常量是否修改过,若没有修改过则不传参\n-            let { description, state, visibilityLevel, branchControl, codeReviewState, type, whitelistRegex } = formValues;\n-            if (whitelistRegex === projectDetailInfo.whitelistRegex) {\n-                whitelistRegex = undefined;\n-            }\n-            description = description === projectDetailInfo.description ? undefined : description;\n-            state = state === projectDetailInfo.state ? undefined : state;\n-            visibilityLevel = visibilityLevel === projectDetailInfo.visibilityLevel ? undefined : visibilityLevel;\n-            branchControl = branchControl === projectDetailInfo.branchControl ? undefined : branchControl;\n-            codeReviewState = codeReviewState === projectDetailInfo.codeReviewState ? undefined : codeReviewState;\n-            type = type === projectDetailInfo.type ? undefined : type;\n-\n-\n-            // 获取构建的参数,准备发起请求\n-            let requestParam: any = {};\n-            setUpdateProjectDetailParam({\n-                ...updateProjectDetailParam, ...formValues, description, state, visibilityLevel, branchControl, codeReviewState,\n-                ...labelData, ...memberData, label: undefined, members: undefined, dependencyRepositories: undefined,\n-                slaveRepositories, ...dependencyRepoData, type, whitelistRegex, openApiApps, gsCollects\n-            });\n-            // 此处使用setstate的回调函数,是为了取得最新值,否则因为异步取的还是旧值\n-            setUpdateProjectDetailParam((item: any) => {\n-                requestParam = item;\n-                return item;\n-            });\n-\n-            const updateProjectHandler = async () => {\n-                // 发起修改请求\n-                const response = await RequestUtils(updateProjectDetail, requestParam, { msg: \'更新project信息\' });\n-                if (response.success) {\n-                    setUpdateMode(false);\n-                    setReload(true);\n-                    setConfirmVisible(false);\n-                    setUpdateProjectDetailParam(cloneDeep(initUpdateParam));\n-                    setRequestMembersStatus(false);\n-                }\n-            }\n-\n-            const confirmIrregularMemberModal = await showIrregularMemberListModal({\n-                purposeType: formValues.type,\n-                repositoryId: projectDetailInfo.id\n-            });\n-\n-            if (confirmIrregularMemberModal) {\n-                confirmIrregularMemberModal?.update({\n-                    onOk: async () => {\n-                        await updateProjectHandler()\n-                    }\n-                })\n-            } else {\n-                await updateProjectHandler();\n-            }\n-        } catch (e: any) {\n-            // 事故多发地，输出下日志用于线上排查\n-            console.log(e);\n-            if (e.message === FrontendError.END_PROCESS) {\n-                return;\n-            }\n-            const description = form.getFieldValue("modifyDescription");\n-            // 如果修改原因不是空的,说明参数校验出错\n-            if (description && description !== "") {\n-                setConfirmVisible(false);\n-                message.warning("请求出错,请检查数据是否填写正确", 3);\n-            }\n-        } finally {\n-            setSubmitLoading(false);\n+        const conflictMembers = await validateMember(\'permission\', projectDetailInfo.repositoryUrl, memberData.addMembers, \'成员\', false);\n+        if (!conflictMembers) {\n+          setSubmitLoading(false);\n+          return;\n         }\n-    }\n-\n-    /**\n-     * 获取标签列表\n-     * @param typeId\n-     */\n-    const getLabelList = async (typeId: number) => {\n-        const response = await getLabelListByTypeId(typeId);\n+        // 不是false也不是true,说明是有dom对象的,将其加进来\n+        if (conflictMembers !== true) {\n+          errorContent.push(conflictMembers);\n+        }\n+      }\n+      if (errorContent.length > 0) {\n+        getNotification(\'提交申请时发生错误!\', errorContent, 8);\n+        setSubmitLoading(false);\n+        return;\n+      }\n+\n+      // 处理子仓数据\n+      const slaveRepositories = await beforeRequestRepositoryHandler(formValues.slaveRepositories, \'slave\');\n+      // 处理依赖仓数据\n+      const dependencyRepoData = await beforeRequestRepositoryHandler(formValues.dependencyRepositories, \'dependency\');\n+      const openApiApps = beforeRequestOpenApiHandler(formValues.openApiApps);\n+      const gsCollects = beforeRequestCollectionHandler(formValues.gsCollects);\n+\n+      // 判断以下常量是否修改过,若没有修改过则不传参\n+      let { description, state, visibilityLevel, branchControl, codeReviewState, type, whitelistRegex } = formValues;\n+      if (whitelistRegex === projectDetailInfo.whitelistRegex) {\n+        whitelistRegex = undefined;\n+      }\n+      description = description === projectDetailInfo.description ? undefined : description;\n+      state = state === projectDetailInfo.state ? undefined : state;\n+      visibilityLevel = visibilityLevel === projectDetailInfo.visibilityLevel ? undefined : visibilityLevel;\n+      branchControl = branchControl === projectDetailInfo.branchControl ? undefined : branchControl;\n+      codeReviewState = codeReviewState === projectDetailInfo.codeReviewState ? undefined : codeReviewState;\n+      type = type === projectDetailInfo.type ? undefined : type;\n+\n+      // 获取构建的参数,准备发起请求\n+      let requestParam: any = {};\n+      setUpdateProjectDetailParam({\n+        ...updateProjectDetailParam,\n+        ...formValues,\n+        description,\n+        state,\n+        visibilityLevel,\n+        branchControl,\n+        codeReviewState,\n+        ...labelData,\n+        ...memberData,\n+        label: undefined,\n+        members: undefined,\n+        dependencyRepositories: undefined,\n+        slaveRepositories,\n+        ...dependencyRepoData,\n+        type,\n+        whitelistRegex,\n+        openApiApps,\n+        gsCollects,\n+      });\n+      // 此处使用setstate的回调函数,是为了取得最新值,否则因为异步取的还是旧值\n+      setUpdateProjectDetailParam((item: any) => {\n+        requestParam = item;\n+        return item;\n+      });\n+\n+      const updateProjectHandler = async () => {\n+        // 发起修改请求\n+        const response = await RequestUtils(updateProjectDetail, requestParam, { msg: \'更新project信息\' });\n         if (response.success) {\n-            const responseData = response.data;\n-            const labelOption: any[] = [];\n-            responseData.map((item: labelDataType) => {\n-                const colorValue = item.colorValue ? item.colorValue.slice(0, -1) : "rgb(255, 255, 255)";\n-                const backgroundColor = `${colorValue}, 0.12)`;\n-                return labelOption.push(\n-                    <Option key={item.id}\n-                        title={item.name}\n-                        value={item.id}\n-                        className={styles.labelSelect}\n-                    >\n-                        <Label backgroundColor={backgroundColor} color={item.colorValue ? item.colorValue : \'#ffffff\'} name={item.name ? item.name : ""} maxWidth="100%" />\n-                    </Option>\n-                )\n-            })\n-            setLabelList(responseData);\n-            setLabelOptionList(labelOption);\n+          setUpdateMode(false);\n+          setReload(true);\n+          setConfirmVisible(false);\n+          setUpdateProjectDetailParam(cloneDeep(initUpdateParam));\n+          setRequestMembersStatus(false);\n         }\n+      };\n+\n+      const confirmIrregularMemberModal = await showIrregularMemberListModal({\n+        purposeType: formValues.type,\n+        repositoryId: projectDetailInfo.id,\n+      });\n+\n+      if (confirmIrregularMemberModal) {\n+        confirmIrregularMemberModal?.update({\n+          onOk: async () => {\n+            await updateProjectHandler();\n+          },\n+        });\n+      } else {\n+        await updateProjectHandler();\n+      }\n+    } catch (e: any) {\n+      // 事故多发地，输出下日志用于线上排查\n+      console.log(e);\n+      if (e.message === FrontendError.END_PROCESS) {\n+        return;\n+      }\n+      const description = form.getFieldValue(\'modifyDescription\');\n+      // 如果修改原因不是空的,说明参数校验出错\n+      if (description && description !== \'\') {\n+        setConfirmVisible(false);\n+        message.warning(\'请求出错,请检查数据是否填写正确\', 3);\n+      }\n+    } finally {\n+      setSubmitLoading(false);\n     }\n-\n-    /**\n-     * 根据type转化对应antd组件\n-     */\n-    const tagTypeToAntdItem = (tagType: string, formItemProps?: commonPropsDataType) => {\n-        switch (tagType.toLowerCase()) {\n-            case "input":\n-                return <Input {...formItemProps?.apiOption} />;\n-            case "textarea":\n-                return <TextArea {...formItemProps?.apiOption} />;\n-            case "select":\n-                if (!formItemProps) {\n-                    message.warning("未传递select组件的option和属性,Select组件将失效!");\n-                    // throw new Error("未传递select组件的option!");\n-                }\n-                return (\n-                    <Select {...formItemProps?.apiOption}>\n-                        {formItemProps ? formItemProps.selectOptions : undefined}\n-                    </Select>\n-                )\n-            default:\n-                return null;\n+  };\n+\n+  /**\n+   * 获取标签列表\n+   * @param typeId\n+   */\n+  const getLabelList = async (typeId: number) => {\n+    const response = await getLabelListByTypeId(typeId);\n+    if (response.success) {\n+      const responseData = response.data;\n+      const labelOption: any[] = [];\n+      responseData.map((item: labelDataType) => {\n+        const colorValue = item.colorValue ? item.colorValue.slice(0, -1) : \'rgb(255, 255, 255)\';\n+        const backgroundColor = `${colorValue}, 0.12)`;\n+        return labelOption.push(\n+          <Option key={item.id} title={item.name} value={item.id} className={styles.labelSelect}>\n+            <Label\n+              backgroundColor={backgroundColor}\n+              color={item.colorValue ? item.colorValue : \'#ffffff\'}\n+              name={item.name ? item.name : \'\'}\n+              maxWidth="100%"\n+            />\n+          </Option>,\n+        );\n+      });\n+      setLabelList(responseData);\n+      setLabelOptionList(labelOption);\n+    }\n+  };\n+\n+  /**\n+   * 根据type转化对应antd组件\n+   */\n+  const tagTypeToAntdItem = (tagType: string, formItemProps?: commonPropsDataType) => {\n+    switch (tagType.toLowerCase()) {\n+      case \'input\':\n+        return <Input {...formItemProps?.apiOption} />;\n+      case \'textarea\':\n+        return <TextArea {...formItemProps?.apiOption} />;\n+      case \'select\':\n+        if (!formItemProps) {\n+          message.warning(\'未传递select组件的option和属性,Select组件将失效!\');\n+          // throw new Error("未传递select组件的option!");\n         }\n+        return <Select {...formItemProps?.apiOption}>{formItemProps ? formItemProps.selectOptions : undefined}</Select>;\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  /**\n+   * 将接口返回的内容转化为description里的文本内容和修改的表单项\n+   * @param dataProps 数据基础内容,包含源数据, 枚举数据, "标签"行标志位\n+   * @param updateCondition 更新判断条件,是否为管理员或负责人\n+   * @param formItemProps antd的formitem属性\n+   * @returns\n+   */\n+  const responseDataToContent = (dataProps: dataPropsDataType, updateCondition: boolean, formItemProps?: formItemPropsDataType) => {\n+    const { responseData, dataEnum, isLabel } = dataProps;\n+    let content = responseData;\n+\n+    // 进入编辑模式后,返回的是form表单内容\n+    if (formItemProps && updateCondition && updateMode) {\n+      const { fieldName, initialValue, tagType, componentProps } = formItemProps;\n+      return (\n+        <Form form={form} className={styles.updateForm}>\n+          <FormItem name={fieldName} initialValue={initialValue}>\n+            {tagTypeToAntdItem(tagType, componentProps)}\n+          </FormItem>\n+        </Form>\n+      );\n     }\n \n-    /**\n-     * 将接口返回的内容转化为description里的文本内容和修改的表单项\n-     * @param dataProps 数据基础内容,包含源数据, 枚举数据, "标签"行标志位\n-     * @param updateCondition 更新判断条件,是否为管理员或负责人\n-     * @param formItemProps antd的formitem属性\n-     * @returns\n-     */\n-    const responseDataToContent = (\n-        dataProps: dataPropsDataType,\n-        updateCondition: boolean,\n-        formItemProps?: formItemPropsDataType\n-    ) => {\n-        const { responseData, dataEnum, isLabel } = dataProps;\n-        let content = responseData;\n-\n-        // 进入编辑模式后,返回的是form表单内容\n-        if (formItemProps && updateCondition && updateMode) {\n-            const { fieldName, initialValue, tagType, componentProps } = formItemProps;\n-            return (\n-                <Form form={form} className={styles.updateForm}>\n-                    <FormItem name={fieldName} initialValue={initialValue}>\n-                        {tagTypeToAntdItem(tagType, componentProps)}\n-                    </FormItem>\n-                </Form>\n-            );\n+    // 如果不是"标签"字段,则根据提供的枚举类直接返回普通文本(非编辑模式下)\n+    if (!isLabel && dataEnum) {\n+      const numberToObj = dataEnum[responseData];\n+      if (numberToObj) {\n+        if (numberToObj.text !== undefined) {\n+          content = numberToObj.text;\n         }\n-\n-        // 如果不是"标签"字段,则根据提供的枚举类直接返回普通文本(非编辑模式下)\n-        if (!isLabel && dataEnum) {\n-            const numberToObj = dataEnum[responseData];\n-            if (numberToObj) {\n-                if (numberToObj.text !== undefined) {\n-                    content = numberToObj.text;\n-                }\n-            }\n-            return <span className="gs_needToWrap">{content}</span>;\n+      }\n+      return <span className="gs_needToWrap">{content}</span>;\n+    }\n+    if (!isLabel && !dataEnum) {\n+      return <span className="gs_needToWrap">{content}</span>;\n+    }\n+    // 标签的非编辑模式返回\n+    return responseData.map((item: labelDataType) => {\n+      const colorValue = item.colorValue ? item.colorValue.slice(0, -1) : \'rgb(255, 255, 255)\';\n+      const backgroundColor = `${colorValue}, 0.12)`;\n+      return (\n+        <Label\n+          key={item.id}\n+          backgroundColor={backgroundColor}\n+          color={item.colorValue ? item.colorValue : \'#ffffff\'}\n+          name={item.name ? item.name : \'\'}\n+        />\n+      );\n+    });\n+  };\n+\n+  // ----------穿梭框相关----------\n+\n+  /**\n+   * 格式化用户数据为穿梭框需要的格式\n+   * @param list 用户列表\n+   * @returns\n+   */\n+  const formatUserList = (list: memberDataType[]) => {\n+    const formatList: transferDataSourceDataType[] = [];\n+    list.forEach((item: memberDataType) => {\n+      formatList.push({\n+        key: item.id.toString(),\n+        title: item.nickname,\n+        description: item.username,\n+      });\n+    });\n+    return formatList;\n+  };\n+\n+  // 获取用户列表,用于成员的选择\n+  const getUserListHandler = async () => {\n+    const response = await RequestUtils(getUserListInGM, undefined, { msg: \'获取用户列表\' });\n+    if (response.success) {\n+      const userListFromResponse: memberDataType[] = response.data;\n+      const userOption: any[] = [];\n+      userListFromResponse.map((item: memberDataType) => {\n+        return userOption.push(\n+          <Option key={item.username} title={item.username} value={item.id} disabled={false}>\n+            {`${item.nickname}(${item.username})`}\n+          </Option>,\n+        );\n+      });\n+      setUserOptionForSelect(userOption);\n+      setUserList(formatUserList(response.data));\n+    }\n+  };\n+\n+  /** 获取并设置openApi值 */\n+  const getAndSetOpenApiList = async () => {\n+    const response = await RequestUtils(getGmOpenApiList, undefined, { msg: \'获取OpenApi列表\' });\n+    setOpenApiList(response.success ? response.data : []);\n+  };\n+\n+  /** 获取并设置集合 */\n+  const getAndSetCollection = () => {\n+    getCollectionList().then((response) => {\n+      setCollectionList(response.data);\n+    });\n+  };\n+\n+  // 穿梭框的搜索判断\n+  const filterOption = (inputValue: string, option: any) =>\n+    option.title.indexOf(inputValue) > -1 || option.description.indexOf(inputValue) > -1;\n+\n+  /**\n+   * 处理穿梭框数据变化,根据移动方向和原始人员列表判断是否需要加入变更参数里\n+   * @param newTargetKeys 新的targetKeys数组\n+   * @param direction 移动方向\n+   * @param moveKeys 移动的userId\n+   */\n+  const handleApproversTargetKeysChange = (newTargetKeys: string[], direction: string, moveKeys: string[]) => {\n+    // 如果往右移动,说明是新增负责人\n+    // 需要判断用户是否已存在原始数据里,若存在说明是无意义的移动\n+    const approversFromDetail: memberDataType[] = projectDetailInfo.approvers;\n+    let addApproversFromParam: memberDataType[] = updateProjectDetailParam.addApprovers || [];\n+    if (direction === \'right\') {\n+      // moveKeys只有更新的数据\n+      moveKeys.map((userId: string) => {\n+        if (!approversFromDetail.find((userInApprovers: memberDataType) => userInApprovers.id === +userId)) {\n+          const userInfo: any = getItemFromUserList(+userId);\n+          return addApproversFromParam.push(userInfo);\n         }\n-        if (!isLabel && !dataEnum) {\n-            return <span className="gs_needToWrap">{content}</span>;\n+        return \'\';\n+      });\n+      setUpdateProjectDetailParam({ ...updateProjectDetailParam, addApprovers: addApproversFromParam });\n+    } else {\n+      if (newTargetKeys.length === 0) {\n+        return message.warning(\'不能删除所有负责人!\');\n+      }\n+      // 要从update参数里查找到数据,用该数据filter掉已经delete的数据\n+      const deleteApproversFromParam: memberDataType[] = updateProjectDetailParam.deleteApprovers || [];\n+      // moveKeys只有更新的数据\n+      moveKeys.map((userId: string) => {\n+        // 若在初始数据中能找到当前用户ID,说明是要删除的,直接加入deleteApprovers里\n+        // 若在update参数中找不到当前用户ID,说明从未删除过该用户,直接加入deleteApprovers里\n+        if (\n+          approversFromDetail.find((userInApprovers: memberDataType) => userInApprovers.id === +userId) &&\n+          !deleteApproversFromParam.find((userInParam: memberDataType) => userInParam.id === +userId)\n+        ) {\n+          const userInfo: any = getItemFromUserList(+userId);\n+          userInfo.accessLevel = accessLevelStatusMap.delete.code;\n+          return deleteApproversFromParam.push(userInfo);\n         }\n-        // 标签的非编辑模式返回\n-        return (\n-            responseData.map((item: labelDataType) => {\n-                const colorValue = item.colorValue ? item.colorValue.slice(0, -1) : "rgb(255, 255, 255)";\n-                const backgroundColor = `${colorValue}, 0.12)`;\n-                return <Label key={item.id} backgroundColor={backgroundColor} color={item.colorValue ? item.colorValue : "#ffffff"} name={item.name ? item.name : ""} />\n-            })\n-        )\n+        // 如果当前删除用户的在add参数里面也有,说明是增加后删除,只需删除掉add里面的数据即可\n+        if (addApproversFromParam.find((item) => item.id === +userId)) {\n+          addApproversFromParam = addApproversFromParam.filter((item) => item.id !== +userId);\n+          return \'\';\n+        }\n+        return \'\';\n+      });\n+      setUpdateProjectDetailParam({\n+        ...updateProjectDetailParam,\n+        deleteApprovers: deleteApproversFromParam,\n+        addApprovers: addApproversFromParam,\n+      });\n     }\n-\n-    // ----------穿梭框相关----------\n-\n-    /**\n-     * 格式化用户数据为穿梭框需要的格式\n-     * @param list 用户列表\n-     * @returns\n-     */\n-    const formatUserList = (list: memberDataType[]) => {\n-        const formatList: transferDataSourceDataType[] = []\n-        list.forEach((item: memberDataType) => {\n-            formatList.push({\n-                key: item.id.toString(),\n-                title: item.nickname,\n-                description: item.username,\n-            })\n+    setTargetKeysForTransfer(newTargetKeys);\n+  };\n+\n+  // ProDescription组件的列数据\n+  const coulumn: any = [\n+    {\n+      title: \'申请人\',\n+      key: \'applyUser\',\n+      span: 4,\n+      render: (_: any, record: projectDetailDataType) => {\n+        if (record.applyUsername) {\n+          return (\n+            <span>\n+              {record.applyUserNickname}({record.applyUsername})\n+            </span>\n+          );\n+        }\n+        return <span>{record.applyUserNickname}</span>;\n+      },\n+    },\n+    {\n+      title: \'名称\',\n+      key: \'name\',\n+      dataIndex: \'name\',\n+      span: 4,\n+    },\n+    {\n+      title: \'分支管控\',\n+      key: \'branchControl\',\n+      dataIndex: \'branchControl\',\n+      span: 4,\n+      tooltip: gitManageFieldTips.branchControl.tooltip,\n+      render: (branchControl: number) => {\n+        return responseDataToContent(\n+          { responseData: branchControl, dataEnum: commonStateValueEnum, isLabel: false },\n+          isAdmin || isApprover,\n+          {\n+            fieldName: \'branchControl\',\n+            initialValue: branchControl,\n+            tagType: \'select\',\n+            componentProps: {\n+              selectOptions: switchOptionForSelect,\n+              apiOption: {\n+                style: { width: \'30%\' },\n+                onChange: (value: any) => {\n+                  setUpdateProjectDetailParam({ ...updateProjectDetailParam, branchControl: value });\n+                },\n+              },\n+            },\n+          },\n+        );\n+      },\n+    },\n+    {\n+      title: \'commit 校验\',\n+      key: \'commitSpecificationState\',\n+      dataIndex: \'commitSpecificationState\',\n+      span: 4,\n+      tooltip: gitManageFieldTips.commitSpecificationState.tooltip,\n+      render: (_value) => {\n+        return responseDataToContent({ responseData: _value, dataEnum: commonStateValueEnum, isLabel: false }, isAdmin || isApprover, {\n+          fieldName: \'commitSpecificationState\',\n+          initialValue: _value,\n+          tagType: \'select\',\n+          componentProps: {\n+            selectOptions: switchOptionForSelect,\n+            apiOption: {\n+              style: { width: \'30%\' },\n+              onChange: (value: any) => {\n+                setUpdateProjectDetailParam({ ...updateProjectDetailParam, commitSpecificationState: value });\n+              },\n+            },\n+          },\n         });\n-        return formatList;\n-    }\n-\n-    // 获取用户列表,用于成员的选择\n-    const getUserListHandler = async () => {\n-        const response = await RequestUtils(getUserListInGM, undefined, { msg: \'获取用户列表\' });\n-        if (response.success) {\n-            const userListFromResponse: memberDataType[] = response.data;\n-            const userOption: any[] = [];\n-            userListFromResponse.map((item: memberDataType) => {\n-                return userOption.push(\n-                    <Option key={item.username}\n-                        title={item.username}\n-                        value={item.id}\n-                        disabled={false}\n-                    >\n-                        {`${item.nickname}(${item.username})`}\n-                    </Option>\n-                )\n-            })\n-            setUserOptionForSelect(userOption);\n-            setUserList(formatUserList(response.data));\n+      },\n+    },\n+    {\n+      title: \'分支管控正则\',\n+      key: \'whitelistRegex\',\n+      dataIndex: \'whitelistRegex\',\n+      span: 4,\n+      tooltip: gitManageFieldTips.whitelistRegex.tooltip,\n+      render: (whitelistRegex: string) => {\n+        return responseDataToContent({ responseData: whitelistRegex, dataEnum: undefined, isLabel: false }, isAdmin || isApprover, {\n+          fieldName: \'whitelistRegex\',\n+          initialValue: whitelistRegex,\n+          tagType: \'input\',\n+          componentProps: {\n+            apiOption: {\n+              style: { width: \'30%\' },\n+              onBlur: () => {\n+                setUpdateProjectDetailParam({\n+                  ...updateProjectDetailParam,\n+                  whitelistRegex: form.getFieldValue(\'whitelistRegex\')?.trim(),\n+                });\n+              },\n+              placeholder: gitManageFieldTips.whitelistRegex.placeholder,\n+            },\n+          },\n+        });\n+      },\n+    },\n+    {\n+      title: \'代码检视开关\',\n+      key: \'codeReviewState\',\n+      dataIndex: \'codeReviewState\',\n+      span: 4,\n+      tooltip: \'\',\n+      render: (codeReviewState: number) => {\n+        return responseDataToContent(\n+          { responseData: codeReviewState, dataEnum: commonOpenStateValueEnum, isLabel: false },\n+          isAdmin || isApprover,\n+          {\n+            fieldName: \'codeReviewState\',\n+            initialValue: codeReviewState,\n+            tagType: \'select\',\n+            componentProps: {\n+              selectOptions: switchOptionForSelect,\n+              apiOption: {\n+                style: { width: \'30%\' },\n+                onChange: (value: any) => {\n+                  setUpdateProjectDetailParam({ ...updateProjectDetailParam, codeReviewState: value });\n+                  setCodeReviewStateValue(value);\n+                },\n+              },\n+            },\n+          },\n+        );\n+      },\n+    },\n+    {\n+      title: \'projectID\',\n+      key: \'projectId\',\n+      dataIndex: \'projectId\',\n+      span: 4,\n+    },\n+    {\n+      title: \'所属group\',\n+      key: \'groupName\',\n+      dataIndex: \'groupName\',\n+      span: 4,\n+    },\n+    {\n+      title: \'可见等级\',\n+      key: \'visibilityLevel\',\n+      dataIndex: \'visibilityLevel\',\n+      span: 4,\n+      render: (visibilityLevel: number) => {\n+        return responseDataToContent({ responseData: visibilityLevel, dataEnum: groupVisibilityLevelValueEnum, isLabel: false }, isAdmin, {\n+          fieldName: \'visibilityLevel\',\n+          initialValue: visibilityLevel,\n+          tagType: \'select\',\n+          componentProps: {\n+            selectOptions: visibilityLevelOptionForSelect,\n+            apiOption: {\n+              style: { width: \'30%\' },\n+              onChange: (value: any) => {\n+                setUpdateProjectDetailParam({ ...updateProjectDetailParam, visibilityLevel: value });\n+              },\n+            },\n+          },\n+        });\n+      },\n+    },\n+    {\n+      title: \'project用途\',\n+      key: \'type\',\n+      dataIndex: \'type\',\n+      span: 4,\n+      render: (type: number) => {\n+        return responseDataToContent({ responseData: type, dataEnum: purposeTypeValueEnum, isLabel: false }, isAdmin || isApprover, {\n+          fieldName: \'type\',\n+          initialValue: type,\n+          tagType: \'select\',\n+          componentProps: {\n+            selectOptions: Object.keys(purposeTypeValueEnum).map((item) => {\n+              return <Option value={+item}>{purposeTypeValueEnum[item].text}</Option>;\n+            }),\n+            apiOption: {\n+              style: { width: \'30%\' },\n+              onChange: (value: any) => {\n+                setUpdateProjectDetailParam({ ...updateProjectDetailParam, type: value });\n+              },\n+            },\n+          },\n+        });\n+      },\n+    },\n+    {\n+      title: \'状态\',\n+      key: \'state\',\n+      dataIndex: \'state\',\n+      span: 4,\n+      render: (state: number) => {\n+        return responseDataToContent({ responseData: state, dataEnum: commonStateValueEnum, isLabel: false }, isAdmin || isApprover, {\n+          fieldName: \'state\',\n+          initialValue: state,\n+          tagType: \'select\',\n+          componentProps: {\n+            selectOptions: stateOptionForSelect,\n+            apiOption: {\n+              style: { width: \'30%\' },\n+              onChange: (value: any) => {\n+                setUpdateProjectDetailParam({ ...updateProjectDetailParam, state: value });\n+              },\n+            },\n+          },\n+        });\n+      },\n+    },\n+    {\n+      title: \'OpenApi配置\',\n+      key: \'openApiApps\',\n+      dataIndex: \'openApiApps\',\n+      tooltip: gitManageFieldTips.openApiApps.tooltip,\n+      span: 4,\n+      render: (openApiApps: openApiDataType[]) => {\n+        if (!updateMode) {\n+          if (openApiApps && openApiApps.length > 0) {\n+            return openApiApps.map((item) => {\n+              return (\n+                <React.Fragment key={`openApiApp-${item.id}`}>\n+                  <div>{item.title}</div>\n+                </React.Fragment>\n+              );\n+            });\n+          }\n+          return \'\';\n         }\n-    }\n-\n-    /** 获取并设置openApi值 */\n-    const getAndSetOpenApiList = async () => {\n-        const response = await RequestUtils(getGmOpenApiList, undefined, { msg: "获取OpenApi列表" });\n-        setOpenApiList(response.success ? response.data : []);\n-    }\n-\n-    /** 获取并设置集合 */\n-    const getAndSetCollection = () => {\n-        getCollectionList().then(response => {\n-            setCollectionList(response.data);\n+        return responseDataToContent({ responseData: openApiApps, dataEnum: undefined, isLabel: false }, isAdmin || isApprover, {\n+          fieldName: \'openApiApps\',\n+          initialValue: (openApiApps || []).map((item) => item.id),\n+          tagType: \'select\',\n+          componentProps: {\n+            selectOptions: openApiList.map((item) => (\n+              <Option value={item.id} title={item.title}>\n+                {item.title}\n+              </Option>\n+            )),\n+            apiOption: {\n+              style: { width: \'50%\' },\n+              optionLabelProp: \'title\',\n+              mode: \'multiple\',\n+              allowClear: true,\n+              showSearch: true,\n+              placeholder: \'请选择\',\n+              filterOption: (input: any, option: any) => {\n+                return option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n+              },\n+            },\n+          },\n         });\n-    };\n-\n-    // 穿梭框的搜索判断\n-    const filterOption = (inputValue: string, option: any) => option.title.indexOf(inputValue) > -1 || option.description.indexOf(inputValue) > -1;\n-\n-    /**\n-     * 处理穿梭框数据变化,根据移动方向和原始人员列表判断是否需要加入变更参数里\n-     * @param newTargetKeys 新的targetKeys数组\n-     * @param direction 移动方向\n-     * @param moveKeys 移动的userId\n-     */\n-    const handleApproversTargetKeysChange = (newTargetKeys: string[], direction: string, moveKeys: string[]) => {\n-        // 如果往右移动,说明是新增负责人\n-        // 需要判断用户是否已存在原始数据里,若存在说明是无意义的移动\n-        const approversFromDetail: memberDataType[] = projectDetailInfo.approvers;\n-        let addApproversFromParam: memberDataType[] = updateProjectDetailParam.addApprovers || [];\n-        if (direction === "right") {\n-            // moveKeys只有更新的数据\n-            moveKeys.map((userId: string) => {\n-                if (!approversFromDetail.find((userInApprovers: memberDataType) => userInApprovers.id === +userId)) {\n-                    const userInfo: any = getItemFromUserList(+userId);\n-                    return addApproversFromParam.push(userInfo);\n-                }\n-                return "";\n-            })\n-            setUpdateProjectDetailParam({ ...updateProjectDetailParam, addApprovers: addApproversFromParam });\n-        } else {\n-            if (newTargetKeys.length === 0) {\n-                return message.warning("不能删除所有负责人!");\n-            }\n-            // 要从update参数里查找到数据,用该数据filter掉已经delete的数据\n-            const deleteApproversFromParam: memberDataType[] = updateProjectDetailParam.deleteApprovers || [];\n-            // moveKeys只有更新的数据\n-            moveKeys.map((userId: string) => {\n-                // 若在初始数据中能找到当前用户ID,说明是要删除的,直接加入deleteApprovers里\n-                // 若在update参数中找不到当前用户ID,说明从未删除过该用户,直接加入deleteApprovers里\n-                if (approversFromDetail.find((userInApprovers: memberDataType) => userInApprovers.id === +userId) &&\n-                    !deleteApproversFromParam.find((userInParam: memberDataType) => userInParam.id === +userId)\n-                ) {\n-                    const userInfo: any = getItemFromUserList(+userId);\n-                    userInfo.accessLevel = accessLevelStatusMap.delete.code;\n-                    return deleteApproversFromParam.push(userInfo);\n-                }\n-                // 如果当前删除用户的在add参数里面也有,说明是增加后删除,只需删除掉add里面的数据即可\n-                if (addApproversFromParam.find(item => item.id === +userId)) {\n-                    addApproversFromParam = addApproversFromParam.filter(item => item.id !== +userId);\n-                    return "";\n-                }\n-                return "";\n-            })\n-            setUpdateProjectDetailParam({\n-                ...updateProjectDetailParam,\n-                deleteApprovers: deleteApproversFromParam,\n-                addApprovers: addApproversFromParam\n+      },\n+    },\n+    {\n+      title: \'标签\',\n+      key: \'labels\',\n+      dataIndex: \'labels\',\n+      span: 4,\n+      render: (labels: labelDataType[]) => {\n+        const labelInitialValue: number[] = [];\n+        labels.forEach((item) => {\n+          labelInitialValue.push(item.id);\n+        });\n+        return responseDataToContent({ responseData: labels, dataEnum: undefined, isLabel: true }, isAdmin || isApprover, {\n+          fieldName: \'label\',\n+          initialValue: labelInitialValue,\n+          tagType: \'select\',\n+          componentProps: {\n+            selectOptions: labelOptionList,\n+            apiOption: {\n+              style: { width: \'50%\' },\n+              optionLabelProp: \'title\',\n+              mode: \'multiple\',\n+              onSelect: (value: number) => {\n+                selectLabelHandler(value);\n+              },\n+              allowClear: true,\n+              showSearch: true,\n+              placeholder: \'请选择\',\n+              filterOption: (input: any, option: any) => {\n+                return option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n+              },\n+            },\n+          },\n+        });\n+      },\n+    },\n+    {\n+      title: \'所属集合\',\n+      key: \'gsCollects\',\n+      dataIndex: \'gsCollects\',\n+      tooltip: gitManageFieldTips.collection.tooltip,\n+      span: 4,\n+      render: (gsCollects: ICollection[]) => {\n+        if (!updateMode) {\n+          if (gsCollects && gsCollects.length > 0) {\n+            return gsCollects.map((item) => {\n+              return (\n+                <React.Fragment key={`collection-${item.id}`}>\n+                  <div>{item.name}</div>\n+                </React.Fragment>\n+              );\n             });\n+          }\n+          return \'\';\n         }\n-        setTargetKeysForTransfer(newTargetKeys);\n-    }\n-\n-    // ProDescription组件的列数据\n-    const coulumn: any = [\n-        {\n-            title: "申请人",\n-            key: "applyUser",\n-            span: 4,\n-            render: (_: any, record: projectDetailDataType) => {\n-                if (record.applyUsername) {\n-                    return <span>{record.applyUserNickname}({record.applyUsername})</span>\n-                }\n-                return <span>{record.applyUserNickname}</span>\n-            }\n-        },\n-        {\n-            title: "名称",\n-            key: "name",\n-            dataIndex: "name",\n-            span: 4,\n-        },\n-        {\n-            title: "分支管控",\n-            key: "branchControl",\n-            dataIndex: "branchControl",\n-            span: 4,\n-            tooltip: gitManageFieldTips.branchControl.tooltip,\n-            render: (branchControl: number) => {\n-                return responseDataToContent(\n-                    { responseData: branchControl, dataEnum: commonStateValueEnum, isLabel: false },\n-                    isAdmin || isApprover,\n-                    {\n-                        fieldName: "branchControl", initialValue: branchControl, tagType: "select", componentProps: {\n-                            selectOptions: switchOptionForSelect,\n-                            apiOption: {\n-                                style: { width: \'30%\' },\n-                                onChange: (value: any) => {\n-                                    setUpdateProjectDetailParam({ ...updateProjectDetailParam, branchControl: value })\n-                                }\n-                            }\n-                        }\n-                    });\n-            }\n-        },\n-        {\n-            title: "分支管控正则",\n-            key: "whitelistRegex",\n-            dataIndex: "whitelistRegex",\n-            span: 4,\n-            tooltip: gitManageFieldTips.whitelistRegex.tooltip,\n-            render: (whitelistRegex: string) => {\n-                return responseDataToContent(\n-                    { responseData: whitelistRegex, dataEnum: undefined, isLabel: false },\n-                    isAdmin || isApprover,\n-                    {\n-                        fieldName: "whitelistRegex",\n-                        initialValue: whitelistRegex,\n-                        tagType: "input",\n-                        componentProps: {\n-                            apiOption: {\n-                                style: { width: \'30%\' },\n-                                onBlur: () => {\n-                                    setUpdateProjectDetailParam({\n-                                        ...updateProjectDetailParam,\n-                                        whitelistRegex: form.getFieldValue("whitelistRegex")?.trim()\n-                                    });\n-                                },\n-                                placeholder: gitManageFieldTips.whitelistRegex.placeholder,\n-                            }\n-                        }\n-                    });\n-            }\n-        },\n-        {\n-            title: "代码检视开关",\n-            key: "codeReviewState",\n-            dataIndex: "codeReviewState",\n-            span: 4,\n-            tooltip: "",\n-            render: (codeReviewState: number) => {\n-                return responseDataToContent(\n-                    { responseData: codeReviewState, dataEnum: commonOpenStateValueEnum, isLabel: false },\n-                    isAdmin || isApprover,\n-                    {\n-                        fieldName: "codeReviewState", initialValue: codeReviewState, tagType: "select", componentProps: {\n-                            selectOptions: switchOptionForSelect,\n-                            apiOption: {\n-                                style: { width: \'30%\' },\n-                                onChange: (value: any) => {\n-                                    setUpdateProjectDetailParam({ ...updateProjectDetailParam, codeReviewState: value });\n-                                    setCodeReviewStateValue(value);\n-                                }\n-                            }\n-                        }\n-                    });\n-            }\n-        },\n-        {\n-            title: "projectID",\n-            key: "projectId",\n-            dataIndex: "projectId",\n-            span: 4,\n-        },\n-        {\n-            title: "所属group",\n-            key: "groupName",\n-            dataIndex: "groupName",\n-            span: 4,\n-        },\n-        {\n-            title: "可见等级",\n-            key: "visibilityLevel",\n-            dataIndex: "visibilityLevel",\n-            span: 4,\n-            render: (visibilityLevel: number) => {\n-                return responseDataToContent(\n-                    { responseData: visibilityLevel, dataEnum: groupVisibilityLevelValueEnum, isLabel: false },\n-                    isAdmin,\n-                    {\n-                        fieldName: "visibilityLevel", initialValue: visibilityLevel, tagType: "select", componentProps: {\n-                            selectOptions: visibilityLevelOptionForSelect,\n-                            apiOption: {\n-                                style: { width: \'30%\' },\n-                                onChange: (value: any) => {\n-                                    setUpdateProjectDetailParam({ ...updateProjectDetailParam, visibilityLevel: value })\n-                                }\n-                            }\n-                        }\n-                    });\n-            }\n-        },\n-        {\n-            title: "project用途",\n-            key: "type",\n-            dataIndex: "type",\n-            span: 4,\n-            render: (type: number) => {\n-                return responseDataToContent(\n-                    { responseData: type, dataEnum: purposeTypeValueEnum, isLabel: false },\n-                    isAdmin || isApprover,\n-                    {\n-                        fieldName: "type", initialValue: type, tagType: "select", componentProps: {\n-                            selectOptions: Object.keys(purposeTypeValueEnum).map(item => {\n-                                return (<Option value={+item}>{purposeTypeValueEnum[item].text}</Option>)\n-                            }),\n-                            apiOption: {\n-                                style: { width: \'30%\' },\n-                                onChange: (value: any) => {\n-                                    setUpdateProjectDetailParam({ ...updateProjectDetailParam, type: value })\n-                                }\n-                            }\n-                        }\n-                    });\n-            }\n-        },\n-        {\n-            title: "状态",\n-            key: "state",\n-            dataIndex: "state",\n-            span: 4,\n-            render: (state: number) => {\n-                return responseDataToContent(\n-                    { responseData: state, dataEnum: commonStateValueEnum, isLabel: false },\n-                    isAdmin || isApprover,\n-                    {\n-                        fieldName: "state", initialValue: state, tagType: "select", componentProps: {\n-                            selectOptions: stateOptionForSelect,\n-                            apiOption: {\n-                                style: { width: \'30%\' },\n-                                onChange: (value: any) => {\n-                                    setUpdateProjectDetailParam({ ...updateProjectDetailParam, state: value })\n-                                }\n-                            }\n-                        }\n-                    });\n-            }\n-        },\n-        {\n-            title: "OpenApi配置",\n-            key: "openApiApps",\n-            dataIndex: "openApiApps",\n-            tooltip: gitManageFieldTips.openApiApps.tooltip,\n-            span: 4,\n-            render: (openApiApps: openApiDataType[]) => {\n-                if (!updateMode) {\n-                    if (openApiApps && openApiApps.length > 0) {\n-                        return (\n-                            openApiApps.map((item) => {\n-                                return (\n-                                    <React.Fragment key={`openApiApp-${item.id}`}>\n-                                        <div>\n-                                            {item.title}\n-                                        </div>\n-                                    </React.Fragment>\n-                                )\n-                            })\n-                        )\n-                    }\n-                    return "";\n-                }\n-                return responseDataToContent(\n-                    { responseData: openApiApps, dataEnum: undefined, isLabel: false },\n-                    isAdmin || isApprover,\n-                    {\n-                        fieldName: "openApiApps",\n-                        initialValue: (openApiApps || []).map(item => item.id),\n-                        tagType: "select",\n-                        componentProps: {\n-                            selectOptions: openApiList.map(item => (\n-                                <Option value={item.id} title={item.title}>\n-                                    {item.title}\n-                                </Option>\n-                            )),\n-                            apiOption: {\n-                                style: { width: \'50%\' },\n-                                optionLabelProp: "title",\n-                                mode: "multiple",\n-                                allowClear: true,\n-                                showSearch: true,\n-                                placeholder: "请选择",\n-                                filterOption: (input: any, option: any) => {\n-                                    return (\n-                                        option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n-                                    )\n-                                },\n-                            }\n-                        }\n-                    });\n-            }\n-        },\n-        {\n-            title: "标签",\n-            key: "labels",\n-            dataIndex: "labels",\n-            span: 4,\n-            render: (labels: labelDataType[]) => {\n-                const labelInitialValue: number[] = [];\n-                labels.forEach(item => {\n-                    labelInitialValue.push(item.id);\n-                });\n-                return responseDataToContent(\n-                    { responseData: labels, dataEnum: undefined, isLabel: true },\n-                    isAdmin || isApprover,\n-                    {\n-                        fieldName: "label", initialValue: labelInitialValue, tagType: "select", componentProps: {\n-                            selectOptions: labelOptionList,\n-                            apiOption: {\n-                                style: { width: \'50%\' },\n-                                optionLabelProp: "title",\n-                                mode: "multiple",\n-                                onSelect: (value: number) => {\n-                                    selectLabelHandler(value);\n-                                },\n-                                allowClear: true,\n-                                showSearch: true,\n-                                placeholder: "请选择",\n-                                filterOption: (input: any, option: any) => {\n-                                    return (\n-                                        option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n-                                    )\n-                                },\n-                            }\n-                        }\n-                    });\n-            }\n-        },\n-        {\n-            title: "所属集合",\n-            key: "gsCollects",\n-            dataIndex: "gsCollects",\n-            tooltip: gitManageFieldTips.collection.tooltip,\n-            span: 4,\n-            render: (gsCollects: ICollection[]) => {\n-                if (!updateMode) {\n-                    if (gsCollects && gsCollects.length > 0) {\n-                        return (\n-                          gsCollects.map((item) => {\n-                              return (\n-                                <React.Fragment key={`collection-${item.id}`}>\n-                                    <div>\n-                                        {item.name}\n-                                    </div>\n-                                </React.Fragment>\n-                              )\n-                          })\n-                        )\n-                    }\n-                    return "";\n-                }\n-                return responseDataToContent(\n-                  { responseData: gsCollects, dataEnum: undefined, isLabel: false },\n-                  isAdmin || isApprover,\n-                  {\n-                      fieldName: "gsCollects",\n-                      initialValue: (gsCollects || []).map(item => item.id),\n-                      tagType: "select",\n-                      componentProps: {\n-                          selectOptions: collectionList.map(item => (\n-                            <Option key={`collection-${item.id}`} value={item.id} title={item.name}>\n-                                {item.name}\n-                            </Option>\n-                          )),\n-                          apiOption: {\n-                              style: { width: \'50%\' },\n-                              optionLabelProp: "title",\n-                              mode: "multiple",\n-                              allowClear: true,\n-                              showSearch: true,\n-                              placeholder: gitManageFieldTips.collection.placeholder,\n-                              filterOption: (input: any, option: any) => {\n-                                  return (\n-                                    option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n-                                  )\n-                              },\n-                          }\n-                      }\n-                  });\n-            }\n-        },\n-        {\n-            title: "地址",\n-            key: "repositoryUrl",\n-            dataIndex: "repositoryUrl",\n-            span: 4,\n-            render: (_: any, record: projectDetailDataType) => {\n-                if (record.repositoryHttpUrl) {\n-                    return (\n-                        <>\n-                            <div>\n-                                <span style={{ display: \'block\' }}>ssh：{record.repositoryUrl}</span>\n-                                <span>http：{record.repositoryHttpUrl}</span>\n-                            </div>\n-                        </>\n-                    )\n-                }\n-                return <span>ssh：{record.repositoryUrl}</span>;\n-            }\n-        },\n-        {\n-            title: "备注",\n-            key: "description",\n-            dataIndex: "description",\n-            span: 4,\n-            render: (description: string) => {\n-                return responseDataToContent(\n-                    { responseData: description, dataEnum: undefined, isLabel: false },\n-                    isAdmin || isApprover,\n-                    {\n-                        fieldName: "description", initialValue: description, tagType: "textArea", componentProps: {}\n-                    });\n-            }\n-        },\n-        {\n-            title: "创建时间",\n-            key: "createTime",\n-            dataIndex: "createTime",\n-            span: 4\n-        },\n-        {\n-            title: "关联project",\n-            key: "slaveRepositories",\n-            dataIndex: "slaveRepositories",\n-            span: 4,\n-            render: (slaveRepositories: repositoryBasicDataType[]) => {\n-                if ((isAdmin || isApprover) && updateMode) {\n-                    return (\n-                        <>\n-                            <Space>\n-                                <span>仓库</span>\n-                                <span style={{ marginLeft: "29rem" }}>\n-                                    相对路径\n-                                    <Tooltip overlay="比如主仓库是wps，目录有wps/a/b/c，c目录是wps的子仓库,那么c的相对路径就是a/b/c（不需要斜杠开头）">\n-                                        <QuestionCircleOutlined />\n-                                    </Tooltip>\n-                                </span>\n-                            </Space>\n-                            <Form className={styles.updateForm} form={form} initialValues={{ slaveRepositories: projectDetailInfo.slaveRepositories }}>\n-                                <Form.List name="slaveRepositories" key="slaveRepositoriesFormList">\n-                                    {(fields, { add, remove }) => (\n-                                        <>\n-                                            {fields.map(({ key, name, fieldKey, ...restField }) => (\n-                                                <Space\n-                                                    key={key}\n-                                                    style={{ display: "flex" }}\n-                                                    align="baseline"\n-                                                >\n-                                                    <Form.Item\n-                                                        {...restField}\n-                                                        name={[name, "id"]}\n-                                                        fieldKey={[fieldKey, "id"]}\n-                                                        rules={[{ required: true, message: "请选择仓库" }]}\n-                                                    >\n-                                                        <Select\n-                                                            style={{ width: \'31.25rem\' }}\n-                                                            onChange={(repoId: number) => { checkCurrentRepoSelectInForm(repoId, "slave", name); }}\n-                                                            showSearch\n-                                                            placeholder="请选择仓库"\n-                                                            filterOption={(input: any, option: any) => {\n-                                                                return (\n-                                                                    option.key.toLowerCase().indexOf(input.toLowerCase()) >= 0\n-                                                                );\n-                                                            }}\n-                                                        >\n-                                                            {slaveRepositoriesList}\n-                                                        </Select>\n-                                                    </Form.Item>\n-                                                    <Form.Item\n-                                                        {...restField}\n-                                                        name={[name, "prefix"]}\n-                                                        fieldKey={[fieldKey, "prefix"]}\n-                                                        rules={[{\n-                                                            required: (isAdmin ? codeReviewStateValue === 1 : projectDetailInfo.codeReviewState === 1)\n-                                                                && slaveRepoId2Prefix[form.getFieldValue("slaveRepositories")[name]?.id] !==\n-                                                                form.getFieldValue("slaveRepositories")[name]?.prefix,\n-                                                            message: "请填写正确的子仓相对路径",\n-                                                            pattern: /^(.?\\/?)+([^/])$/\n-                                                        }]}\n-                                                        validateTrigger="onBlur"\n-                                                    >\n-                                                        <Input placeholder="相对主仓库的路径" autoComplete="off" />\n-                                                    </Form.Item>\n-                                                    <MinusCircleOutlined\n-                                                        onClick={() => {\n-                                                            remove(name);\n-                                                        }}\n-                                                    />\n-                                                </Space>\n-                                            ))}\n-                                            <Form.Item style={{ width: \'35%\' }}>\n-                                                <Button\n-                                                    type="dashed"\n-                                                    onClick={() => add({ id: undefined, prefix: null })}\n-                                                    block\n-                                                >\n-                                                    添加\n-                                                </Button>\n-                                            </Form.Item>\n-                                        </>\n-                                    )}\n-                                </Form.List>\n-                            </Form>\n-                        </>\n-                    )\n-                }\n-                if (slaveRepositories && slaveRepositories.length > 0) {\n-                    return (\n-                        slaveRepositories.map((item) => {\n-                            return (\n-                                <React.Fragment key={`slaveRepository-${item.id}`}>\n-                                    <div>\n-                                        <Space>\n-                                            <Link to={`${projectDetailUrl}${item.id}`} target="_blank" className="gs_link">\n-                                                {item.name} - {item.repositoryUrl}\n-                                            </Link>\n-                                            {item.prefix && item.prefix !== "" ? <span>相对路径: {item.prefix}</span> : null}\n-                                        </Space>\n-                                    </div>\n-                                </React.Fragment>\n-                            )\n-                        })\n-                    )\n-                }\n-                return "";\n-            }\n-        },\n-        {\n-            title: "依赖project",\n-            key: "dependencyRepositories",\n-            dataIndex: "dependencyRepositories",\n-            span: 4,\n-            render: (dependencyRepositories: repositoryBasicDataType[]) => {\n-                if ((isAdmin || isApprover) && updateMode) {\n-                    return (\n-                        <Form className={styles.updateForm} form={form} initialValues={{ dependencyRepositories: projectDetailInfo.dependencyRepositories }}>\n-                            <Form.List name="dependencyRepositories" key="dependencyRepositoriesFormList">\n-                                {(fields, { add, remove }) => (\n-                                    <>\n-                                        {fields.map(({ key, name, fieldKey, ...restField }) => (\n-                                            <Space\n-                                                key={key}\n-                                                style={{ display: "flex" }}\n-                                                align="baseline"\n-                                            >\n-                                                <Form.Item\n-                                                    {...restField}\n-                                                    name={[name, "id"]}\n-                                                    fieldKey={[fieldKey, "id"]}\n-                                                    rules={[{ required: true, message: "请选择仓库" }]}\n-                                                >\n-                                                    <Select\n-                                                        style={{ width: \'31.25rem\' }}\n-                                                        onChange={(repoId: number) => { checkCurrentRepoSelectInForm(repoId, "dependency", name); }}\n-                                                        showSearch\n-                                                        placeholder="请选择仓库"\n-                                                        filterOption={(input: any, option: any) => {\n-                                                            return (\n-                                                                option.key.toLowerCase().indexOf(input.toLowerCase()) >= 0\n-                                                            );\n-                                                        }}\n-                                                    >\n-                                                        {dependencyRepositoriesList}\n-                                                    </Select>\n-                                                </Form.Item>\n-                                                <MinusCircleOutlined\n-                                                    onClick={() => {\n-                                                        remove(name);\n-                                                    }}\n-                                                />\n-                                            </Space>\n-                                        ))}\n-                                        <Form.Item style={{ width: \'35%\' }}>\n-                                            <Button\n-                                                type="dashed"\n-                                                onClick={() => add()}\n-                                                block\n-                                            >\n-                                                添加\n-                                            </Button>\n-                                        </Form.Item>\n-                                    </>\n-                                )}\n-                            </Form.List>\n-                        </Form>\n-                    )\n-                }\n-                if (dependencyRepositories && dependencyRepositories.length > 0) {\n-                    return (\n-                        dependencyRepositories.map((item) => {\n-                            return (\n-                                <React.Fragment key={`dependencyRepository-${item.id}`}>\n-                                    <div>\n-                                        <Link to={`${projectDetailUrl}${item.id}`} target="_blank" className="gs_link">\n-                                            {item.name} - {item.repositoryUrl}\n-                                        </Link>\n-                                    </div>\n-                                </React.Fragment>\n-                            )\n-                        })\n-                    )\n-                }\n-                return "";\n-            }\n-        },\n-        {\n-            title: "负责人",\n-            key: "approvers",\n-            dataIndex: "approvers",\n-            span: 4,\n-            tooltip: "负责人仅用于平台仓库管理，未对应gitlab权限，若需访问代码，请在成员一栏进行添加",\n-            render: (approvers: memberDataType[]) => {\n-                if ((isAdmin || isApprover) && updateMode) {\n-                    return (\n-                        <Transfer\n-                            dataSource={userList}\n-                            showSearch\n-                            listStyle={{ width: \'15%\', height: \'300px\' }}\n-                            titles={[\'所有的用户列表\', \'已选择的用户列表\']}\n-                            pagination={{ pageSize: 100 }}\n-                            filterOption={filterOption}\n-                            targetKeys={targetKeysForTransfer}\n-                            onChange={handleApproversTargetKeysChange}\n-                            render={(item: any) => `${item.title}(${item.description})`}\n-                            locale={{\n-                                notFoundContent:\n-                                    <Empty\n-                                        image={<EmptyData />}\n-                                        imageStyle={{ height: 32, marginBottom: 0 }}\n-                                    />\n-                            }}\n-                        />\n-                    )\n-                }\n-                if (approvers && approvers.length > 0) {\n-                    return showUserInfo(approvers);\n-                }\n-                return "";\n-            }\n-        },\n-        {\n-            title: "成员",\n-            key: "members",\n-            dataIndex: "members",\n-            span: 4,\n-            render: (members: memberDataType[]) => {\n-                if ((isAdmin || isApprover) && updateMode) {\n-                    return (\n-                        <>\n-                            <Form className={styles.updateForm} form={form} initialValues={{ members: projectDetailInfo.members }}>\n-                                <Form.List name="members" key="membersFormList">\n-                                    {(fields, { add, remove }) => (\n-                                        <>\n-                                            <Input.Search\n-                                                style={{ width: \'30%\', marginBottom: 5 }}\n-                                                placeholder="输入ksso账号即可判断该用户是否拥有权限"\n-                                                onSearch={(ksso: string) => {\n-                                                    checkMemberPermissionHandler(detailId, ksso);\n-                                                }}\n-                                            />\n-                                            {fields.map(({ key, name, fieldKey, ...restField }) => (\n-                                                <Space\n-                                                    key={key}\n-                                                    style={{ display: "flex" }}\n-                                                    align="baseline"\n-                                                >\n-                                                    <Form.Item\n-                                                        {...restField}\n-                                                        name={[name, "id"]}\n-                                                        fieldKey={[fieldKey, "id"]}\n-                                                        rules={[{ required: true, message: "请选择用户" }]}\n-                                                    >\n-                                                        <Select\n-                                                            style={{ width: \'18.75rem\' }}\n-                                                            onChange={(userId: number) => { checkCurrentSelectInForm(userId, name); }}\n-                                                            showSearch\n-                                                            placeholder="请选择用户"\n-                                                            filterOption={(input: any, option: any) => {\n-                                                                return (\n-                                                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n-                                                                );\n-                                                            }}\n-                                                        >\n-                                                            {userOptionForSelect}\n-                                                        </Select>\n-                                                    </Form.Item>\n-                                                    <Form.Item\n-                                                        {...restField}\n-                                                        name={[name, "accessLevel"]}\n-                                                        fieldKey={[fieldKey, "accessLevel"]}\n-                                                        rules={[{ required: true, message: "请选择用户权限" }]}\n-                                                    >\n-                                                        <Select\n-                                                            placeholder="请选择用户权限"\n-                                                            style={{ width: \'12.5rem\' }}\n-                                                        >\n-                                                            {accessLevelOptionForRepository}\n-                                                        </Select>\n-                                                    </Form.Item>\n-                                                    <MinusCircleOutlined onClick={() => {\n-                                                        remove(name);\n-                                                    }\n-                                                    } />\n-                                                </Space>\n-                                            ))}\n-                                            <Form.Item style={{ width: \'35%\' }}>\n-                                                <Button\n-                                                    type="dashed"\n-                                                    onClick={() => add({ id: undefined, accessLevel: 20 })}\n-                                                    block\n-                                                >\n-                                                    添加\n-                                                </Button>\n-                                            </Form.Item>\n-                                        </>\n-                                    )}\n-                                </Form.List>\n-                            </Form>\n-                        </>\n-                    )\n-                }\n-                if (requestMembersStatus) {\n-                    return showUserInfo(members, inheritedMembers);\n-                }\n-                return <Button onClick={() => getProjectMembersHandler(detailId)}>获取成员</Button>\n-            }\n-        },\n-        {\n-            title: "变更记录",\n-            key: "recordHistory",\n-            span: 4,\n-            render: () => {\n-                return (\n-                    <Button onClick={() => { setHistoryVisible(true) }}>\n-                        变更记录\n-                    </Button>)\n+        return responseDataToContent({ responseData: gsCollects, dataEnum: undefined, isLabel: false }, isAdmin || isApprover, {\n+          fieldName: \'gsCollects\',\n+          initialValue: (gsCollects || []).map((item) => item.id),\n+          tagType: \'select\',\n+          componentProps: {\n+            selectOptions: collectionList.map((item) => (\n+              <Option key={`collection-${item.id}`} value={item.id} title={item.name}>\n+                {item.name}\n+              </Option>\n+            )),\n+            apiOption: {\n+              style: { width: \'50%\' },\n+              optionLabelProp: \'title\',\n+              mode: \'multiple\',\n+              allowClear: true,\n+              showSearch: true,\n+              placeholder: gitManageFieldTips.collection.placeholder,\n+              filterOption: (input: any, option: any) => {\n+                return option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n+              },\n             },\n-            hideInDescriptions: !hasPermission(\'gm:repository:record:page\')\n-        },\n-    ]\n-\n-    /**\n-     * 仓库的详情渲染方法\n-     * @param record 详情数据\n-     * @returns\n-     */\n-    const projectDetailInfoRender = (record: projectDetailDataType) => {\n-        return (\n+          },\n+        });\n+      },\n+    },\n+    {\n+      title: \'地址\',\n+      key: \'repositoryUrl\',\n+      dataIndex: \'repositoryUrl\',\n+      span: 4,\n+      render: (_: any, record: projectDetailDataType) => {\n+        if (record.repositoryHttpUrl) {\n+          return (\n             <>\n-                <ProDescriptions bordered size="small" column={4} title={`${record.name}的基本信息`}\n-                    actionRef={actionRef}\n-                    dataSource={record}\n-                    loading={dataLoading}\n-                    labelStyle={{ width: \'115px\', textAlign: \'end\', padding: \'5px 4px 8px 0px\', verticalAlign: \'top\' }}\n-                    className="gs_description"\n-                    extra={(isAdmin || isApprover) && hasPermission(\'gm:repository:update\') ?\n-                        <>\n-                            <Button type="primary" onClick={() => { updateButtonClickHandler(updateMode) }} loading={updateLoading}>\n-                                {!updateMode ? "编辑" : "取消"}\n-                            </Button>\n-                            {updateMode\n-                                ?\n-                                <Button type="primary" onClick={() => setConfirmVisible(true)} loading={submitLoading}>保存</Button>\n-                                : null\n-                            }\n-                        </>\n-                        : null}\n-                    columns={coulumn}\n-                 />\n+              <div>\n+                <span style={{ display: \'block\' }}>ssh：{record.repositoryUrl}</span>\n+                <span>http：{record.repositoryHttpUrl}</span>\n+              </div>\n             </>\n-        )\n-    }\n-\n-    /**\n-     * 将数据转化为Select的Option\n-     * @param repoList 仓库列表\n-     * @param updateState 对应的state Hook\n-     */\n-    const dataToSelectOption = async (repoList: repositoryBasicDataType[], updateState: any) => {\n-        const optionList: any[] = [];\n-        const repositoryIdMapToCodeReviewState: Record<number, number> = {};\n-        repoList.map((item: repositoryBasicDataType) => {\n-            repositoryIdMapToCodeReviewState[item.id] = item.codeReviewState;\n-            return optionList.push(\n-                <Option key={item.repositoryUrl}\n-                    title={item.name}\n-                    value={item.id}\n-                    disabled={false}\n-                >\n-                    {`${item.name}(${item.repositoryUrl})`}\n-                </Option>\n-            )\n+          );\n+        }\n+        return <span>ssh：{record.repositoryUrl}</span>;\n+      },\n+    },\n+    {\n+      title: \'备注\',\n+      key: \'description\',\n+      dataIndex: \'description\',\n+      span: 4,\n+      render: (description: string) => {\n+        return responseDataToContent({ responseData: description, dataEnum: undefined, isLabel: false }, isAdmin || isApprover, {\n+          fieldName: \'description\',\n+          initialValue: description,\n+          tagType: \'textArea\',\n+          componentProps: {},\n         });\n-        if (Object.keys(repoIdAndCodeReviewStateMap).length === 0) {\n-            setRepoIdAndCodeReviewStateMap(repositoryIdMapToCodeReviewState);\n+      },\n+    },\n+    {\n+      title: \'创建时间\',\n+      key: \'createTime\',\n+      dataIndex: \'createTime\',\n+      span: 4,\n+    },\n+    {\n+      title: \'关联project\',\n+      key: \'slaveRepositories\',\n+      dataIndex: \'slaveRepositories\',\n+      span: 4,\n+      render: (slaveRepositories: repositoryBasicDataType[]) => {\n+        if ((isAdmin || isApprover) && updateMode) {\n+          return (\n+            <>\n+              <Space>\n+                <span>仓库</span>\n+                <span style={{ marginLeft: \'29rem\' }}>\n+                  相对路径\n+                  <Tooltip overlay="比如主仓库是wps，目录有wps/a/b/c，c目录是wps的子仓库,那么c的相对路径就是a/b/c（不需要斜杠开头）">\n+                    <QuestionCircleOutlined />\n+                  </Tooltip>\n+                </span>\n+              </Space>\n+              <Form className={styles.updateForm} form={form} initialValues={{ slaveRepositories: projectDetailInfo.slaveRepositories }}>\n+                <Form.List name="slaveRepositories" key="slaveRepositoriesFormList">\n+                  {(fields, { add, remove }) => (\n+                    <>\n+                      {fields.map(({ key, name, fieldKey, ...restField }) => (\n+                        <Space key={key} style={{ display: \'flex\' }} align="baseline">\n+                          <Form.Item\n+                            {...restField}\n+                            name={[name, \'id\']}\n+                            fieldKey={[fieldKey, \'id\']}\n+                            rules={[{ required: true, message: \'请选择仓库\' }]}\n+                          >\n+                            <Select\n+                              style={{ width: \'31.25rem\' }}\n+                              onChange={(repoId: number) => {\n+                                checkCurrentRepoSelectInForm(repoId, \'slave\', name);\n+                              }}\n+                              showSearch\n+                              placeholder="请选择仓库"\n+                              filterOption={(input: any, option: any) => {\n+                                return option.key.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n+                              }}\n+                            >\n+                              {slaveRepositoriesList}\n+                            </Select>\n+                          </Form.Item>\n+                          <Form.Item\n+                            {...restField}\n+                            name={[name, \'prefix\']}\n+                            fieldKey={[fieldKey, \'prefix\']}\n+                            rules={[\n+                              {\n+                                required:\n+                                  (isAdmin ? codeReviewStateValue === 1 : projectDetailInfo.codeReviewState === 1) &&\n+                                  slaveRepoId2Prefix[form.getFieldValue(\'slaveRepositories\')[name]?.id] !==\n+                                    form.getFieldValue(\'slaveRepositories\')[name]?.prefix,\n+                                message: \'请填写正确的子仓相对路径\',\n+                                pattern: /^(.?\\/?)+([^/])$/,\n+                              },\n+                            ]}\n+                            validateTrigger="onBlur"\n+                          >\n+                            <Input placeholder="相对主仓库的路径" autoComplete="off" />\n+                          </Form.Item>\n+                          <MinusCircleOutlined\n+                            onClick={() => {\n+                              remove(name);\n+                            }}\n+                          />\n+                        </Space>\n+                      ))}\n+                      <Form.Item style={{ width: \'35%\' }}>\n+                        <Button type="dashed" onClick={() => add({ id: undefined, prefix: null })} block>\n+                          添加\n+                        </Button>\n+                      </Form.Item>\n+                    </>\n+                  )}\n+                </Form.List>\n+              </Form>\n+            </>\n+          );\n         }\n-        updateState(optionList);\n-    };\n-\n-    /**\n-     * 获取仓库列表,用于子仓和依赖仓的选择\n-     */\n-    const getRepositoryListHandler = async () => {\n-        const response = await RequestUtils(getRepositoryListInGM, undefined, { msg: \'获取仓库列表\' });\n-        if (response.success) {\n-            setRepositoryList(response.data);\n-            if (slaveRepositoriesList.length === 0) {\n-                dataToSelectOption(response.data, setSlaveRepositoriesList);\n-            }\n-            if (dependencyRepositoriesList.length === 0) {\n-                dataToSelectOption(response.data, setDependencyRepositoriesList);\n-            }\n+        if (slaveRepositories && slaveRepositories.length > 0) {\n+          return slaveRepositories.map((item) => {\n+            return (\n+              <React.Fragment key={`slaveRepository-${item.id}`}>\n+                <div>\n+                  <Space>\n+                    <Link to={`${projectDetailUrl}${item.id}`} target="_blank" className="gs_link">\n+                      {item.name} - {item.repositoryUrl}\n+                    </Link>\n+                    {item.prefix && item.prefix !== \'\' ? <span>相对路径: {item.prefix}</span> : null}\n+                  </Space>\n+                </div>\n+              </React.Fragment>\n+            );\n+          });\n         }\n-    }\n-\n-    /**\n-     * 获取project详情\n-     * @param projectId\n-     * @returns\n-     */\n-    const getProjectDetailHandler = async (projectId: number) => {\n-        const response = await RequestUtils(getProjectDetail, projectId, { msg: \'获取project详情\' });\n-        if (response.success) {\n-            const slaveRepoId2PrefixTemp = {};\n-            const { approvers, slaveRepositories, dependencyRepositories } = response.data;\n-            slaveRepositories.forEach((item: repositoryBasicDataType) => {\n-                slaveRepoId2PrefixTemp[item.id] = item.prefix;\n-            });\n-            setSlaveRepoId2Prefix(slaveRepoId2PrefixTemp);\n-\n-            // 负责人的targetKeys,数据规约是string类型数组\n-            const approversIdList: string[] = [];\n-            approvers.map((item: memberDataType) => {\n-                return approversIdList.push(item.id.toString());\n-            });\n-            // 设置相关穿梭框的targetKeys\n-            setTargetKeysForTransfer(approversIdList);\n-            setTargetKeysForTransferRollback(approversIdList);\n-\n-            // 遍历用户列表,判断当前用户是否为负责人,若是可以提供编辑入口\n-            const groupAllApprovers = await updateGroupApproverState(response.data.groupId);\n-            const allApprovers = [...approvers, ...groupAllApprovers]\n-            const userInfo = allApprovers.find((item: memberDataType) => item.id === currentUserId);\n-            setIsApprover(!!userInfo);\n-\n-            // 将已有的子仓和依赖仓id记录起来,用于校验用户重复选择\n-            const slaveRepoIds: number[] = [];\n-            const dependencyRepoIds: number[] = [];\n-            slaveRepositories.map((item: repositoryBasicDataType) => { return slaveRepoIds.push(item.id) });\n-            dependencyRepositories.map((item: repositoryBasicDataType) => { return dependencyRepoIds.push(item.id) });\n-\n-            // 设置代码检视开关值\n-            setCodeReviewStateValue(response.data.codeReviewState);\n-            setProjectDetailInfo({ ...response.data });\n-            setReload(!reload);\n-            return true;\n+        return \'\';\n+      },\n+    },\n+    {\n+      title: \'依赖project\',\n+      key: \'dependencyRepositories\',\n+      dataIndex: \'dependencyRepositories\',\n+      span: 4,\n+      render: (dependencyRepositories: repositoryBasicDataType[]) => {\n+        if ((isAdmin || isApprover) && updateMode) {\n+          return (\n+            <Form\n+              className={styles.updateForm}\n+              form={form}\n+              initialValues={{ dependencyRepositories: projectDetailInfo.dependencyRepositories }}\n+            >\n+              <Form.List name="dependencyRepositories" key="dependencyRepositoriesFormList">\n+                {(fields, { add, remove }) => (\n+                  <>\n+                    {fields.map(({ key, name, fieldKey, ...restField }) => (\n+                      <Space key={key} style={{ display: \'flex\' }} align="baseline">\n+                        <Form.Item\n+                          {...restField}\n+                          name={[name, \'id\']}\n+                          fieldKey={[fieldKey, \'id\']}\n+                          rules={[{ required: true, message: \'请选择仓库\' }]}\n+                        >\n+                          <Select\n+                            style={{ width: \'31.25rem\' }}\n+                            onChange={(repoId: number) => {\n+                              checkCurrentRepoSelectInForm(repoId, \'dependency\', name);\n+                            }}\n+                            showSearch\n+                            placeholder="请选择仓库"\n+                            filterOption={(input: any, option: any) => {\n+                              return option.key.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n+                            }}\n+                          >\n+                            {dependencyRepositoriesList}\n+                          </Select>\n+                        </Form.Item>\n+                        <MinusCircleOutlined\n+                          onClick={() => {\n+                            remove(name);\n+                          }}\n+                        />\n+                      </Space>\n+                    ))}\n+                    <Form.Item style={{ width: \'35%\' }}>\n+                      <Button type="dashed" onClick={() => add()} block>\n+                        添加\n+                      </Button>\n+                    </Form.Item>\n+                  </>\n+                )}\n+              </Form.List>\n+            </Form>\n+          );\n         }\n-        return false;\n-    }\n-\n-    useEffect(() => {\n-        if (detailDrawerVisible) {\n-            getLabelList(labelTypeStatusMap.repositoryManage.code);\n+        if (dependencyRepositories && dependencyRepositories.length > 0) {\n+          return dependencyRepositories.map((item) => {\n+            return (\n+              <React.Fragment key={`dependencyRepository-${item.id}`}>\n+                <div>\n+                  <Link to={`${projectDetailUrl}${item.id}`} target="_blank" className="gs_link">\n+                    {item.name} - {item.repositoryUrl}\n+                  </Link>\n+                </div>\n+              </React.Fragment>\n+            );\n+          });\n         }\n-    }, [detailId])\n-\n-    useEffect(() => {\n-        if (reload && detailDrawerVisible) {\n-            setDataLoading(true);\n-            setRequestMembersStatus(false);\n-            getProjectDetailHandler(detailId).finally(() => {\n-                setDataLoading(false);\n-            });\n-            form.resetFields();\n+        return \'\';\n+      },\n+    },\n+    {\n+      title: \'负责人\',\n+      key: \'approvers\',\n+      dataIndex: \'approvers\',\n+      span: 4,\n+      tooltip: \'负责人仅用于平台仓库管理，未对应gitlab权限，若需访问代码，请在成员一栏进行添加\',\n+      render: (approvers: memberDataType[]) => {\n+        if ((isAdmin || isApprover) && updateMode) {\n+          return (\n+            <Transfer\n+              dataSource={userList}\n+              showSearch\n+              listStyle={{ width: \'15%\', height: \'300px\' }}\n+              titles={[\'所有的用户列表\', \'已选择的用户列表\']}\n+              pagination={{ pageSize: 100 }}\n+              filterOption={filterOption}\n+              targetKeys={targetKeysForTransfer}\n+              onChange={handleApproversTargetKeysChange}\n+              render={(item: any) => `${item.title}(${item.description})`}\n+              locale={{\n+                notFoundContent: <Empty image={<EmptyData />} imageStyle={{ height: 32, marginBottom: 0 }} />,\n+              }}\n+            />\n+          );\n         }\n-    }, [reload, detailDrawerVisible])\n-\n-    // 若url中的id发生改变,重新请求数据\n-    useEffect(() => {\n-        setUpdateMode(false);\n-        setReload(true);\n-    }, [detailId])\n-\n-    // 判断是否为编辑模式,如果是编辑模式要获取用户列表\n-    useEffect(() => {\n-        if (updateMode) {\n-            setDataLoading(true);\n-            const getUserPromise = userList.length === 0 ? getUserListHandler() : Promise.resolve();\n-            const getRepoPromise = slaveRepositoriesList.length === 0 || dependencyRepositoriesList.length === 0 ? getRepositoryListHandler() : Promise.resolve();\n-            Promise.all([getUserPromise, getRepoPromise, getAndSetOpenApiList(), getAndSetCollection()])\n-                .finally(() => {\n-                    setDataLoading(false);\n-                });\n+        if (approvers && approvers.length > 0) {\n+          return showUserInfo(approvers);\n         }\n-    }, [updateMode, detailId])\n-\n-    return (\n-        <>\n-            <Drawer\n-                title="项目详情"\n-                placement="right"\n-                closable\n-                width="100%"\n-                className="detailDrawer"\n-                extra={<DrawerCollapseBtn />}\n-                onClose={closeDetailDrawer}\n-                visible={detailDrawerVisible}\n-                mask={false}\n-                destroyOnClose\n-            >\n-                {detailDrawerVisible ?\n+        return \'\';\n+      },\n+    },\n+    {\n+      title: \'成员\',\n+      key: \'members\',\n+      dataIndex: \'members\',\n+      span: 4,\n+      render: (members: memberDataType[]) => {\n+        if ((isAdmin || isApprover) && updateMode) {\n+          return (\n+            <>\n+              <Form className={styles.updateForm} form={form} initialValues={{ members: projectDetailInfo.members }}>\n+                <Form.List name="members" key="membersFormList">\n+                  {(fields, { add, remove }) => (\n                     <>\n-                        <Card className="gs_descriptionInCard">\n-                            <div>\n-                                {projectDetailInfoRender(projectDetailInfo)}\n-                            </div>\n-                        </Card>\n-                        <Modal\n-                            visible={confirmVisible}\n-                            title="提示"\n-                            onOk={submitHandler}\n-                            confirmLoading={submitLoading}\n-                            onCancel={() => setConfirmVisible(false)}\n-                            width={gsModalSize}\n-                            destroyOnClose\n-                        >\n-                            <Form form={form} >\n-                                <FormItem name="modifyDescription" rules={[{ required: true, message: "修改描述不能为空!" }]}>\n-                                    <Input.TextArea placeholder="请输入修改描述" maxLength={1000} showCount />\n-                                </FormItem>\n-                            </Form>\n-                        </Modal>\n+                      <Input.Search\n+                        style={{ width: \'30%\', marginBottom: 5 }}\n+                        placeholder="输入ksso账号即可判断该用户是否拥有权限"\n+                        onSearch={(ksso: string) => {\n+                          checkMemberPermissionHandler(detailId, ksso);\n+                        }}\n+                      />\n+                      {fields.map(({ key, name, fieldKey, ...restField }) => (\n+                        <Space key={key} style={{ display: \'flex\' }} align="baseline">\n+                          <Form.Item\n+                            {...restField}\n+                            name={[name, \'id\']}\n+                            fieldKey={[fieldKey, \'id\']}\n+                            rules={[{ required: true, message: \'请选择用户\' }]}\n+                          >\n+                            <Select\n+                              style={{ width: \'18.75rem\' }}\n+                              onChange={(userId: number) => {\n+                                checkCurrentSelectInForm(userId, name);\n+                              }}\n+                              showSearch\n+                              placeholder="请选择用户"\n+                              filterOption={(input: any, option: any) => {\n+                                return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n+                              }}\n+                            >\n+                              {userOptionForSelect}\n+                            </Select>\n+                          </Form.Item>\n+                          <Form.Item\n+                            {...restField}\n+                            name={[name, \'accessLevel\']}\n+                            fieldKey={[fieldKey, \'accessLevel\']}\n+                            rules={[{ required: true, message: \'请选择用户权限\' }]}\n+                          >\n+                            <Select placeholder="请选择用户权限" style={{ width: \'12.5rem\' }}>\n+                              {accessLevelOptionForRepository}\n+                            </Select>\n+                          </Form.Item>\n+                          <MinusCircleOutlined\n+                            onClick={() => {\n+                              remove(name);\n+                            }}\n+                          />\n+                        </Space>\n+                      ))}\n+                      <Form.Item style={{ width: \'35%\' }}>\n+                        <Button type="dashed" onClick={() => add({ id: undefined, accessLevel: 20 })} block>\n+                          添加\n+                        </Button>\n+                      </Form.Item>\n                     </>\n-                    :\n-                    null\n-                }\n-            </Drawer>\n-            {historyVisible ?\n-                <HistoryDrawer\n-                    historyVisible={historyVisible}\n-                    closeHistoryDrawer={() => setHistoryVisible(false)}\n-                    repositoryId={projectDetailInfo.id}\n-                />\n-                :\n-                null\n-            }\n-        </>\n-    )\n-}\n+                  )}\n+                </Form.List>\n+              </Form>\n+            </>\n+          );\n+        }\n+        if (requestMembersStatus) {\n+          return showUserInfo(members, inheritedMembers);\n+        }\n+        return <Button onClick={() => getProjectMembersHandler(detailId)}>获取成员</Button>;\n+      },\n+    },\n+    {\n+      title: \'变更记录\',\n+      key: \'recordHistory\',\n+      span: 4,\n+      render: () => {\n+        return (\n+          <Button\n+            onClick={() => {\n+              setHistoryVisible(true);\n+            }}\n+          >\n+            变更记录\n+          </Button>\n+        );\n+      },\n+      hideInDescriptions: !hasPermission(\'gm:repository:record:page\'),\n+    },\n+  ];\n+\n+  /**\n+   * 仓库的详情渲染方法\n+   * @param record 详情数据\n+   * @returns\n+   */\n+  const projectDetailInfoRender = (record: projectDetailDataType) => {\n+    return (\n+      <>\n+        <ProDescriptions\n+          bordered\n+          size="small"\n+          column={4}\n+          title={`${record.name}的基本信息`}\n+          actionRef={actionRef}\n+          dataSource={record}\n+          loading={dataLoading}\n+          labelStyle={{ width: \'115px\', textAlign: \'end\', padding: \'5px 4px 8px 0px\', verticalAlign: \'top\' }}\n+          className="gs_description"\n+          extra={\n+            (isAdmin || isApprover) && hasPermission(\'gm:repository:update\') ? (\n+              <>\n+                <Affix offsetTop={110} target={() => document.querySelector(\'.detailDrawer-projectDetail\')}>\n+                  <Button\n+                    type="primary"\n+                    onClick={() => {\n+                      updateButtonClickHandler(updateMode);\n+                    }}\n+                    loading={updateLoading}\n+                  >\n+                    {!updateMode ? \'编辑\' : \'取消\'}\n+                  </Button>\n+                </Affix>\n+\n+                {updateMode ? (\n+                  <Affix offsetTop={110} target={() => document.querySelector(\'.detailDrawer-projectDetail\')}>\n+                    <Button type="primary" onClick={() => setConfirmVisible(true)} loading={submitLoading}>\n+                      保存\n+                    </Button>\n+                  </Affix>\n+                ) : null}\n+              </>\n+            ) : null\n+          }\n+          columns={coulumn}\n+        />\n+      </>\n+    );\n+  };\n+\n+  /**\n+   * 将数据转化为Select的Option\n+   * @param repoList 仓库列表\n+   * @param updateState 对应的state Hook\n+   */\n+  const dataToSelectOption = async (repoList: repositoryBasicDataType[], updateState: any) => {\n+    const optionList: any[] = [];\n+    const repositoryIdMapToCodeReviewState: Record<number, number> = {};\n+    repoList.map((item: repositoryBasicDataType) => {\n+      repositoryIdMapToCodeReviewState[item.id] = item.codeReviewState;\n+      return optionList.push(\n+        <Option key={item.repositoryUrl} title={item.name} value={item.id} disabled={false}>\n+          {`${item.name}(${item.repositoryUrl})`}\n+        </Option>,\n+      );\n+    });\n+    if (Object.keys(repoIdAndCodeReviewStateMap).length === 0) {\n+      setRepoIdAndCodeReviewStateMap(repositoryIdMapToCodeReviewState);\n+    }\n+    updateState(optionList);\n+  };\n+\n+  /**\n+   * 获取仓库列表,用于子仓和依赖仓的选择\n+   */\n+  const getRepositoryListHandler = async () => {\n+    const response = await RequestUtils(getRepositoryListInGM, undefined, { msg: \'获取仓库列表\' });\n+    if (response.success) {\n+      setRepositoryList(response.data);\n+      if (slaveRepositoriesList.length === 0) {\n+        dataToSelectOption(response.data, setSlaveRepositoriesList);\n+      }\n+      if (dependencyRepositoriesList.length === 0) {\n+        dataToSelectOption(response.data, setDependencyRepositoriesList);\n+      }\n+    }\n+  };\n+\n+  /**\n+   * 获取project详情\n+   * @param projectId\n+   * @returns\n+   */\n+  const getProjectDetailHandler = async (projectId: number) => {\n+    const response = await RequestUtils(getProjectDetail, projectId, { msg: \'获取project详情\' });\n+    if (response.success) {\n+      const slaveRepoId2PrefixTemp = {};\n+      const { approvers, slaveRepositories, dependencyRepositories } = response.data;\n+      slaveRepositories.forEach((item: repositoryBasicDataType) => {\n+        slaveRepoId2PrefixTemp[item.id] = item.prefix;\n+      });\n+      setSlaveRepoId2Prefix(slaveRepoId2PrefixTemp);\n+\n+      // 负责人的targetKeys,数据规约是string类型数组\n+      const approversIdList: string[] = [];\n+      approvers.map((item: memberDataType) => {\n+        return approversIdList.push(item.id.toString());\n+      });\n+      // 设置相关穿梭框的targetKeys\n+      setTargetKeysForTransfer(approversIdList);\n+      setTargetKeysForTransferRollback(approversIdList);\n+\n+      // 遍历用户列表,判断当前用户是否为负责人,若是可以提供编辑入口\n+      const groupAllApprovers = await updateGroupApproverState(response.data.groupId);\n+      const allApprovers = [...approvers, ...groupAllApprovers];\n+      const userInfo = allApprovers.find((item: memberDataType) => item.id === currentUserId);\n+      setIsApprover(!!userInfo);\n+\n+      // 将已有的子仓和依赖仓id记录起来,用于校验用户重复选择\n+      const slaveRepoIds: number[] = [];\n+      const dependencyRepoIds: number[] = [];\n+      slaveRepositories.map((item: repositoryBasicDataType) => {\n+        return slaveRepoIds.push(item.id);\n+      });\n+      dependencyRepositories.map((item: repositoryBasicDataType) => {\n+        return dependencyRepoIds.push(item.id);\n+      });\n+\n+      // 设置代码检视开关值\n+      setCodeReviewStateValue(response.data.codeReviewState);\n+      setProjectDetailInfo({ ...response.data });\n+      setReload(!reload);\n+      return true;\n+    }\n+    return false;\n+  };\n+\n+  useEffect(() => {\n+    if (detailDrawerVisible) {\n+      getLabelList(labelTypeStatusMap.repositoryManage.code);\n+    }\n+  }, [detailId]);\n+\n+  useEffect(() => {\n+    if (reload && detailDrawerVisible) {\n+      setDataLoading(true);\n+      setRequestMembersStatus(false);\n+      getProjectDetailHandler(detailId).finally(() => {\n+        setDataLoading(false);\n+      });\n+      form.resetFields();\n+    }\n+  }, [reload, detailDrawerVisible]);\n+\n+  // 若url中的id发生改变,重新请求数据\n+  useEffect(() => {\n+    setUpdateMode(false);\n+    setReload(true);\n+  }, [detailId]);\n+\n+  // 判断是否为编辑模式,如果是编辑模式要获取用户列表\n+  useEffect(() => {\n+    if (updateMode) {\n+      setDataLoading(true);\n+      const getUserPromise = userList.length === 0 ? getUserListHandler() : Promise.resolve();\n+      const getRepoPromise =\n+        slaveRepositoriesList.length === 0 || dependencyRepositoriesList.length === 0 ? getRepositoryListHandler() : Promise.resolve();\n+      Promise.all([getUserPromise, getRepoPromise, getAndSetOpenApiList(), getAndSetCollection()]).finally(() => {\n+        setDataLoading(false);\n+      });\n+    }\n+  }, [updateMode, detailId]);\n+\n+  return (\n+    <>\n+      <Drawer\n+        title="项目详情"\n+        placement="right"\n+        closable\n+        width="100%"\n+        className="detailDrawer detailDrawer-projectDetail"\n+        extra={<DrawerCollapseBtn />}\n+        onClose={closeDetailDrawer}\n+        visible={detailDrawerVisible}\n+        mask={false}\n+        destroyOnClose\n+      >\n+        {detailDrawerVisible ? (\n+          <>\n+            <Card className="gs_descriptionInCard">\n+              <div>{projectDetailInfoRender(projectDetailInfo)}</div>\n+            </Card>\n+            <Modal\n+              visible={confirmVisible}\n+              title="提示"\n+              onOk={submitHandler}\n+              confirmLoading={submitLoading}\n+              onCancel={() => setConfirmVisible(false)}\n+              width={gsModalSize}\n+              destroyOnClose\n+            >\n+              <Form form={form}>\n+                <FormItem name="modifyDescription" rules={[{ required: true, message: \'修改描述不能为空!\' }]}>\n+                  <Input.TextArea placeholder="请输入修改描述" maxLength={1000} showCount />\n+                </FormItem>\n+              </Form>\n+            </Modal>\n+          </>\n+        ) : null}\n+      </Drawer>\n+      {historyVisible ? (\n+        <HistoryDrawer\n+          historyVisible={historyVisible}\n+          closeHistoryDrawer={() => setHistoryVisible(false)}\n+          repositoryId={projectDetailInfo.id}\n+        />\n+      ) : null}\n+    </>\n+  );\n+};\n \n export default ProjectDetail;\n',
  ],
};
